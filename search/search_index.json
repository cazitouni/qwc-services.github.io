{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QWC2 / QWC Services \u00b6 QGIS Web Client 2 (QWC2) is a modular next generation responsive web client for QGIS Server, built with ReactJS and OpenLayers. The core concept of QWC2 is to display QGIS Projects which are published by QGIS Server via WMS. There are two ways to run QWC2: As part of the qwc-services ecosystem, includes additional services to which includes additional services to extend the viewer functionality (such as user administration, editing, etc.). This is the recommended approach. As a standalone viewer (static JS/HTML/CSS web application) on top of QGIS Server. QWC2 with qwc-servies on the backend provide a complete Web GIS infrastructure. Overview of functionalities \u00b6 Without any additional services, the stock QWC2 offers the following main functionalities: Theme switcher (a theme is a published QGIS project) Switchable background layers Layer tree Object information (feature info) Search with configurable providers Measurement tools Redlining (sketching) URL sharing Geolocation PDF printing Raster and DXF export Compare layers Import external layers (WMS, WFS, WMTS, KML, GeoJSON) When run as part of the qwc-services ecosystem, the following additional viewer functionalities are available: User administration Editing Fulltext search Compact permalinks Height profile Custom feature info templates Mapinfo popup Reports (via Jasper) qwc-services also provides the following enterprise relevant functionalities: Docker/Kubernetes or WSGI deployments Multi-tenant setup Custom service integration Multiple authentication backends Explore \u00b6 Developer Quickstart User guide Some public viewers: Demo | Glarus | Solothurn | qgisweb.oslandia.net | Erft Verband Support \u00b6 Community support: Github Commercial Support: Sourcepole and other companies. Improve this web site","title":"Home"},{"location":"#qwc2-qwc-services","text":"QGIS Web Client 2 (QWC2) is a modular next generation responsive web client for QGIS Server, built with ReactJS and OpenLayers. The core concept of QWC2 is to display QGIS Projects which are published by QGIS Server via WMS. There are two ways to run QWC2: As part of the qwc-services ecosystem, includes additional services to which includes additional services to extend the viewer functionality (such as user administration, editing, etc.). This is the recommended approach. As a standalone viewer (static JS/HTML/CSS web application) on top of QGIS Server. QWC2 with qwc-servies on the backend provide a complete Web GIS infrastructure.","title":"QWC2 / QWC Services"},{"location":"#overview-of-functionalities","text":"Without any additional services, the stock QWC2 offers the following main functionalities: Theme switcher (a theme is a published QGIS project) Switchable background layers Layer tree Object information (feature info) Search with configurable providers Measurement tools Redlining (sketching) URL sharing Geolocation PDF printing Raster and DXF export Compare layers Import external layers (WMS, WFS, WMTS, KML, GeoJSON) When run as part of the qwc-services ecosystem, the following additional viewer functionalities are available: User administration Editing Fulltext search Compact permalinks Height profile Custom feature info templates Mapinfo popup Reports (via Jasper) qwc-services also provides the following enterprise relevant functionalities: Docker/Kubernetes or WSGI deployments Multi-tenant setup Custom service integration Multiple authentication backends","title":"Overview of functionalities"},{"location":"#explore","text":"Developer Quickstart User guide Some public viewers: Demo | Glarus | Solothurn | qgisweb.oslandia.net | Erft Verband","title":"Explore"},{"location":"#support","text":"Community support: Github Commercial Support: Sourcepole and other companies. Improve this web site","title":"Support"},{"location":"FAQ/","text":"FAQ \u00b6 Changing the qwc-docker port \u00b6 In the default setup, qwc-docker will run on port 8088 . To change this, you can modify the api-gateway port mapping in docker-compose.yml , i.e. to run on port 1234 : qwc-api-gateway: image: nginx:1.19 ports: - \"1234:80\"","title":"FAQ"},{"location":"FAQ/#faq","text":"","title":"FAQ"},{"location":"FAQ/#changing-the-qwc-docker-port","text":"In the default setup, qwc-docker will run on port 8088 . To change this, you can modify the api-gateway port mapping in docker-compose.yml , i.e. to run on port 1234 : qwc-api-gateway: image: nginx:1.19 ports: - \"1234:80\"","title":"Changing the qwc-docker port"},{"location":"QuickStart/","text":"Quick start \u00b6 Running QWC2 as part of qwc-services \u00b6 qwc-services is a collection of loosely coupled micro-services for extending QWC2. The services communicate with each other via HTTP/Rest, and are mostly written in Python. The easiest way to run qwc-services is to use the readily available docker images, using the sample setup at qwc-docker . To be able to run qwc-docker , first install docker and docker compose : Docker: https://docs.docker.com/engine/install/ docker-compose: https://docs.docker.com/compose/install/ Then, follow these steps: Clone the qwc-docker sample setup at qwc-docker and copy the docker-compose and api-gateway configuration templates: git clone https://github.com/qwc-services/qwc-docker.git cd qwc-docker cp docker-compose-example.yml docker-compose.yml cp api-gateway/nginx-example.conf api-gateway/nginx.conf Set the password for the postgres superuser in docker-compose.yml : qwc-postgis: image: sourcepole/qwc-base-db:<version> environment: POSTGRES_PASSWORD: '<SET YOUR PASSWORD HERE>' Create a secret key: python3 -c 'import secrets; print(\"JWT_SECRET_KEY=\\\"%s\\\"\" % secrets.token_hex(48))' >.env Change the UID/GID which runs the QWC services to match the user/group which owns the shared volumes on the host by setting SERVICE_UID and SERVICE_GID in qwc-docker/docker-compose.yml . Set permissions for the shared solr data volume: sudo chown 8983:8983 volumes/solr/data Start all containers (will download all images from dockerhub when executed the first time): docker-compose up Note : If using the newer docker compose project, you need to write docker compose up instead of docker-compose up (and similarly for other docker-compose calls). Note : The sample docker-compose-example.yml uses latest-lts as image versions. It is recommended to replace these with a fix version tag when deploying the application to prevent docker from automatically pulling new versions when the application is launched, which may be undesired. See Keeping QWC services up to date . The map viewer will run on http://localhost:8088/ . The admin GUI will run on http://localhost:8088/qwc_admin (default admin credentials: username admin , password admin , requires password change on first login). Next steps: Configure the themes Customize the viewer Configuring the services Set resource permissions Running QWC2 as a standalone viewer \u00b6 If you don't need the advanced functionalities provided by qwc-services or want to integrate QWC2 in another environment, you can run QWC2 as a standalone viewer. To work with QWC2, you will need a minimal development environment consisting of git , node and yarn . You will also need a running QGIS Server instance which serves your projects. The fastest way to get started is by cloning the demo application: git clone --recursive https://github.com/qgis/qwc2-demo-app.git Next, install all required dependencies: cd qwc2-demo-app yarn install Then, start a local development application: yarn start The development application will run by default on http://localhost:8081 . At this point, you can customize and configure the application according to your needs, as described in detail in the following chapters. The final step is to compile a deployable application bundle for production: yarn run prod You can then deploy the contents of the prod folder to your web server. Next steps: Configure the themes Customize the viewer","title":"Quick start"},{"location":"QuickStart/#quick-start","text":"","title":"Quick start"},{"location":"QuickStart/#running-qwc2-as-part-of-qwc-services","text":"qwc-services is a collection of loosely coupled micro-services for extending QWC2. The services communicate with each other via HTTP/Rest, and are mostly written in Python. The easiest way to run qwc-services is to use the readily available docker images, using the sample setup at qwc-docker . To be able to run qwc-docker , first install docker and docker compose : Docker: https://docs.docker.com/engine/install/ docker-compose: https://docs.docker.com/compose/install/ Then, follow these steps: Clone the qwc-docker sample setup at qwc-docker and copy the docker-compose and api-gateway configuration templates: git clone https://github.com/qwc-services/qwc-docker.git cd qwc-docker cp docker-compose-example.yml docker-compose.yml cp api-gateway/nginx-example.conf api-gateway/nginx.conf Set the password for the postgres superuser in docker-compose.yml : qwc-postgis: image: sourcepole/qwc-base-db:<version> environment: POSTGRES_PASSWORD: '<SET YOUR PASSWORD HERE>' Create a secret key: python3 -c 'import secrets; print(\"JWT_SECRET_KEY=\\\"%s\\\"\" % secrets.token_hex(48))' >.env Change the UID/GID which runs the QWC services to match the user/group which owns the shared volumes on the host by setting SERVICE_UID and SERVICE_GID in qwc-docker/docker-compose.yml . Set permissions for the shared solr data volume: sudo chown 8983:8983 volumes/solr/data Start all containers (will download all images from dockerhub when executed the first time): docker-compose up Note : If using the newer docker compose project, you need to write docker compose up instead of docker-compose up (and similarly for other docker-compose calls). Note : The sample docker-compose-example.yml uses latest-lts as image versions. It is recommended to replace these with a fix version tag when deploying the application to prevent docker from automatically pulling new versions when the application is launched, which may be undesired. See Keeping QWC services up to date . The map viewer will run on http://localhost:8088/ . The admin GUI will run on http://localhost:8088/qwc_admin (default admin credentials: username admin , password admin , requires password change on first login). Next steps: Configure the themes Customize the viewer Configuring the services Set resource permissions","title":"Running QWC2 as part of qwc-services"},{"location":"QuickStart/#running-qwc2-as-a-standalone-viewer","text":"If you don't need the advanced functionalities provided by qwc-services or want to integrate QWC2 in another environment, you can run QWC2 as a standalone viewer. To work with QWC2, you will need a minimal development environment consisting of git , node and yarn . You will also need a running QGIS Server instance which serves your projects. The fastest way to get started is by cloning the demo application: git clone --recursive https://github.com/qgis/qwc2-demo-app.git Next, install all required dependencies: cd qwc2-demo-app yarn install Then, start a local development application: yarn start The development application will run by default on http://localhost:8081 . At this point, you can customize and configure the application according to your needs, as described in detail in the following chapters. The final step is to compile a deployable application bundle for production: yarn run prod You can then deploy the contents of the prod folder to your web server. Next steps: Configure the themes Customize the viewer","title":"Running QWC2 as a standalone viewer"},{"location":"UserGuide/","text":"User guide \u00b6 This section contains user documentation of the QWC2 application and QWC services. It describes some of the available features. Note : Depending on the specific viewer configuration, some functionalities might be missing or different than described in this section. Overview \u00b6 QGIS Web Client is composed of some essential features for the user to be able to navigate through its GIS data. The user interface is composed of : a map : navigate through your GIS data, zoom, pan a toolbar : configure some shortcuts for tools (none in this example) a logo : customize your application with your company logo a searchbar : search in the application according to configurable search providers a menu : navigate through all the tools and features of the application a scalebar : see what is the current scale of the map a coordinates display according to the mouse position in several configurable CRS (Coordinates Reference System) a drop-down list of scales : set the zoom of the map at a pre-defined scale shortcuts : configure shortcut buttons for some features (Show Layer Tree for example) home button : set the extent of the map at the home extent defined in your QGIS project location button : zoom at the location of your device zoom buttons : zoom in or out the map a background switcher : change background layer among those configured in the application attributions : links to the attributions data terms of use : links to the terms of use of the application Basic features \u00b6 Menu \u00b6 Here is a minimalist menu of the application with basic features : Theme \u00b6 Theme menu lists all the published QGIS projects in the application. One theme is linked to one QGIS project . You can switch from one to another by clicking on corresponding thumbnails. Then, the map is updated with data of the selected theme. Themes can be sorted in groups. You can also open a theme in a new tab, add a whole theme to the current map (to display several projects at the same time) or add some layers of a theme to the current one. Layers & Legend \u00b6 Layers & Legend menu allows user to show or hide any layer (or group of layers) on the map. Each layer comes from a published QGIS project (or theme ), or from an external WMS/WFS, or local file. On the top of this menu, you can print the legend of the displayed theme by clicking the print button. This will open a new window, where you can print this legend. The eye button is used to filter layers that are not visible. The trash button is used to remove all the layers displayed in the current map. You can retrieve layers from a QGIS project by selecting a theme in Theme menu. The i button displays a new window with all the informations about the current theme. These informations are retrieved from the QGIS project properties. For each layer, user can: remove the layer by clicking the trash button. This removes the layer only for the current context of the user, not for all the users. If the layer comes from the QGIS project, you can retrieve the deleted one by selecting the theme in Theme menu. change the order of display, by clicking up and down arrows buttons change opacity with the slider zoom on the layer extent with the magnifying glass button display layer legend by hovering the image on the left of the layer name or by clicking the i button (new window displaying info about the layer retrieved from QGIS project) The Show layer map tips option is used to display a tooltip when hovering an object on the map. It needs you have configured a map tip in layers properties. The Compare top layer option splits the map into two parts. On the left side, top layer (in the tree) is displayed while it is not on the right side. You can move the slider on the map to see the differences between the two sides. The Import layer submenu allows user to add some external data to the current map. You can configure some predefined URLs in the application. For example, Swisstopo WMTS is a predefined entry in the demo application which queries https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml . You can also add other URLs that are not predefined in the application, https://wxs.ign.fr/clc/geoportail/r/wms?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetCapabilities if you want to add french Corine Land Cover data. By clicking on connect, there is a list of data available from the entered URL and you can add some of the layers to your current map by clicking on them. In the Import layer submenu, you can also import local files to the current map. Only some formats are supported ( GeoJSON , JSON , KML ). Map Tools \u00b6 In the Map Tools menu, user can retrieve some basic features of GIS webclient : * identify objects * measuring tools * drawing tools * export image Identify \u00b6 To identify an object and get attribute values, you can click directly on the map. If an object is present at the click position, there is a request sent to QGIS Server to get attributes of the clicked object. Results are displayed in a window with all objects identified. Geometry of queried objects are highlighted. You can zoom on an object extent, or browse results one by one in the Feature Info panel. Finally, you can export results of all identified objects ( JSON , GeoJSON , CSV or CSV + ZIP ). To be able to query an object, layer must be configured as queryable in the QGIS project (check the Identifiable checkbox in Project \u2192 Properties \u2192 Data Sources in your QGIS project). Identify Region \u00b6 User can also use Identify Region tool to identify multiple objects in the same time. Draw a polygon around the features to identify to get the results. Measure \u00b6 Measuring tools can be used to retrieve position, object length, object area, ... Values can be copied to clipboard with the copy button. Position \u00b6 Click on the map to get coordinates. Coordinates are displayed according to selected CRS in bottom bar of the application (here WGS 84 / Pseudo Mercator ). Length \u00b6 Draw a polyline on the map to measure the length of each segment and the sum of all these lengths. User can choose the units of measurement ( meters , feet , kilometers , miles ). Area \u00b6 Draw a polygon on the map to measure an area. User can choose the units of measurement ( square meters , square feet , square kilometers , square miles , hectares ). Bearing \u00b6 Draw a line on the map to get the bearing angle of this line (angle from start point to end point). Redlining \u00b6 In Redlining tool, user can add some annotations to the map in different temporary layers. The default layer in which you can add annotations is named Redlining . You can add new layers by clicking + button. Drawing layers are available in Layers & Legend menu. Drawing options are : * point * polyline * polygon * circle * text For each object, you can set border color, fill color, size. Fill the label entry to set text on your object. Once you have drawn objects, you can edit them by picking one and change options. Pick an object and click on trash button to delete it. Buffer option is used to create a buffer around the selected object. Raster Export \u00b6 Raster Export tool allows the user to export a screenshot of the map in an image ( png , jpeg ) at a specified resolution ( 96 dpi , 300 dpi ). Draw a rectangle on the map to export a region in an image. An image is opened in a new tab and you can save it on your computer with the specified format and resolution. Print \u00b6 With Print menu, you can export a layout configured in your QGIS project as PDF file. When clicking on the menu, a list of all available layouts of the theme (QGIS project) is displayed. You can set some options : scale, rotation, grid and custom text (if configured in the layout). Result is displayed in a new tab or in a window in the application. Then, you can save it in a file or print it. Help \u00b6 By default, Help menu displays the build date of the application. You can also customize this menu to have a link to the QWC User documentation. External Link \u00b6 External Link menu can be used to have a link to other resources. For example, your company site.","title":"User guide"},{"location":"UserGuide/#user-guide","text":"This section contains user documentation of the QWC2 application and QWC services. It describes some of the available features. Note : Depending on the specific viewer configuration, some functionalities might be missing or different than described in this section.","title":"User guide"},{"location":"UserGuide/#overview","text":"QGIS Web Client is composed of some essential features for the user to be able to navigate through its GIS data. The user interface is composed of : a map : navigate through your GIS data, zoom, pan a toolbar : configure some shortcuts for tools (none in this example) a logo : customize your application with your company logo a searchbar : search in the application according to configurable search providers a menu : navigate through all the tools and features of the application a scalebar : see what is the current scale of the map a coordinates display according to the mouse position in several configurable CRS (Coordinates Reference System) a drop-down list of scales : set the zoom of the map at a pre-defined scale shortcuts : configure shortcut buttons for some features (Show Layer Tree for example) home button : set the extent of the map at the home extent defined in your QGIS project location button : zoom at the location of your device zoom buttons : zoom in or out the map a background switcher : change background layer among those configured in the application attributions : links to the attributions data terms of use : links to the terms of use of the application","title":"Overview"},{"location":"UserGuide/#basic-features","text":"","title":"Basic features"},{"location":"UserGuide/#menu","text":"Here is a minimalist menu of the application with basic features :","title":"Menu"},{"location":"UserGuide/#theme","text":"Theme menu lists all the published QGIS projects in the application. One theme is linked to one QGIS project . You can switch from one to another by clicking on corresponding thumbnails. Then, the map is updated with data of the selected theme. Themes can be sorted in groups. You can also open a theme in a new tab, add a whole theme to the current map (to display several projects at the same time) or add some layers of a theme to the current one.","title":"Theme"},{"location":"UserGuide/#layers-legend","text":"Layers & Legend menu allows user to show or hide any layer (or group of layers) on the map. Each layer comes from a published QGIS project (or theme ), or from an external WMS/WFS, or local file. On the top of this menu, you can print the legend of the displayed theme by clicking the print button. This will open a new window, where you can print this legend. The eye button is used to filter layers that are not visible. The trash button is used to remove all the layers displayed in the current map. You can retrieve layers from a QGIS project by selecting a theme in Theme menu. The i button displays a new window with all the informations about the current theme. These informations are retrieved from the QGIS project properties. For each layer, user can: remove the layer by clicking the trash button. This removes the layer only for the current context of the user, not for all the users. If the layer comes from the QGIS project, you can retrieve the deleted one by selecting the theme in Theme menu. change the order of display, by clicking up and down arrows buttons change opacity with the slider zoom on the layer extent with the magnifying glass button display layer legend by hovering the image on the left of the layer name or by clicking the i button (new window displaying info about the layer retrieved from QGIS project) The Show layer map tips option is used to display a tooltip when hovering an object on the map. It needs you have configured a map tip in layers properties. The Compare top layer option splits the map into two parts. On the left side, top layer (in the tree) is displayed while it is not on the right side. You can move the slider on the map to see the differences between the two sides. The Import layer submenu allows user to add some external data to the current map. You can configure some predefined URLs in the application. For example, Swisstopo WMTS is a predefined entry in the demo application which queries https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml . You can also add other URLs that are not predefined in the application, https://wxs.ign.fr/clc/geoportail/r/wms?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetCapabilities if you want to add french Corine Land Cover data. By clicking on connect, there is a list of data available from the entered URL and you can add some of the layers to your current map by clicking on them. In the Import layer submenu, you can also import local files to the current map. Only some formats are supported ( GeoJSON , JSON , KML ).","title":"Layers &amp; Legend"},{"location":"UserGuide/#map-tools","text":"In the Map Tools menu, user can retrieve some basic features of GIS webclient : * identify objects * measuring tools * drawing tools * export image","title":"Map Tools"},{"location":"UserGuide/#identify","text":"To identify an object and get attribute values, you can click directly on the map. If an object is present at the click position, there is a request sent to QGIS Server to get attributes of the clicked object. Results are displayed in a window with all objects identified. Geometry of queried objects are highlighted. You can zoom on an object extent, or browse results one by one in the Feature Info panel. Finally, you can export results of all identified objects ( JSON , GeoJSON , CSV or CSV + ZIP ). To be able to query an object, layer must be configured as queryable in the QGIS project (check the Identifiable checkbox in Project \u2192 Properties \u2192 Data Sources in your QGIS project).","title":"Identify"},{"location":"UserGuide/#identify-region","text":"User can also use Identify Region tool to identify multiple objects in the same time. Draw a polygon around the features to identify to get the results.","title":"Identify Region"},{"location":"UserGuide/#measure","text":"Measuring tools can be used to retrieve position, object length, object area, ... Values can be copied to clipboard with the copy button.","title":"Measure"},{"location":"UserGuide/#position","text":"Click on the map to get coordinates. Coordinates are displayed according to selected CRS in bottom bar of the application (here WGS 84 / Pseudo Mercator ).","title":"Position"},{"location":"UserGuide/#length","text":"Draw a polyline on the map to measure the length of each segment and the sum of all these lengths. User can choose the units of measurement ( meters , feet , kilometers , miles ).","title":"Length"},{"location":"UserGuide/#area","text":"Draw a polygon on the map to measure an area. User can choose the units of measurement ( square meters , square feet , square kilometers , square miles , hectares ).","title":"Area"},{"location":"UserGuide/#bearing","text":"Draw a line on the map to get the bearing angle of this line (angle from start point to end point).","title":"Bearing"},{"location":"UserGuide/#redlining","text":"In Redlining tool, user can add some annotations to the map in different temporary layers. The default layer in which you can add annotations is named Redlining . You can add new layers by clicking + button. Drawing layers are available in Layers & Legend menu. Drawing options are : * point * polyline * polygon * circle * text For each object, you can set border color, fill color, size. Fill the label entry to set text on your object. Once you have drawn objects, you can edit them by picking one and change options. Pick an object and click on trash button to delete it. Buffer option is used to create a buffer around the selected object.","title":"Redlining"},{"location":"UserGuide/#raster-export","text":"Raster Export tool allows the user to export a screenshot of the map in an image ( png , jpeg ) at a specified resolution ( 96 dpi , 300 dpi ). Draw a rectangle on the map to export a region in an image. An image is opened in a new tab and you can save it on your computer with the specified format and resolution.","title":"Raster Export"},{"location":"UserGuide/#print","text":"With Print menu, you can export a layout configured in your QGIS project as PDF file. When clicking on the menu, a list of all available layouts of the theme (QGIS project) is displayed. You can set some options : scale, rotation, grid and custom text (if configured in the layout). Result is displayed in a new tab or in a window in the application. Then, you can save it in a file or print it.","title":"Print"},{"location":"UserGuide/#help","text":"By default, Help menu displays the build date of the application. You can also customize this menu to have a link to the QWC User documentation.","title":"Help"},{"location":"UserGuide/#external-link","text":"External Link menu can be used to have a link to other resources. For example, your company site.","title":"External Link"},{"location":"configuration/ResourcesPermissions/","text":"Managing Users, Resources and Permissions \u00b6 qwc-docker has a QWC configuration backend . That backend can be reached by default at http://localhost:8088/qwc_admin . The configuration backend allows to assign users and groups to roles. The roles in their turn can receive permissions on resources. These configuration settings will be stored in the configuration database . Out of the box qwc-docker comes with with a container qwc-postgis that contains the configuration database. Users, groups and roles \u00b6 Roles can be given permissions on resources. That means that if you want to give users or groups permissions on resources, then you have to first create a role, configure the permissions that the roles has on some resources, and then assign the role the users or groups. Resources \u00b6 The following resource types are available: Map : WMS corresponding to a QGIS Project Layer : layer of a map Attribute : attribute of a map layer Print template : print composer template of a QGIS Project Data : Data layer for editing Attribute : attribute of a data layer Data (create) : Data layer for creating features Data (read) : Data layer for reading features Data (update) : Data layer for updating features Data (delete) : Data layer for deleting features Viewer : custom map viewer configuration Viewer task : permittable viewer tasks FeatureInfo service : Feature info service FeatureInfo layer : Feature info layer The resource name corresponds to the technical name of its resource (e.g. WMS layer name). Most notably, the name of a map resource corresponds to the relative path to the project below qgs-resources without .qgs extension (so i.e. the resource name for qgs-resources/subfolder/project.qgs will be subfolder/project ). Note: If your QGIS project is configured to return the field aliases rather than the field names in GetFeatureInfo , the resource name for layer attribute resources corresponds to the alias of the field. Available map , layer , attribute and print_template resources are determined from WMS GetProjectSettings and the QGIS projects. data and their attribute resources define a data layer for the Data service . For more detailed CRUD permissions data_create , data_read , data_update and data_delete can be used instead of data ( data and write=False is equivalent to data_read ; data and write=True is equivalent to all CRUD resources combined). The viewer resource defines a custom viewer configuration for the map viewer (see Custom viewer configurations ). The viewer_task resource defines viewer functionalities (e.g. printing or raster export) that can be restricted or permitted. Their name (e.g. RasterExport ) corresponds to the key in menuItems and toolbarItems in the QWC2 config.json . Restricted viewer task items are then removed from the menu and toolbar in the map viewer. Viewer tasks not explicitly added as resources are kept unchanged from the config.json . Note : The resource types, i.e. for custom QWC2 plugins, can be extended by inserting new types into the qwc_config.resource_types table. These can be queried, e.g. in a custom service, by using PermissionClient::resource_permissions() or PermissionClient::resource_restrictions() from QWC Services Core . Permissions \u00b6 Permissions are based on roles. Roles can be assigned to groups or users, and users can be members of groups. A special role is \"public\". The \"public\" role applies always, no matter whether a user is signed in or is not signed in. Roles can be assigned permission for resources. The write flag is only used for data resources and determines whether a data layer is read-only. Based on the user's identity (user name and/or group name), all corresponding roles and their permissions and restrictions are collected. The service configurations are then modified according to these permissions and restrictions. By using the permissions_default_allow configuration setting in tenantConfig.json , some resources can be set to be permitted or restricted by default if no permissions are set (default: false ). Among affected resources are Map , Layer , Print template , Viewer task , FeatureInfo service , FeatureInfo layer . E.g.: permissions_default_allow=true : all maps and layers are permitted by default permissions_default_allow=false : maps and layers are only available if their resources and permissions are explicitly configured Restricted themes \u00b6 The display behaviour of restricted themes can be configured in the mapViewer service configuration in tenantConfig.json as follows: { \"name\": \"mapViewer\", \"config\": { \"show_restricted_themes\": false, \"show_restricted_themes_whitelist\": [], \"redirect_restricted_themes_to_auth\": false, \"internal_permalink_service_url\": \"http://qwc-permalink-service:9090\" } } show_restricted_themes : Whether to show placeholder items for restricted themes. Default: false . show_restricted_themes_whitelist : Whitelist of restricted theme names to display as placeholders. If empty, all restricted themes are shown. Only used if show_restricted_themes enabled. Default: [] . redirect_restricted_themes_to_auth : Whether to redirect to login on auth service if requesting a restricted theme in URL params, if not currently signed in. Default: false . internal_permalink_service_url : Internal permalink service URL for getting the theme from a resolved permalink for redirecting to login (default: http://qwc-permalink-service:9090 ). This is used only if redirect_restricted_themes_to_auth is enabled and permalink_service_url is set. Permissions file \u00b6 The QWC Config Generator generates a JSON file for all permissions from the QWC ConfigDB. See READMEs of QWC services for service specific contents in permissions.json . Group registration \u00b6 Using the optional Registration GUI allows users to request membership or unsubscribe from registrable groups. These requests can then be accepted or rejected in the Admin GUI . Workflow: Admin GUI admin user creates new groups with assigned roles and permissions on resources admin user configures registrable groups Registration GUI user select desired groups from registrable groups and submits application form admin users are notified of new registration requests Admin GUI admin user selects entry from list of pending registration requests admin user accepts or rejects registration requests for a user user is added to or removed from accepted groups user is notified of registration request updates Map Viewer user permissions are updated for new groups","title":"Resources and permissions"},{"location":"configuration/ResourcesPermissions/#managing-users-resources-and-permissions","text":"qwc-docker has a QWC configuration backend . That backend can be reached by default at http://localhost:8088/qwc_admin . The configuration backend allows to assign users and groups to roles. The roles in their turn can receive permissions on resources. These configuration settings will be stored in the configuration database . Out of the box qwc-docker comes with with a container qwc-postgis that contains the configuration database.","title":"Managing Users, Resources and Permissions"},{"location":"configuration/ResourcesPermissions/#users-groups-and-roles","text":"Roles can be given permissions on resources. That means that if you want to give users or groups permissions on resources, then you have to first create a role, configure the permissions that the roles has on some resources, and then assign the role the users or groups.","title":"Users, groups and roles"},{"location":"configuration/ResourcesPermissions/#resources","text":"The following resource types are available: Map : WMS corresponding to a QGIS Project Layer : layer of a map Attribute : attribute of a map layer Print template : print composer template of a QGIS Project Data : Data layer for editing Attribute : attribute of a data layer Data (create) : Data layer for creating features Data (read) : Data layer for reading features Data (update) : Data layer for updating features Data (delete) : Data layer for deleting features Viewer : custom map viewer configuration Viewer task : permittable viewer tasks FeatureInfo service : Feature info service FeatureInfo layer : Feature info layer The resource name corresponds to the technical name of its resource (e.g. WMS layer name). Most notably, the name of a map resource corresponds to the relative path to the project below qgs-resources without .qgs extension (so i.e. the resource name for qgs-resources/subfolder/project.qgs will be subfolder/project ). Note: If your QGIS project is configured to return the field aliases rather than the field names in GetFeatureInfo , the resource name for layer attribute resources corresponds to the alias of the field. Available map , layer , attribute and print_template resources are determined from WMS GetProjectSettings and the QGIS projects. data and their attribute resources define a data layer for the Data service . For more detailed CRUD permissions data_create , data_read , data_update and data_delete can be used instead of data ( data and write=False is equivalent to data_read ; data and write=True is equivalent to all CRUD resources combined). The viewer resource defines a custom viewer configuration for the map viewer (see Custom viewer configurations ). The viewer_task resource defines viewer functionalities (e.g. printing or raster export) that can be restricted or permitted. Their name (e.g. RasterExport ) corresponds to the key in menuItems and toolbarItems in the QWC2 config.json . Restricted viewer task items are then removed from the menu and toolbar in the map viewer. Viewer tasks not explicitly added as resources are kept unchanged from the config.json . Note : The resource types, i.e. for custom QWC2 plugins, can be extended by inserting new types into the qwc_config.resource_types table. These can be queried, e.g. in a custom service, by using PermissionClient::resource_permissions() or PermissionClient::resource_restrictions() from QWC Services Core .","title":"Resources"},{"location":"configuration/ResourcesPermissions/#permissions","text":"Permissions are based on roles. Roles can be assigned to groups or users, and users can be members of groups. A special role is \"public\". The \"public\" role applies always, no matter whether a user is signed in or is not signed in. Roles can be assigned permission for resources. The write flag is only used for data resources and determines whether a data layer is read-only. Based on the user's identity (user name and/or group name), all corresponding roles and their permissions and restrictions are collected. The service configurations are then modified according to these permissions and restrictions. By using the permissions_default_allow configuration setting in tenantConfig.json , some resources can be set to be permitted or restricted by default if no permissions are set (default: false ). Among affected resources are Map , Layer , Print template , Viewer task , FeatureInfo service , FeatureInfo layer . E.g.: permissions_default_allow=true : all maps and layers are permitted by default permissions_default_allow=false : maps and layers are only available if their resources and permissions are explicitly configured","title":"Permissions"},{"location":"configuration/ResourcesPermissions/#restricted-themes","text":"The display behaviour of restricted themes can be configured in the mapViewer service configuration in tenantConfig.json as follows: { \"name\": \"mapViewer\", \"config\": { \"show_restricted_themes\": false, \"show_restricted_themes_whitelist\": [], \"redirect_restricted_themes_to_auth\": false, \"internal_permalink_service_url\": \"http://qwc-permalink-service:9090\" } } show_restricted_themes : Whether to show placeholder items for restricted themes. Default: false . show_restricted_themes_whitelist : Whitelist of restricted theme names to display as placeholders. If empty, all restricted themes are shown. Only used if show_restricted_themes enabled. Default: [] . redirect_restricted_themes_to_auth : Whether to redirect to login on auth service if requesting a restricted theme in URL params, if not currently signed in. Default: false . internal_permalink_service_url : Internal permalink service URL for getting the theme from a resolved permalink for redirecting to login (default: http://qwc-permalink-service:9090 ). This is used only if redirect_restricted_themes_to_auth is enabled and permalink_service_url is set.","title":"Restricted themes"},{"location":"configuration/ResourcesPermissions/#permissions-file","text":"The QWC Config Generator generates a JSON file for all permissions from the QWC ConfigDB. See READMEs of QWC services for service specific contents in permissions.json .","title":"Permissions file"},{"location":"configuration/ResourcesPermissions/#group-registration","text":"Using the optional Registration GUI allows users to request membership or unsubscribe from registrable groups. These requests can then be accepted or rejected in the Admin GUI . Workflow: Admin GUI admin user creates new groups with assigned roles and permissions on resources admin user configures registrable groups Registration GUI user select desired groups from registrable groups and submits application form admin users are notified of new registration requests Admin GUI admin user selects entry from list of pending registration requests admin user accepts or rejects registration requests for a user user is added to or removed from accepted groups user is notified of registration request updates Map Viewer user permissions are updated for new groups","title":"Group registration"},{"location":"configuration/ServiceConfiguration/","text":"QWC Services configuration \u00b6 The architecture of qwc-services is as follows: API-Gateway: API Gateway, forwards requests to individual services http://localhost:8088 Auth-Service: Authentication service with local user database (default users: admin:admin, demo:demo) http://localhost:8088/auth/login Map viewer: QWC2 map viewer http://localhost:8088 OGC Service: Proxy for WMS/WFS requests filtered by permissions, calls QGIS Server http://localhost:8088/ows/api Admin GUI: Admin GUI http://localhost:8088/qwc_admin/ qwc-docker ships a pre-configured the qwc-services ecosystem as an easy to use application. Service overview \u00b6 Following is an overview of existing qwc-services : Applications : QWC2 Map Viewer : The map viewer application QWC Admin GUI : Configuration backend for managing users and permissions Registration GUI : GUI for registration of new users REST services : DB auth service : Authentication service with local user database LDAP auth service : LDAP Authentication service Data service : Data edit service, required for QWC2 editing functionality Document service : Service for generating Jasper reports Elevation service : Service for providing elevation data, required for QWC2 elevation profile Feature info service : Service for providing enhanced GetFeatureInfo responses to QWC2 Fulltext search service : Fulltext search service for the QWC2 search functionality Legend service : Service for providing enhanced legend graphics to QWC2 Mapinfo service : Service for providing additional information to the QWC2 right-click map context popup OGC service : Proxy for WMS/WFS requests filtered by permissions, calls QGIS Server Permalink service : Service for storing compat permalinks and bookmarks generated by QWC2 Print service : Service for enhancing the QWC2 GetPrint requests Configuration database : DB schema and migrations Configuration generator : Configuration generator qwc-docker layout \u00b6 The layout of the qwc-docker tree is as follows: Path Description \u251c\u2500 api-gateway/nginx.conf API gateway configuration. \u251c\u2500 volumes/ Contains folders which are mounted into the various containers. \u2502 \u251c\u2500 attachments Storage of files uploaded through the QWC2 editing functionality. \u2502 \u251c\u2500 config/<tenant>/ Service configuration files, generated by qwc-config-generator . \u2502 \u251c\u2500 config-in/<tenant>/ Input configuration files, processed by the qwc-config-generator . \u2502 \u2502 \u251c\u2500 config.json Master configuration for the QWC2 viewer. \u2502 \u2502 \u251c\u2500 index.html Viewer entry point. \u2502 \u2502 \u251c\u2500 themesConfig.json Themes configuration. \u2502 \u2502 \u2514\u2500 tenantConfig.json Master configuration file for qwc services. \u2502 \u251c\u2500 db/ Storage of configuration database (see Config DB ). \u2502 \u251c\u2500 info-templates/ Custom feature-info templates (see qwc-feature-info-service ). \u2502 \u251c\u2500 jasper-reports/ Jasper reports (see qwc-document-service ). \u2502 \u251c\u2500 legends/ Custom legend images (see qwc-legend-service ). \u2502 \u251c\u2500 qgs-resources/ QGIS projects and data referenced by the projects. \u2502 \u251c\u2500 qwc2/ QWC2 Viewer. \u2502 \u2514\u2500 solr/ Fulltext search index. \u251c\u2500 docker-compose.yml Container configuration file. \u251c\u2500 pg_service.conf Database service definitions. \u2514\u2500 pg_service-write.conf Database service definitions for write connections. Service configurations \u00b6 The master configuration file for the QWC services is located at qwc-docker/volumes/config-in/<tenant>/tenantConfig.json , where <tenant> is the tenant name, default by default. See Multi Tenancy for more details on tenants. The file is structured as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { <ConfigGenerator config> }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"<service name\", <Service config> }, ... ] } Refer to the qwc-config-generator schema for the available ConfigGenerator config settings. themesConfig is a relative path to the theme configuration file as documented in Theme configuration . The services block contains the configuration for the individual QWC services, as documented in the reference . Note: All config settings can also be set as environment variables in capitalized form in docker-compose.yml . Note: Some variables must be set as environment variables in docker-compose.yml : ENV Default value Description INPUT_CONFIG_PATH config-in Base path for service configuration files OUTPUT_CONFIG_PATH /tmp Base path for service configuration files JWT_SECRET_KEY ******** secret key for JWT token TENANT_URL_RE None Regex for tenant extraction from base URL. Example: ^https?://.+?/(.+?)/ TENANT_HEADER None Tenant Header name. Example: Tenant Enabling additional services \u00b6 Add service entry in qwc-services/docker-compose.yml , setting the service mountpoint: SERVICE_MOUNTPOINT=/<mountpoint> Example: qwc-print-service: image: sourcepole/qwc-print-service:vYYYY.MM.DD environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/print' volumes: - ./volumes/config:/srv/qwc_service/config:ro ports: - \"127.0.0.1:5020:9090\" Add corresponding entry in api-gateway/nginx.conf , example: location /api/v1/print { proxy_pass http://qwc-print-service:9090; } If necessary, uncomment/add the respective service url (see also the qwc-map-viewer schema reference ) in the mapViewer config block of volumes/config-in/default/tenantConfig.json , i.e. { \"name\": \"mapViewer\", \"generator_config\": { # ... }, \"config\": { \"print_service_url\": \"/api/v1/print/\", # ... } } Add the service configuration block below services in volumes/config-in/default/tenantConfig.json , according to the service config schema, i.e. { \"name\": \"print\", \"config\": { \"ogc_service_url\": \"http://qwc-ogc-service:9090/\", \"qgis_server_version\": \"3.16\" } } Configuration database \u00b6 The Configuration database (CofigDB) contains the database schema qwc_config for configurations and permissions of QWC services. This database uses the PostgreSQL connection service qwc_configdb by default, which can be setup for the corresponding database in the PostgreSQL connection service file qwc-docker/pg_service.conf . To use an external configuration database, either change the connection definition for qwc_configdb in qwc-docker/pg_service.conf or change the config_db_url in qwc-docker/volumes/config-in/<tenant>/tenantConfig.json . Database migrations \u00b6 Migrations to the ConfigDB are applied automatically by the qwc-base-db-migrate image which is included in the sample docker-compose-example.yml . To upgrade the ConfigDB to a newer version, it is sufficient to change the version of the image to the desired version, and migrations will be applied automatically next time the application is restarted. See the qwc-base-db README for more info. Keeping QWC services up to date \u00b6 When using qwc-docker , updating the services is a simple as updating the image tags in qwc-docker/docker-compose.yml . Two versioning schemes are available: vYYYY-MM-DD : These refer to the latest available \"development\" version of the respective images (i.e. v2023.05.12 ). vYYYY.X-lts : These refer to the long term support version of the respective images (i.e. v2023.1-lts ). You can always check the available tags on dockerhub, for example at https://hub.docker.com/r/sourcepole/qwc-config-generator . In particular, to special tags exist, latest and latest-lts which always refer to the latest available \"development\" and long term support versions respectively. Note however that using these tags will result in docker automatically pulling new versions when the application is launched, which may be undesired. The qwc-docker Upgrade Notes documents major changes, and in particular all incompatible changes between releases which require changes to the application specific code and/or configuration.","title":"Services"},{"location":"configuration/ServiceConfiguration/#qwc-services-configuration","text":"The architecture of qwc-services is as follows: API-Gateway: API Gateway, forwards requests to individual services http://localhost:8088 Auth-Service: Authentication service with local user database (default users: admin:admin, demo:demo) http://localhost:8088/auth/login Map viewer: QWC2 map viewer http://localhost:8088 OGC Service: Proxy for WMS/WFS requests filtered by permissions, calls QGIS Server http://localhost:8088/ows/api Admin GUI: Admin GUI http://localhost:8088/qwc_admin/ qwc-docker ships a pre-configured the qwc-services ecosystem as an easy to use application.","title":"QWC Services configuration"},{"location":"configuration/ServiceConfiguration/#service-overview","text":"Following is an overview of existing qwc-services : Applications : QWC2 Map Viewer : The map viewer application QWC Admin GUI : Configuration backend for managing users and permissions Registration GUI : GUI for registration of new users REST services : DB auth service : Authentication service with local user database LDAP auth service : LDAP Authentication service Data service : Data edit service, required for QWC2 editing functionality Document service : Service for generating Jasper reports Elevation service : Service for providing elevation data, required for QWC2 elevation profile Feature info service : Service for providing enhanced GetFeatureInfo responses to QWC2 Fulltext search service : Fulltext search service for the QWC2 search functionality Legend service : Service for providing enhanced legend graphics to QWC2 Mapinfo service : Service for providing additional information to the QWC2 right-click map context popup OGC service : Proxy for WMS/WFS requests filtered by permissions, calls QGIS Server Permalink service : Service for storing compat permalinks and bookmarks generated by QWC2 Print service : Service for enhancing the QWC2 GetPrint requests Configuration database : DB schema and migrations Configuration generator : Configuration generator","title":"Service overview"},{"location":"configuration/ServiceConfiguration/#qwc-docker-layout","text":"The layout of the qwc-docker tree is as follows: Path Description \u251c\u2500 api-gateway/nginx.conf API gateway configuration. \u251c\u2500 volumes/ Contains folders which are mounted into the various containers. \u2502 \u251c\u2500 attachments Storage of files uploaded through the QWC2 editing functionality. \u2502 \u251c\u2500 config/<tenant>/ Service configuration files, generated by qwc-config-generator . \u2502 \u251c\u2500 config-in/<tenant>/ Input configuration files, processed by the qwc-config-generator . \u2502 \u2502 \u251c\u2500 config.json Master configuration for the QWC2 viewer. \u2502 \u2502 \u251c\u2500 index.html Viewer entry point. \u2502 \u2502 \u251c\u2500 themesConfig.json Themes configuration. \u2502 \u2502 \u2514\u2500 tenantConfig.json Master configuration file for qwc services. \u2502 \u251c\u2500 db/ Storage of configuration database (see Config DB ). \u2502 \u251c\u2500 info-templates/ Custom feature-info templates (see qwc-feature-info-service ). \u2502 \u251c\u2500 jasper-reports/ Jasper reports (see qwc-document-service ). \u2502 \u251c\u2500 legends/ Custom legend images (see qwc-legend-service ). \u2502 \u251c\u2500 qgs-resources/ QGIS projects and data referenced by the projects. \u2502 \u251c\u2500 qwc2/ QWC2 Viewer. \u2502 \u2514\u2500 solr/ Fulltext search index. \u251c\u2500 docker-compose.yml Container configuration file. \u251c\u2500 pg_service.conf Database service definitions. \u2514\u2500 pg_service-write.conf Database service definitions for write connections.","title":"qwc-docker layout"},{"location":"configuration/ServiceConfiguration/#service-configurations","text":"The master configuration file for the QWC services is located at qwc-docker/volumes/config-in/<tenant>/tenantConfig.json , where <tenant> is the tenant name, default by default. See Multi Tenancy for more details on tenants. The file is structured as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { <ConfigGenerator config> }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"<service name\", <Service config> }, ... ] } Refer to the qwc-config-generator schema for the available ConfigGenerator config settings. themesConfig is a relative path to the theme configuration file as documented in Theme configuration . The services block contains the configuration for the individual QWC services, as documented in the reference . Note: All config settings can also be set as environment variables in capitalized form in docker-compose.yml . Note: Some variables must be set as environment variables in docker-compose.yml : ENV Default value Description INPUT_CONFIG_PATH config-in Base path for service configuration files OUTPUT_CONFIG_PATH /tmp Base path for service configuration files JWT_SECRET_KEY ******** secret key for JWT token TENANT_URL_RE None Regex for tenant extraction from base URL. Example: ^https?://.+?/(.+?)/ TENANT_HEADER None Tenant Header name. Example: Tenant","title":"Service configurations"},{"location":"configuration/ServiceConfiguration/#enabling-additional-services","text":"Add service entry in qwc-services/docker-compose.yml , setting the service mountpoint: SERVICE_MOUNTPOINT=/<mountpoint> Example: qwc-print-service: image: sourcepole/qwc-print-service:vYYYY.MM.DD environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/print' volumes: - ./volumes/config:/srv/qwc_service/config:ro ports: - \"127.0.0.1:5020:9090\" Add corresponding entry in api-gateway/nginx.conf , example: location /api/v1/print { proxy_pass http://qwc-print-service:9090; } If necessary, uncomment/add the respective service url (see also the qwc-map-viewer schema reference ) in the mapViewer config block of volumes/config-in/default/tenantConfig.json , i.e. { \"name\": \"mapViewer\", \"generator_config\": { # ... }, \"config\": { \"print_service_url\": \"/api/v1/print/\", # ... } } Add the service configuration block below services in volumes/config-in/default/tenantConfig.json , according to the service config schema, i.e. { \"name\": \"print\", \"config\": { \"ogc_service_url\": \"http://qwc-ogc-service:9090/\", \"qgis_server_version\": \"3.16\" } }","title":"Enabling additional services"},{"location":"configuration/ServiceConfiguration/#configuration-database","text":"The Configuration database (CofigDB) contains the database schema qwc_config for configurations and permissions of QWC services. This database uses the PostgreSQL connection service qwc_configdb by default, which can be setup for the corresponding database in the PostgreSQL connection service file qwc-docker/pg_service.conf . To use an external configuration database, either change the connection definition for qwc_configdb in qwc-docker/pg_service.conf or change the config_db_url in qwc-docker/volumes/config-in/<tenant>/tenantConfig.json .","title":"Configuration database"},{"location":"configuration/ServiceConfiguration/#database-migrations","text":"Migrations to the ConfigDB are applied automatically by the qwc-base-db-migrate image which is included in the sample docker-compose-example.yml . To upgrade the ConfigDB to a newer version, it is sufficient to change the version of the image to the desired version, and migrations will be applied automatically next time the application is restarted. See the qwc-base-db README for more info.","title":"Database migrations"},{"location":"configuration/ServiceConfiguration/#keeping-qwc-services-up-to-date","text":"When using qwc-docker , updating the services is a simple as updating the image tags in qwc-docker/docker-compose.yml . Two versioning schemes are available: vYYYY-MM-DD : These refer to the latest available \"development\" version of the respective images (i.e. v2023.05.12 ). vYYYY.X-lts : These refer to the long term support version of the respective images (i.e. v2023.1-lts ). You can always check the available tags on dockerhub, for example at https://hub.docker.com/r/sourcepole/qwc-config-generator . In particular, to special tags exist, latest and latest-lts which always refer to the latest available \"development\" and long term support versions respectively. Note however that using these tags will result in docker automatically pulling new versions when the application is launched, which may be undesired. The qwc-docker Upgrade Notes documents major changes, and in particular all incompatible changes between releases which require changes to the application specific code and/or configuration.","title":"Keeping QWC services up to date"},{"location":"configuration/ThemesConfiguration/","text":"Themes configuration \u00b6 A theme corresponds to a QGIS project, published as WMS and served by QGIS Server. The basic steps for configuring a theme are: Create a QGIS project and deploy it to QGIS Server Writing the QWC2 theme configuration Generating the themes configuration Creating and publishing a QGIS project \u00b6 The first step is to prepare a QGIS project for publishing. Besides the common tasks of adding and styling layers, the following table gives an overview of settings which influence how the theme is displayed in QWC2: What Where Description Service Metadata Project Properties \u2192 QGIS Server \u2192 Service capabilities Shown in the theme info dialog, invokable from the Layer Tree panel titlebar. Title, keywords Project Properties \u2192 QGIS Server \u2192 Service capabilities Theme title, displayed in the Theme Switcher, and keywords, useful for filtering. Map extent Project Properties \u2192 QGIS Server \u2192 WMS \u2192 Advertised extent The extent used as initial map extent when loading the theme, unless overridden in themesConfig.json . Queryable layers Project Properties \u2192 Data sources Mark layers as identifyable by the client. FeatureInfo geometry Project Properties \u2192 QGIS Server \u2192 WMS Capabilities \u2192 Add geometry to feature response Return feature geometries with the GetFeatureInfo request. Allows the client to highlight the selected features. Layer Display Field Vector Layer Properties \u2192 Display The field used in the identify results. Layer Map Tip Vector Layer Properties \u2192 Display The contents of the Map Tip shown when hovering over layers in the client, if displaying Map Tips is enabled in the Layer Tree. Layer Metadata Layer Properties \u2192 QGIS Server Shown in the client Layer Info dialog, invokable from the Layer Tree. Scale range Layer Properties \u2192 Rendering \u2192 Scale dependent visibility The scale range within which a layer is visible, useful to improve rendering performance. Initial visibility Layers Panel Initial visibility of layers and groups. Rendering order Layer Order Panel or Layers Panel Rendering order of the layers. If layer re-ordering is enabled in config.json , the order from the Layer Order Panel is ignored. Print layouts Layout manager The print layouts offered in the Print plugin. Print layout labels Layout manager Print layout labels with an ID will be exposed in the Print plugin. Note: a label ID starting with __ will not be exposed. Attribute form Vector Layer Properties \u2192 Attributes Form The configured attribute form will be displayed when editing in QWC2. External layers Layer Properties \u2192 QGIS Server \u2192 Data URL Mark the layer as an external layer to avoid cascaded requests. See Configuring external layers . Then, store the project in the publishing directory of your QGIS Server instance. When using qwc-docker , store the project as *.qgs below qwc-docker/volumes/qgs-resources . Alternatively, when using qwc-docker , you can also store the project in a database in QGIS using Project \u2192 Save To \u2192 PostgreSQL (see Storing projects in database ). Ensuring valid datasources \u00b6 A common issue is that the project will reference datasources in locations which cannot be resolved when QGIS Server reads the project, in particular when running QGIS Server inside a docker container. To avoid such issues: Make sure that any file-based resources are located on the same level or below the level of the *.qgs project file. Remember to copy all resources along with the *.qgs project file to the server. Load any PostgreSQL datasource in QGIS using a service, and make sure the service definition exists both in the pg_service.conf on your host system as well as in the qwc_docker/pg_service.conf and qwc_docker/pg_service-write.conf which are mounted inside the docker containers. For instance, to use default qwc-docker database, use the qwc_geodb service and add the service definition to your host pg_service.conf as follows: [qwc_geodb] host=localhost port=5439 dbname=qwc_demo user=qwc_service password=qwc_service sslmode=disable Configuring the themes in themesConfig.json \u00b6 The next step is to configure the theme for QWC2. There are two approaches: Automatic theme configuration (only when using qwc-docker ): Just copy the project file to the designated location and the qwc-config-generator will automatically generate a theme configuration using default parameters. Manual theme configuration : Manually configure a theme with the full set of configuration options. Automatic theme configuration \u00b6 When using qwc-docker , save your QGIS projects below qwc-docker/volumes/qgs-resources/scan . Adjust the default settings ( defaultMapCrs , defaultBackgroundLayers , etc.) as desired in qwc-docker/volumes/config-in/<tentant>/themesConfig.json . Then generate the theme configuration . You can configure an automatically configured theme as default theme by setting defaultTheme in themesConfig.json to the path to the QGIS project file below qwc-docker/volumes/qgs-resources , without the .qgs extension. For example to set qwc-docker/volumes/qgs-resources/scan/project.qgs as default theme, you'd write ... \"defaultTheme\": \"scan/project\" ... To use a custom thumbnail for an automatically configured theme, place a an image called <project_basename>.png in qwc-docker/volumes/qwc2/assets/img/mapthumbs . For example. if the project is called project_name.qgs , the name thumbnail image would be named project_name.png . Note: The auto-scan directory can be is controlled by qgis_projects_scan_base_dir in qwc-docker/volumes/config-in/<tentant>/themesConfig.json . Manual theme configuration \u00b6 The theme configuration file is located as follows: Standalone viewer: qwc2-app/themesConfig.json qwc-docker : qwc-docker/volumes/config-in/<tentant>/themesConfig.json Note : when using qwc-docker , the themes configuration may also be embedded as themesConfig directly in qwc-docker/volumes/config-in/<tentant>/tenantConfig.json . The themesConfig.json file contains a list of themes, optionally organized in groups, as well as a list of background layers: { \"themes\": { \"items\": [ { <ThemeDefinition> }, ... ], \"groups\": [ { \"title\": <Group title>, \"items\": [{ <ThemeDefinition> }, ...], \"groups\": [ { <Group> }, ...] }, ... ], \"externalLayers\": [ { <ExternalLayerDefinition> }, ... ], \"themeInfoLinks\": [ { <ThemeInfoLinkDefinition> }, ... ], \"pluginData\": { \"<PluginName>\": [{ <PluginDataReource>}, ...], ... }, \"backgroundLayers\": [ { <BackgroundLayerDefinition> }, ... ], }, \"defaultMapCrs\": \"<Default map crs, defaults to EPSG:3857>\", \"defaultBackgroundLayers\": \"<Default background layers, see theme definition below>\", \"defaultWMSVersion\": \"<Default WMS version, i.e. 1.3.0>\", \"defaultScales\": [<Scale denominators, see theme definition below>], \"defaultPrintScales\" [<Scale denominators, see theme definition below>], \"defaultPrintResolutions\": [<DPIs, see theme definition below>], \"defaultSearchProviders\": [<Search providers, see theme definition below>], \"defaultPrintGrid\": [<Print grid, see theme definition below>], \"defaultTheme\": \"<Default theme id>\" } Refer to External layers , Theme info links , Plugin data and Background layers for the format of the respective definitions. Refer to the sample themesConfig.json for a complete example. The format of the theme definitions is as follows: Entry Description \"id\": \"<id>\", Theme identificator. Autogenerated if not specified. \"url\": \"<WMS URL>\", The address of desired WMS served by QGIS Server. \"mapCrs: \"<EPSG code>\", Optional, map projection, defaults to defaultMapCrs . \"title\": \"<Custom title>\", Optional, override WMS title. \"description\": \"<Description>\", Optional, an additional description to show below the theme title. \"thumbnail\": \"<Filename>\", Optional, image file in assets/img/mapthumbs (see Viewer assets ). If omitted, <project_basename>.png will be used if it exists below assets/img/mapthumbs , otherwise it is autogenerated via WMS GetMap. \"attribution\": \"<Attribution>\", Optional, attribution which will be shown in the bottom right corner of the map. \"attributionUrl\": \"<URL>\", Optional, link associated to the attribution \"scales\": [<Scale denominators>], List of denominators of allowed map scales. If omitted, defaults to defaultScales . \"printScales\": [<Scale denominators>], List of denominators of allowed print scales. If omitted, defaults to defaultPrintScales . \"printResolutions\": [<DPIs>], List of available print resolutions. If omitted, defaults to defaultPrintResolutions . \"printGrid\": [ List of grid scale-dependent grid intervals to use when printing. If omitted, defaults to defaultPrintGrid . \u2063 {\"s\": <Scale1>, \"x\": <Width1>, \"y\": <Height1>}, Keep this list sorted in descending order by scale denominator. \u2063 {\"s\": <Scale2>, \"x\": <Width2>, \"y\": <Height2>} In this example, {x: <Width2>, y: <Height2>} will be used for <Scale1> > Scale >= <Scale2> . ], \"printLabelForSearchResult\": \"<ID>\", Optional, an ID of a print layout label to which the current search result text (if any) will be written to when printing. \"printLabelForAttribution\": \"<ID>\", Optional, an ID of a print layout label to which the current attribution text (if any) will be written to when printing. \"printLabelConfig\": { Optional, configuration of the text input fields for print layout labels. \u2063 \"<LabelId>\": { \u2063 \u2063 \"defaultValue\": \"<value\">, Optional, default value. \u2063 \u2063 <textarea config>, Optional, additional textarea properties , i.e. maxLength , rows , placeholder , ... \u2063 \u2063 \"options\": [\"<value1>\",\"<value2>\",...] Optional, to display a ComboBox with the specified options instead of a free-input textfield. }, \"extent\": [<xmin>, <ymin>, <xmax>, <ymax>], Optional, override theme extent. In mapCrs . \"tiled\": <boolean>, Optional, use tiled WMS, defaults to false . \"tileSize\": [<tile_width>, <tile_height>] Optional, the WMS tile width and height. \"format\": \"<mimetype>\", Optional, the format to use for WMS GetMap. Defaults to image/png . \"externalLayers\": [{ Optional, external layers to use as replacements for internal layers. \u2063 \"name\": \"<external_layer_name>\", Name of the external layer, matching a ExternalLayerDefinition , see below . \u2063 \"internalLayer\": \"<QGis_layer_name>\" Name of an internal layer, as contained in the QGIS project, to replace with the external layer. }], \"themeInfoLinks\": { Optional, custom links to additional resources, shown as a menu in the theme selector in the theme switcher.\\ \u2063 \"title\": \"<Menu title>\", An arbitrary string shown as title of the menu. \u2063 \"titleMsgId\": \"<Menu title msgID>\", Alternative to title , a message ID, translated through the translation files. \u2063 \"entries\": [\"<link_name>\", ...] List of theme info link names, see below . }, \"backgroundLayers\": [{, Optional, list of available background layers, defaults to defaultBackgroundLayers . \u2063 \"name\": \"<Background layer name>\", Name of matching BackgroundLayerDefinition , see below . \u2063 \"printLayer\": \"<layer name>\"\\|[<list>], Optional, a QGIS layer name or layer resource string to use as matching background layer when printing. Alternatively, a list [{\"maxScale\": <scale>, \"name\": \"<layer name>\"}, ..., {\"maxScale\": null, \"name\": \"<layer name>\"}] can be provided, ordered in ascending order by maxScale . The last entry should have maxScale null , as the layer used for all remaining scales. If omitted, no background is printed, unless layer is of type wms and printExternalLayers is true in the Print plugin configuration. See Printing . \u2063 \"visibility\": <boolean> , Optional, initial visibility of the layer when theme is loaded. \u2063 \"overview\": <boolean> , Optional, set the layer as the overview map layer (i.e. this layer will be displayed in the overview map regardless of the background layer visible in the main map). }], \"searchProviders\": [\"<Provider>\"], Optional, list of search providers, see Search . Defaults to defaultSearchProviders . \"minSearchScaleDenom\": <number>, Optional, minimum scale to enforce when zooming to search results. Takes precedence over value in config.json . \"featureReport\": { Optional, available feature report templates. \u2063 \"<LayerId>\": \"<TemplateID>\" WMS sublayer ID and associated template ID to pass to the featureReportService . }, \"additionalMouseCrs\": [\"<EPSG code>\"], Optional, list of additional projections for displaying the mouse position. WGS84 and mapCrs are available by default. Additional projections definitions must be added to config.json . \"watermark\": { Optional, configuration of watermark to add to raster export images. \u2063 \"text\": \"<text>\", Arbitrary text. \u2063 \"texpadding\": <number>, Optional, padding between text and frame, in points. \u2063 \"fontsize\": <number>, Optional, font size. \u2063 \"fontfamily\": \"<Font family>\", Optional, font family. \u2063 \"fontcolor\": \"#RRGGBB\", Optional, font color. \u2063 \"backgroundcolor\": \"#RRGGBB\", Optional, frame background color. \u2063 \"framecolor\": \"#RRGGBB\", Optional, frame color. \u2063 \"framewidth\": <number>, Optional, frame width. }, \"collapseLayerGroupsBelowLevel\": <level>, Optional, layer tree level below which to initially collapse groups. By default the tree is completely expanded. \"skipEmptyFeatureAttributes\": <boolean>, Optional, whether to skip empty attributes in the identify results. Default is false . \"mapTips\": <boolean>|null, Optional, per-theme setting whether map-tips are unavailable ( null ), disabled by default ( false ) or enabled by default ( true ). \"extraLegendParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to GetLegendGraphic request. \"extraDxfParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to DXF export request. \"extraPrintParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to GetPrint request (requires QGIS Server >= 3.32.0). \"extraPrintLayers\": [\"<layername>\", ...], Optional, extra list of layers to mark as internal print layers, i.e. which are omitted from the QWC2 LayerTree. \"printLabelBlacklist\": [\"<LabelId>\", ...] Optional, list of composer label ids to not expose in the print dialog. \"editConfig\": \"<editConfig.json>\" Optional, object or path to a filename containing the editing configuration for the theme, see Editing . \"snapping\": {...}, Optional, snapping configuration, see Snapping . \"config\": { Optional, per-theme configuration entries which override the global entries in config.json , see Viewer Configuration . \u2063 \"allowRemovingThemeLayers\": <boolean> See config.json for which settings can be specified here. \u2063 ... } \"pluginData\": { Optional, data to pass to custom plugins. \u2063 \"<PluginName>\": [\"<plugin_data_resource_name>\"], A list of plugin resource names for the specified plugin. See below . \u2063 ... }, \"wmsBasicAuth\": \"{ Optional, allows to authenticate to QGIS Server during themes.json generation. NOTE: these credentials will solely be used by yarn run themesConfig and won't be stored in themes.json . \u2063 \"username\": <username> Optional: http basic authentication username. \u2063 \"password\": <password> Optional: http basic authentication password. }, A bare minimum theme entry might look as follows: { \"id\": \"theme_id\", \"title\": \"My theme\", \"url\": \"/ows/my_theme\", \"mapCrs\": \"EPSG:3857\", \"backgroundLayers\": [{\"name\": \"background_layer_name\"}], \"searchProviders\" [\"coordinates\"] } Note: The theme identifier id can be freely defined and will appear in the viewer URL as the t query parameter. When using qwc-docker , the url can be specified as /ows/<relative_path_to_qgs> where relative_path_to_qgs is the path to the QGIS project file below qwc-docker/volumes/qgs-resources , without the .qgs extension. In the above sample, the project file would be located at qwc-docker/volumes/qgs-resources/my_theme.qgs . External layers \u00b6 External layers can be used to selectively replace layers in a QGIS project with a layer from an external source, for instance in the case of a WMS layer embedded in a QGIS project, to avoid cascading WMS requests. They are handled transparently by QWC2 (they are positioned in the layer tree identically to the internal layer they replace), but the GetMap and GetFeatureInfo requests are sent directly to the specified WMS Service. Configuring external layers via Data Url The simplest way to define an external layer is to set the \"Data Url\" for a layer in QGIS (Layer Properties \u2192 QGIS Server \u2192 Data Url) to a string of these forms wms:<service_url>?<options>#<layername> wmts:<capabilities_url>?<options>#<layername> mvt:<tile_url>|<style_url> For instance: wms:http://wms.geo.admin.ch?tiled=false&infoFormat=application/geojson#ch.are.bauzonen wmts:https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml#ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill mvt:https://kataster.bev.gv.at/tiles/kataster/{z}/{x}/{y}.pbf|https://kataster.bev.gv.at/styles/kataster/style_vermv.json Note: Support for WMTS/MVT in Data Url is currently only implemented when using qwc-docker . Note: You can pass parameters which control the behaviour of the WMS client in QGIS Server by prefexing the parameters with extwms. when the layer is requested by QGIS Server, i.e. when printing. Example to override the step width/heigth of the QGIS WMS Client: wms:http://wms.geo.admin.ch?extwms.stepWidth=4096&extwms.stepHeight=4096#ch.swisstopo.pixelkarte-farbe-pk1000.noscale Manually configuring external layers Rather than setting the \"Data Url\", you can provide a manual ExternalLayerDefinition as follows: Entry Description { \u2063 \"name\": \"<external_layer_name>\", The name of the external layer, as referenced in the theme definitions. \u2063 \"type\": \"<layer_type>\", Layer type, \"wms\" or \"wmts\" \u2063 \"url\": \"<wms_baseurl>\", The WMS URL or WMTS resource URL for the external layer. } For external WMS layers, the following additional parameters apply: Entry Description \"params\": { Parameters for the GetMap request. \u2063 \"LAYERS\": \"<wms_layername>,...\" , Comma-separated list of WMS layer names. \u2063 \"OPACITIES\": \"<0-255>,...\" Optional, if WMS server supports opacities. }, \"featureInfoUrl\": \"<wms_featureinfo_baseurl>\", Optional, base URL for WMS GetFeatureInfo, if different from url . \"legendUrl\": \"<wms_legendgraphic_baseurl>\" , Optional, base URL for WMS GetLegendGraphic, if different from url . \"queryLayers\": [\"<wms_featureinfo_layername>\", ...], Optional, list of GetFeatureInfo query layers, if different from params.LAYERS . \"infoFormats\": [\"<featureinfo_format>\", ...] List of GetFeatureInfo query formats which the WMS service supports. For external WMTS layers, the following additional parameters apply (you can use the qwc2/scripts/wmts_config_generator.py script to obtain these values): Entry Description \"tileMatrixSet\": \"<tile_matrix_set_name>\", The name of the tile matrix set. \"originX\": <origin_x>, The X origin of the tile matrix. \"originY\": <origin_y>, The Y origin of the tile matrix. \"projection\": \"EPSG:<code>\", The layer projection. \"resolutions\": [<resolution>, ...], The list of WMTS resolutions. \"tileSize\": [<tile_width>, <tile_height>] The tile width and height. Theme info links \u00b6 You can specify links to display in an info-menu next to the respective theme title in the theme switcher entries. The format of a ThemeInfoLinkDefinition is as follows: Entry Description \"name\": \"<link_name>\", The name of the link, as referenced in the theme definitions. \"title\": \"<link_title>\", The title for the link, as displayed in the info menu of the theme entry in the theme switcher. \"url\": \"<link>\", A link URL. \"target\": \"<link_target>\" The link target, i.e. _blank . Note : When using qwc-services , theme info links must be explicitly permitted by creating appropriate Theme info link resources and permissions in the qwc-admin-gui . Plugin data \u00b6 Plugin data is useful to provide a per-theme configuration for custom plugins. The format for a PluginDataReource is as follows: Entry Description \"name\": \"<resource_name>\", The name of the resource. \"...\": ..., Arbitrary additional fields. Note : When using qwc-services , theme plugin data entries must be explicitly permitted by creating appropriate Plugin data resources (as child of a respective Plugin resource) and permissions in the qwc-admin-gui . Background layers \u00b6 Background layers are handled completely client-side and do not appear in the layer tree. The format of the background layer definitions is as follows: Entry Description \"name\": \"<Name>\", The name of the background layer, used in the theme definitions. \"title\": \"<Title>\", The title of the background layer, as displayed in the background switcher. \"titleMsgId\": \"<Title msgID>\", Alternative to title , a message ID, translated through the translation files. \"thumbnail\": \"<Filename>\", Optional, image file in assets/img/mapthumbs (see Viewer assets ). Defaults to img/mapthumbs/default.jpg . \"type\": \"<Type>\", The background layer type, i.e. wms or wmts . \"attribution\": \"<Attribution>\", Optional, attribution which will be shown in the bottom right corner of the map. \"attributionUrl\": \"<URL>\", Optional, link associated to the attribution \"group\": \"<GroupId>\", Optional, a group ID string. Background layers with the same group ID will be grouped together in the background switcher. \"minScale\": <min_scale>, Optional, minimum scale denominator from which to render the layer. \"maxScale\": <max_scale>, Optional, maximum scale denominator from which to render the layer. \"layerConfig\": {...}, Optional, extra OpenLayers layer configuration, according to the API of the specific layer type. \"sourceConfig\": {...}, Optional, extra OpenLayers source configuration, according to the API of the specific source type. <Layer params> Parameters according to the specified layer type. Some minimal examples of supported background layers: WMS : { \"name\": \"swissboundaries\", \"type\":\"wms\", \"url\":\"https://wms.geo.admin.ch\", \"params\": { \"LAYERS\": \"ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill\", \"VERSION\": \"1.3.0\", ... } } WMTS : { \"name\":\"bluemarble\", \"type\":\"wmts\", \"url\":\"http://gibs.earthdata.nasa.gov/wmts/epsg3857/best/BlueMarble_ShadedRelief/default/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.jpeg\", \"bbox\":{ \"bounds\":[-180.0,-85.051129,180.0,85.051129], \"crs\":\"EPSG:4326\" }, \"originX\":-20037508.34278925, \"originY\":20037508.34278925, \"projection:\":\"EPSG:3857\", \"resolutions\":[156543.03390625,78271.516953125,39135.7584765625,19567.87923828125,9783.939619140625,4891.9698095703125,2445.9849047851562,1222.9924523925781], \"tileMatrixPrefix\":\"\", \"tileMatrixSet\":\"GoogleMapsCompatible_Level8\", \"tileSize\":[256,256] } Note : You can use the helper python script located at qwc2/scripts/wmts_config_generator.py to easily generate WMTS background layer configurations. OpenStreetMap : { \"name\":\"mapnik\", \"type\":\"osm\" } Bing : { \"name\": \"bing\", \"type\": \"bing\", \"apiKey\": \"<get from https://www.bingmapsportal.com/>\", \"imagerySet\": \"<Aerial|AerialWithLabelsOnDemand|RoadOnDemand|CanvasDark|OrdnanceSurvey>\" } XYZ : { \"name\": \"OpenCycleMap\", \"type\": \"xyz\", \"url\":\"https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png\" } VectorTiles : (note: if the tile projection is not EPSG:3857 , you need to specifiy projection and tileGridConfig ) { \"name\": \"mvt_example\", \"type\": \"mvt\", \"url\": \"http://foobar.baz/tileset/{z}/{x}/{y}.pbf\", \"style\": \"http://foobar.baz/style.json\", \"projection\": \"EPSG:XXXX\", \"tileGridConfig\": { \"origin\": [<x>, <y>], \"resolutions\": [<resolutions>] } } Alternatively, WMS and WMTS background layers can also be defined specifiying a resource identifier, which will then be resolved at runtime. For example: { \"name\":\"ch.swisstopo.pixelkarte-grau\", \"title\":\"National map (gray)\", \"resource\": \"wmts:https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml#ch.swisstopo.pixelkarte-grau\", \"thumbnail\":\"img/mapthumbs/default.jpg\" } A background layer definition can also be a group of layers, in the format { \"name\": \"<Name>\", \"title\": \"<Title>\", \"type\": \"group\", \"items\": [ { <BackgroundLayerDefinition> }, { <BackgroundLayerDefinition> }, ... ] } Instead of specifiying a full background layer definition in a group, you can also reference an existing one with \"ref\": \"<bg_layer_name>\" , and selectively override certain properties, such as minScale and maxScale : { ... \"items\": [ { \"ref\": \"<bg_layer_name>\", \"minScale\": <min_scale>, \"maxScale\": <max_scale> }, ... ] } Generating the themes configuration \u00b6 The file ultimately read by the QWC2 viewer is the themes.json configuration, which includes the contents of themesConfig.json completed with additional data obtained from the QGIS Project. When using qwc-docker , you can generate the themes from the qwc-admin-gui administration backend, running on http://localhost:8088/qwc_admin by default. Log in as admin user, then press the green Generate service configuration button. This will invoce the qwc-config-generator , which will generate mapViewerConfig.json located below qwc-docker/volumes/config/<tentant> . You can then inspect the generated themes.json at http://localhost:8088/themes.json . When using QWC2 as a standalone viewer, the themes.json can be generated by invoking yarn run themesconfig Note: this command is automatically invoked when starting the development server via yarn start . If working in an environment without node, using the equivalent command python3 qwc2/scripts/themesConfig.py If you want to manage multiple themesConfig.json files, you can specify which while should be processed by the theme generation script via the QWC2_THEMES_CONFIG environment variable. Storing projects in database \u00b6 When you are using qwc-docker , you can configure QWC to read the QGIS projects directly from the database. To do this, proceed as follows: Set up a PostgreSQL database connection in QGIS, checking the \"Allow saving/loading QGIS projects in the database\" option. Save the project to the configured database in QGIS using Project \u2192 Save To \u2192 PostgreSQL. Add a qgisprojects service definition for the used database to qwc-docker/pg_service.conf . Write a theme configuration entry in themesConfig.json using with \"url\": \"/ows/pg/<schema>/<projectname>\" , where schema and projectname as as specified when saving the project in QGIS. Split categorized layers \u00b6 When using qwc-docker , the qwc-config-generator has the ability to split a layer that has been classified with QGIS into multiple layers and move them into a new group (the group name will be the original layer name). To activate this functionality, follow these steps: Place the projects whose layers you want to split below qwc-docker/volumes/config-in/<tenant>/qgis_projects . In the topolevel config in qwc-docker/volumes/config-in/<tenant>/tenantConfig.json , ensure qgis_projects_gen_base_dir is set and valid, and set \"split_categorized_layers\": true . For all layers that you want to split, create the variable convert_categorized_layer and set it to true . Generate the themes configuration . The qwc-config-generator will process the projects and write the modified projects to qgis_projects_gen_base_dir . Note: Make sure you are using qwc-config-generator:v<version> and not qwc-config-generator:v<version>-noqgis .","title":"Themes"},{"location":"configuration/ThemesConfiguration/#themes-configuration","text":"A theme corresponds to a QGIS project, published as WMS and served by QGIS Server. The basic steps for configuring a theme are: Create a QGIS project and deploy it to QGIS Server Writing the QWC2 theme configuration Generating the themes configuration","title":"Themes configuration"},{"location":"configuration/ThemesConfiguration/#creating-and-publishing-a-qgis-project","text":"The first step is to prepare a QGIS project for publishing. Besides the common tasks of adding and styling layers, the following table gives an overview of settings which influence how the theme is displayed in QWC2: What Where Description Service Metadata Project Properties \u2192 QGIS Server \u2192 Service capabilities Shown in the theme info dialog, invokable from the Layer Tree panel titlebar. Title, keywords Project Properties \u2192 QGIS Server \u2192 Service capabilities Theme title, displayed in the Theme Switcher, and keywords, useful for filtering. Map extent Project Properties \u2192 QGIS Server \u2192 WMS \u2192 Advertised extent The extent used as initial map extent when loading the theme, unless overridden in themesConfig.json . Queryable layers Project Properties \u2192 Data sources Mark layers as identifyable by the client. FeatureInfo geometry Project Properties \u2192 QGIS Server \u2192 WMS Capabilities \u2192 Add geometry to feature response Return feature geometries with the GetFeatureInfo request. Allows the client to highlight the selected features. Layer Display Field Vector Layer Properties \u2192 Display The field used in the identify results. Layer Map Tip Vector Layer Properties \u2192 Display The contents of the Map Tip shown when hovering over layers in the client, if displaying Map Tips is enabled in the Layer Tree. Layer Metadata Layer Properties \u2192 QGIS Server Shown in the client Layer Info dialog, invokable from the Layer Tree. Scale range Layer Properties \u2192 Rendering \u2192 Scale dependent visibility The scale range within which a layer is visible, useful to improve rendering performance. Initial visibility Layers Panel Initial visibility of layers and groups. Rendering order Layer Order Panel or Layers Panel Rendering order of the layers. If layer re-ordering is enabled in config.json , the order from the Layer Order Panel is ignored. Print layouts Layout manager The print layouts offered in the Print plugin. Print layout labels Layout manager Print layout labels with an ID will be exposed in the Print plugin. Note: a label ID starting with __ will not be exposed. Attribute form Vector Layer Properties \u2192 Attributes Form The configured attribute form will be displayed when editing in QWC2. External layers Layer Properties \u2192 QGIS Server \u2192 Data URL Mark the layer as an external layer to avoid cascaded requests. See Configuring external layers . Then, store the project in the publishing directory of your QGIS Server instance. When using qwc-docker , store the project as *.qgs below qwc-docker/volumes/qgs-resources . Alternatively, when using qwc-docker , you can also store the project in a database in QGIS using Project \u2192 Save To \u2192 PostgreSQL (see Storing projects in database ).","title":"Creating and publishing a QGIS project"},{"location":"configuration/ThemesConfiguration/#ensuring-valid-datasources","text":"A common issue is that the project will reference datasources in locations which cannot be resolved when QGIS Server reads the project, in particular when running QGIS Server inside a docker container. To avoid such issues: Make sure that any file-based resources are located on the same level or below the level of the *.qgs project file. Remember to copy all resources along with the *.qgs project file to the server. Load any PostgreSQL datasource in QGIS using a service, and make sure the service definition exists both in the pg_service.conf on your host system as well as in the qwc_docker/pg_service.conf and qwc_docker/pg_service-write.conf which are mounted inside the docker containers. For instance, to use default qwc-docker database, use the qwc_geodb service and add the service definition to your host pg_service.conf as follows: [qwc_geodb] host=localhost port=5439 dbname=qwc_demo user=qwc_service password=qwc_service sslmode=disable","title":"Ensuring valid datasources"},{"location":"configuration/ThemesConfiguration/#configuring-the-themes-in-themesconfigjson","text":"The next step is to configure the theme for QWC2. There are two approaches: Automatic theme configuration (only when using qwc-docker ): Just copy the project file to the designated location and the qwc-config-generator will automatically generate a theme configuration using default parameters. Manual theme configuration : Manually configure a theme with the full set of configuration options.","title":"Configuring the themes in themesConfig.json "},{"location":"configuration/ThemesConfiguration/#automatic-theme-configuration","text":"When using qwc-docker , save your QGIS projects below qwc-docker/volumes/qgs-resources/scan . Adjust the default settings ( defaultMapCrs , defaultBackgroundLayers , etc.) as desired in qwc-docker/volumes/config-in/<tentant>/themesConfig.json . Then generate the theme configuration . You can configure an automatically configured theme as default theme by setting defaultTheme in themesConfig.json to the path to the QGIS project file below qwc-docker/volumes/qgs-resources , without the .qgs extension. For example to set qwc-docker/volumes/qgs-resources/scan/project.qgs as default theme, you'd write ... \"defaultTheme\": \"scan/project\" ... To use a custom thumbnail for an automatically configured theme, place a an image called <project_basename>.png in qwc-docker/volumes/qwc2/assets/img/mapthumbs . For example. if the project is called project_name.qgs , the name thumbnail image would be named project_name.png . Note: The auto-scan directory can be is controlled by qgis_projects_scan_base_dir in qwc-docker/volumes/config-in/<tentant>/themesConfig.json .","title":"Automatic theme configuration "},{"location":"configuration/ThemesConfiguration/#manual-theme-configuration","text":"The theme configuration file is located as follows: Standalone viewer: qwc2-app/themesConfig.json qwc-docker : qwc-docker/volumes/config-in/<tentant>/themesConfig.json Note : when using qwc-docker , the themes configuration may also be embedded as themesConfig directly in qwc-docker/volumes/config-in/<tentant>/tenantConfig.json . The themesConfig.json file contains a list of themes, optionally organized in groups, as well as a list of background layers: { \"themes\": { \"items\": [ { <ThemeDefinition> }, ... ], \"groups\": [ { \"title\": <Group title>, \"items\": [{ <ThemeDefinition> }, ...], \"groups\": [ { <Group> }, ...] }, ... ], \"externalLayers\": [ { <ExternalLayerDefinition> }, ... ], \"themeInfoLinks\": [ { <ThemeInfoLinkDefinition> }, ... ], \"pluginData\": { \"<PluginName>\": [{ <PluginDataReource>}, ...], ... }, \"backgroundLayers\": [ { <BackgroundLayerDefinition> }, ... ], }, \"defaultMapCrs\": \"<Default map crs, defaults to EPSG:3857>\", \"defaultBackgroundLayers\": \"<Default background layers, see theme definition below>\", \"defaultWMSVersion\": \"<Default WMS version, i.e. 1.3.0>\", \"defaultScales\": [<Scale denominators, see theme definition below>], \"defaultPrintScales\" [<Scale denominators, see theme definition below>], \"defaultPrintResolutions\": [<DPIs, see theme definition below>], \"defaultSearchProviders\": [<Search providers, see theme definition below>], \"defaultPrintGrid\": [<Print grid, see theme definition below>], \"defaultTheme\": \"<Default theme id>\" } Refer to External layers , Theme info links , Plugin data and Background layers for the format of the respective definitions. Refer to the sample themesConfig.json for a complete example. The format of the theme definitions is as follows: Entry Description \"id\": \"<id>\", Theme identificator. Autogenerated if not specified. \"url\": \"<WMS URL>\", The address of desired WMS served by QGIS Server. \"mapCrs: \"<EPSG code>\", Optional, map projection, defaults to defaultMapCrs . \"title\": \"<Custom title>\", Optional, override WMS title. \"description\": \"<Description>\", Optional, an additional description to show below the theme title. \"thumbnail\": \"<Filename>\", Optional, image file in assets/img/mapthumbs (see Viewer assets ). If omitted, <project_basename>.png will be used if it exists below assets/img/mapthumbs , otherwise it is autogenerated via WMS GetMap. \"attribution\": \"<Attribution>\", Optional, attribution which will be shown in the bottom right corner of the map. \"attributionUrl\": \"<URL>\", Optional, link associated to the attribution \"scales\": [<Scale denominators>], List of denominators of allowed map scales. If omitted, defaults to defaultScales . \"printScales\": [<Scale denominators>], List of denominators of allowed print scales. If omitted, defaults to defaultPrintScales . \"printResolutions\": [<DPIs>], List of available print resolutions. If omitted, defaults to defaultPrintResolutions . \"printGrid\": [ List of grid scale-dependent grid intervals to use when printing. If omitted, defaults to defaultPrintGrid . \u2063 {\"s\": <Scale1>, \"x\": <Width1>, \"y\": <Height1>}, Keep this list sorted in descending order by scale denominator. \u2063 {\"s\": <Scale2>, \"x\": <Width2>, \"y\": <Height2>} In this example, {x: <Width2>, y: <Height2>} will be used for <Scale1> > Scale >= <Scale2> . ], \"printLabelForSearchResult\": \"<ID>\", Optional, an ID of a print layout label to which the current search result text (if any) will be written to when printing. \"printLabelForAttribution\": \"<ID>\", Optional, an ID of a print layout label to which the current attribution text (if any) will be written to when printing. \"printLabelConfig\": { Optional, configuration of the text input fields for print layout labels. \u2063 \"<LabelId>\": { \u2063 \u2063 \"defaultValue\": \"<value\">, Optional, default value. \u2063 \u2063 <textarea config>, Optional, additional textarea properties , i.e. maxLength , rows , placeholder , ... \u2063 \u2063 \"options\": [\"<value1>\",\"<value2>\",...] Optional, to display a ComboBox with the specified options instead of a free-input textfield. }, \"extent\": [<xmin>, <ymin>, <xmax>, <ymax>], Optional, override theme extent. In mapCrs . \"tiled\": <boolean>, Optional, use tiled WMS, defaults to false . \"tileSize\": [<tile_width>, <tile_height>] Optional, the WMS tile width and height. \"format\": \"<mimetype>\", Optional, the format to use for WMS GetMap. Defaults to image/png . \"externalLayers\": [{ Optional, external layers to use as replacements for internal layers. \u2063 \"name\": \"<external_layer_name>\", Name of the external layer, matching a ExternalLayerDefinition , see below . \u2063 \"internalLayer\": \"<QGis_layer_name>\" Name of an internal layer, as contained in the QGIS project, to replace with the external layer. }], \"themeInfoLinks\": { Optional, custom links to additional resources, shown as a menu in the theme selector in the theme switcher.\\ \u2063 \"title\": \"<Menu title>\", An arbitrary string shown as title of the menu. \u2063 \"titleMsgId\": \"<Menu title msgID>\", Alternative to title , a message ID, translated through the translation files. \u2063 \"entries\": [\"<link_name>\", ...] List of theme info link names, see below . }, \"backgroundLayers\": [{, Optional, list of available background layers, defaults to defaultBackgroundLayers . \u2063 \"name\": \"<Background layer name>\", Name of matching BackgroundLayerDefinition , see below . \u2063 \"printLayer\": \"<layer name>\"\\|[<list>], Optional, a QGIS layer name or layer resource string to use as matching background layer when printing. Alternatively, a list [{\"maxScale\": <scale>, \"name\": \"<layer name>\"}, ..., {\"maxScale\": null, \"name\": \"<layer name>\"}] can be provided, ordered in ascending order by maxScale . The last entry should have maxScale null , as the layer used for all remaining scales. If omitted, no background is printed, unless layer is of type wms and printExternalLayers is true in the Print plugin configuration. See Printing . \u2063 \"visibility\": <boolean> , Optional, initial visibility of the layer when theme is loaded. \u2063 \"overview\": <boolean> , Optional, set the layer as the overview map layer (i.e. this layer will be displayed in the overview map regardless of the background layer visible in the main map). }], \"searchProviders\": [\"<Provider>\"], Optional, list of search providers, see Search . Defaults to defaultSearchProviders . \"minSearchScaleDenom\": <number>, Optional, minimum scale to enforce when zooming to search results. Takes precedence over value in config.json . \"featureReport\": { Optional, available feature report templates. \u2063 \"<LayerId>\": \"<TemplateID>\" WMS sublayer ID and associated template ID to pass to the featureReportService . }, \"additionalMouseCrs\": [\"<EPSG code>\"], Optional, list of additional projections for displaying the mouse position. WGS84 and mapCrs are available by default. Additional projections definitions must be added to config.json . \"watermark\": { Optional, configuration of watermark to add to raster export images. \u2063 \"text\": \"<text>\", Arbitrary text. \u2063 \"texpadding\": <number>, Optional, padding between text and frame, in points. \u2063 \"fontsize\": <number>, Optional, font size. \u2063 \"fontfamily\": \"<Font family>\", Optional, font family. \u2063 \"fontcolor\": \"#RRGGBB\", Optional, font color. \u2063 \"backgroundcolor\": \"#RRGGBB\", Optional, frame background color. \u2063 \"framecolor\": \"#RRGGBB\", Optional, frame color. \u2063 \"framewidth\": <number>, Optional, frame width. }, \"collapseLayerGroupsBelowLevel\": <level>, Optional, layer tree level below which to initially collapse groups. By default the tree is completely expanded. \"skipEmptyFeatureAttributes\": <boolean>, Optional, whether to skip empty attributes in the identify results. Default is false . \"mapTips\": <boolean>|null, Optional, per-theme setting whether map-tips are unavailable ( null ), disabled by default ( false ) or enabled by default ( true ). \"extraLegendParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to GetLegendGraphic request. \"extraDxfParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to DXF export request. \"extraPrintParameters\": \"<&KEY=VALUE>\", Optional, additional query parameters to append to GetPrint request (requires QGIS Server >= 3.32.0). \"extraPrintLayers\": [\"<layername>\", ...], Optional, extra list of layers to mark as internal print layers, i.e. which are omitted from the QWC2 LayerTree. \"printLabelBlacklist\": [\"<LabelId>\", ...] Optional, list of composer label ids to not expose in the print dialog. \"editConfig\": \"<editConfig.json>\" Optional, object or path to a filename containing the editing configuration for the theme, see Editing . \"snapping\": {...}, Optional, snapping configuration, see Snapping . \"config\": { Optional, per-theme configuration entries which override the global entries in config.json , see Viewer Configuration . \u2063 \"allowRemovingThemeLayers\": <boolean> See config.json for which settings can be specified here. \u2063 ... } \"pluginData\": { Optional, data to pass to custom plugins. \u2063 \"<PluginName>\": [\"<plugin_data_resource_name>\"], A list of plugin resource names for the specified plugin. See below . \u2063 ... }, \"wmsBasicAuth\": \"{ Optional, allows to authenticate to QGIS Server during themes.json generation. NOTE: these credentials will solely be used by yarn run themesConfig and won't be stored in themes.json . \u2063 \"username\": <username> Optional: http basic authentication username. \u2063 \"password\": <password> Optional: http basic authentication password. }, A bare minimum theme entry might look as follows: { \"id\": \"theme_id\", \"title\": \"My theme\", \"url\": \"/ows/my_theme\", \"mapCrs\": \"EPSG:3857\", \"backgroundLayers\": [{\"name\": \"background_layer_name\"}], \"searchProviders\" [\"coordinates\"] } Note: The theme identifier id can be freely defined and will appear in the viewer URL as the t query parameter. When using qwc-docker , the url can be specified as /ows/<relative_path_to_qgs> where relative_path_to_qgs is the path to the QGIS project file below qwc-docker/volumes/qgs-resources , without the .qgs extension. In the above sample, the project file would be located at qwc-docker/volumes/qgs-resources/my_theme.qgs .","title":"Manual theme configuration "},{"location":"configuration/ThemesConfiguration/#external-layers","text":"External layers can be used to selectively replace layers in a QGIS project with a layer from an external source, for instance in the case of a WMS layer embedded in a QGIS project, to avoid cascading WMS requests. They are handled transparently by QWC2 (they are positioned in the layer tree identically to the internal layer they replace), but the GetMap and GetFeatureInfo requests are sent directly to the specified WMS Service. Configuring external layers via Data Url The simplest way to define an external layer is to set the \"Data Url\" for a layer in QGIS (Layer Properties \u2192 QGIS Server \u2192 Data Url) to a string of these forms wms:<service_url>?<options>#<layername> wmts:<capabilities_url>?<options>#<layername> mvt:<tile_url>|<style_url> For instance: wms:http://wms.geo.admin.ch?tiled=false&infoFormat=application/geojson#ch.are.bauzonen wmts:https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml#ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill mvt:https://kataster.bev.gv.at/tiles/kataster/{z}/{x}/{y}.pbf|https://kataster.bev.gv.at/styles/kataster/style_vermv.json Note: Support for WMTS/MVT in Data Url is currently only implemented when using qwc-docker . Note: You can pass parameters which control the behaviour of the WMS client in QGIS Server by prefexing the parameters with extwms. when the layer is requested by QGIS Server, i.e. when printing. Example to override the step width/heigth of the QGIS WMS Client: wms:http://wms.geo.admin.ch?extwms.stepWidth=4096&extwms.stepHeight=4096#ch.swisstopo.pixelkarte-farbe-pk1000.noscale Manually configuring external layers Rather than setting the \"Data Url\", you can provide a manual ExternalLayerDefinition as follows: Entry Description { \u2063 \"name\": \"<external_layer_name>\", The name of the external layer, as referenced in the theme definitions. \u2063 \"type\": \"<layer_type>\", Layer type, \"wms\" or \"wmts\" \u2063 \"url\": \"<wms_baseurl>\", The WMS URL or WMTS resource URL for the external layer. } For external WMS layers, the following additional parameters apply: Entry Description \"params\": { Parameters for the GetMap request. \u2063 \"LAYERS\": \"<wms_layername>,...\" , Comma-separated list of WMS layer names. \u2063 \"OPACITIES\": \"<0-255>,...\" Optional, if WMS server supports opacities. }, \"featureInfoUrl\": \"<wms_featureinfo_baseurl>\", Optional, base URL for WMS GetFeatureInfo, if different from url . \"legendUrl\": \"<wms_legendgraphic_baseurl>\" , Optional, base URL for WMS GetLegendGraphic, if different from url . \"queryLayers\": [\"<wms_featureinfo_layername>\", ...], Optional, list of GetFeatureInfo query layers, if different from params.LAYERS . \"infoFormats\": [\"<featureinfo_format>\", ...] List of GetFeatureInfo query formats which the WMS service supports. For external WMTS layers, the following additional parameters apply (you can use the qwc2/scripts/wmts_config_generator.py script to obtain these values): Entry Description \"tileMatrixSet\": \"<tile_matrix_set_name>\", The name of the tile matrix set. \"originX\": <origin_x>, The X origin of the tile matrix. \"originY\": <origin_y>, The Y origin of the tile matrix. \"projection\": \"EPSG:<code>\", The layer projection. \"resolutions\": [<resolution>, ...], The list of WMTS resolutions. \"tileSize\": [<tile_width>, <tile_height>] The tile width and height.","title":"External layers "},{"location":"configuration/ThemesConfiguration/#theme-info-links","text":"You can specify links to display in an info-menu next to the respective theme title in the theme switcher entries. The format of a ThemeInfoLinkDefinition is as follows: Entry Description \"name\": \"<link_name>\", The name of the link, as referenced in the theme definitions. \"title\": \"<link_title>\", The title for the link, as displayed in the info menu of the theme entry in the theme switcher. \"url\": \"<link>\", A link URL. \"target\": \"<link_target>\" The link target, i.e. _blank . Note : When using qwc-services , theme info links must be explicitly permitted by creating appropriate Theme info link resources and permissions in the qwc-admin-gui .","title":"Theme info links "},{"location":"configuration/ThemesConfiguration/#plugin-data","text":"Plugin data is useful to provide a per-theme configuration for custom plugins. The format for a PluginDataReource is as follows: Entry Description \"name\": \"<resource_name>\", The name of the resource. \"...\": ..., Arbitrary additional fields. Note : When using qwc-services , theme plugin data entries must be explicitly permitted by creating appropriate Plugin data resources (as child of a respective Plugin resource) and permissions in the qwc-admin-gui .","title":"Plugin data "},{"location":"configuration/ThemesConfiguration/#background-layers","text":"Background layers are handled completely client-side and do not appear in the layer tree. The format of the background layer definitions is as follows: Entry Description \"name\": \"<Name>\", The name of the background layer, used in the theme definitions. \"title\": \"<Title>\", The title of the background layer, as displayed in the background switcher. \"titleMsgId\": \"<Title msgID>\", Alternative to title , a message ID, translated through the translation files. \"thumbnail\": \"<Filename>\", Optional, image file in assets/img/mapthumbs (see Viewer assets ). Defaults to img/mapthumbs/default.jpg . \"type\": \"<Type>\", The background layer type, i.e. wms or wmts . \"attribution\": \"<Attribution>\", Optional, attribution which will be shown in the bottom right corner of the map. \"attributionUrl\": \"<URL>\", Optional, link associated to the attribution \"group\": \"<GroupId>\", Optional, a group ID string. Background layers with the same group ID will be grouped together in the background switcher. \"minScale\": <min_scale>, Optional, minimum scale denominator from which to render the layer. \"maxScale\": <max_scale>, Optional, maximum scale denominator from which to render the layer. \"layerConfig\": {...}, Optional, extra OpenLayers layer configuration, according to the API of the specific layer type. \"sourceConfig\": {...}, Optional, extra OpenLayers source configuration, according to the API of the specific source type. <Layer params> Parameters according to the specified layer type. Some minimal examples of supported background layers: WMS : { \"name\": \"swissboundaries\", \"type\":\"wms\", \"url\":\"https://wms.geo.admin.ch\", \"params\": { \"LAYERS\": \"ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill\", \"VERSION\": \"1.3.0\", ... } } WMTS : { \"name\":\"bluemarble\", \"type\":\"wmts\", \"url\":\"http://gibs.earthdata.nasa.gov/wmts/epsg3857/best/BlueMarble_ShadedRelief/default/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.jpeg\", \"bbox\":{ \"bounds\":[-180.0,-85.051129,180.0,85.051129], \"crs\":\"EPSG:4326\" }, \"originX\":-20037508.34278925, \"originY\":20037508.34278925, \"projection:\":\"EPSG:3857\", \"resolutions\":[156543.03390625,78271.516953125,39135.7584765625,19567.87923828125,9783.939619140625,4891.9698095703125,2445.9849047851562,1222.9924523925781], \"tileMatrixPrefix\":\"\", \"tileMatrixSet\":\"GoogleMapsCompatible_Level8\", \"tileSize\":[256,256] } Note : You can use the helper python script located at qwc2/scripts/wmts_config_generator.py to easily generate WMTS background layer configurations. OpenStreetMap : { \"name\":\"mapnik\", \"type\":\"osm\" } Bing : { \"name\": \"bing\", \"type\": \"bing\", \"apiKey\": \"<get from https://www.bingmapsportal.com/>\", \"imagerySet\": \"<Aerial|AerialWithLabelsOnDemand|RoadOnDemand|CanvasDark|OrdnanceSurvey>\" } XYZ : { \"name\": \"OpenCycleMap\", \"type\": \"xyz\", \"url\":\"https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png\" } VectorTiles : (note: if the tile projection is not EPSG:3857 , you need to specifiy projection and tileGridConfig ) { \"name\": \"mvt_example\", \"type\": \"mvt\", \"url\": \"http://foobar.baz/tileset/{z}/{x}/{y}.pbf\", \"style\": \"http://foobar.baz/style.json\", \"projection\": \"EPSG:XXXX\", \"tileGridConfig\": { \"origin\": [<x>, <y>], \"resolutions\": [<resolutions>] } } Alternatively, WMS and WMTS background layers can also be defined specifiying a resource identifier, which will then be resolved at runtime. For example: { \"name\":\"ch.swisstopo.pixelkarte-grau\", \"title\":\"National map (gray)\", \"resource\": \"wmts:https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml#ch.swisstopo.pixelkarte-grau\", \"thumbnail\":\"img/mapthumbs/default.jpg\" } A background layer definition can also be a group of layers, in the format { \"name\": \"<Name>\", \"title\": \"<Title>\", \"type\": \"group\", \"items\": [ { <BackgroundLayerDefinition> }, { <BackgroundLayerDefinition> }, ... ] } Instead of specifiying a full background layer definition in a group, you can also reference an existing one with \"ref\": \"<bg_layer_name>\" , and selectively override certain properties, such as minScale and maxScale : { ... \"items\": [ { \"ref\": \"<bg_layer_name>\", \"minScale\": <min_scale>, \"maxScale\": <max_scale> }, ... ] }","title":"Background layers "},{"location":"configuration/ThemesConfiguration/#generating-the-themes-configuration","text":"The file ultimately read by the QWC2 viewer is the themes.json configuration, which includes the contents of themesConfig.json completed with additional data obtained from the QGIS Project. When using qwc-docker , you can generate the themes from the qwc-admin-gui administration backend, running on http://localhost:8088/qwc_admin by default. Log in as admin user, then press the green Generate service configuration button. This will invoce the qwc-config-generator , which will generate mapViewerConfig.json located below qwc-docker/volumes/config/<tentant> . You can then inspect the generated themes.json at http://localhost:8088/themes.json . When using QWC2 as a standalone viewer, the themes.json can be generated by invoking yarn run themesconfig Note: this command is automatically invoked when starting the development server via yarn start . If working in an environment without node, using the equivalent command python3 qwc2/scripts/themesConfig.py If you want to manage multiple themesConfig.json files, you can specify which while should be processed by the theme generation script via the QWC2_THEMES_CONFIG environment variable.","title":"Generating the themes configuration "},{"location":"configuration/ThemesConfiguration/#storing-projects-in-database","text":"When you are using qwc-docker , you can configure QWC to read the QGIS projects directly from the database. To do this, proceed as follows: Set up a PostgreSQL database connection in QGIS, checking the \"Allow saving/loading QGIS projects in the database\" option. Save the project to the configured database in QGIS using Project \u2192 Save To \u2192 PostgreSQL. Add a qgisprojects service definition for the used database to qwc-docker/pg_service.conf . Write a theme configuration entry in themesConfig.json using with \"url\": \"/ows/pg/<schema>/<projectname>\" , where schema and projectname as as specified when saving the project in QGIS.","title":"Storing projects in database "},{"location":"configuration/ThemesConfiguration/#split-categorized-layers","text":"When using qwc-docker , the qwc-config-generator has the ability to split a layer that has been classified with QGIS into multiple layers and move them into a new group (the group name will be the original layer name). To activate this functionality, follow these steps: Place the projects whose layers you want to split below qwc-docker/volumes/config-in/<tenant>/qgis_projects . In the topolevel config in qwc-docker/volumes/config-in/<tenant>/tenantConfig.json , ensure qgis_projects_gen_base_dir is set and valid, and set \"split_categorized_layers\": true . For all layers that you want to split, create the variable convert_categorized_layer and set it to true . Generate the themes configuration . The qwc-config-generator will process the projects and write the modified projects to qgis_projects_gen_base_dir . Note: Make sure you are using qwc-config-generator:v<version> and not qwc-config-generator:v<version>-noqgis .","title":"Split categorized layers"},{"location":"configuration/ViewerConfiguration/","text":"QWC2 Viewer Configuration \u00b6 This chapter describes how to customize the QWC2 viewer. First of all, it is important to keep in mind that the QWC2 Viewer is designed to be a modular and highly customizeable application. Configuration falls into three categories: Load-time configuration : configuration applied when the application is loaded. Customizing the assets : specify additional search providers, customize the color schemes, etc... Compiling a custom viewer : configure which components which are built into the application, add own plugins, etc... The qwc2-demo-app (and the qwc-map-viewer-demo docker image) serve as a good starting point, and for simple viewers the load-time configuration options are often sufficient to avoid the need of building a customized application. Load-time configuration config.json \u00b6 The load-time configuration config.json configuration file contains global viewer settings as well as the viewer plugin configuration for mobile and desktop devices. It is located as follows: qwc-docker : qwc-docker/volumes/config-in/<tentant>/config.json Standalone viewer: qwc2-app/static/config.json Refer to the sample config.json for a concrete example. Global settings \u00b6 All settings are optional, with fallback to the default values as documented. Setting Description assetsPath Relative path to the assets folder. Default value: assets . translationsPath Relative path to the translations folder. Default value: translations . loadTranslationOverrides Whether to attempt to load tanslation overrides, see translations . Default value: false . urlPositionFormat How to encode the current map extent in the URL, either centerAndZoom or extent . See URL parameters for details. Default value: extent . urlPositionCrs The CRS used to encode the current map extent coordinates in the URL. Default value: the map projection. omitUrlParameterUpdates Whether to omit updating the URL parameters. Default value: false . defaultFeatureStyle The default style to use for selection geometries and other unstyled features. Default value: see qwc2/utils/FeatureStyles.js . defaultMarkerStyle The default style to use as marker icon. Default value: see qwc2/utils/FeatureStyles.js . defaultInteractionStyle The default style to use on geometries to measure, snap or edit. Default value: see qwc2/utils/FeatureStyles.js . projections A list of map projections to register, in the format {\"code\": \"<code>\", \"proj\": \"<proj4def>\", \"label\": \"<label>\"} . By default, EPSG:3857 and EPSG:4326 are registered. allowFractionalZoom Whether to allow arbitrary scales for viewing the map. Default value: false . localeAwareNumbers Whether to use locale aware numbers throughout. Default value: false . wmsHidpi Whether to honour the device pixel ratio for WMS GetMap requests. Default value: true . wmsMaxGetUrlLength URL length limit before switching to a POST request for GetMap and GetFeatureInfo. Default: 2048. qgisServerVersion The QGIS Server major version in use, defaults to 3 . defaultColorScheme The color scheme to use. See Color schemes for details. startupTask Task to automatically aktivate on application start, in the format {key: \"<Task>\", \"mode\": \"<Mode>\"} . storeAllLayersInPermalink Whether to store the full layertree in the permalink data, rather than only local (i.e. redlining) layers. If false , remote layers are re-queried from the respective services, if true , they are statically reloaded (meaning restored layers may be outdated compared to current service capabilities). urlRegEx A JSON-escaped regular expression used to match URLs in feature attribute values. Default: see qwc2/utils/MiscUtils.js . trustWmsCapabilityURLs Whether to trust the GetMap etc. URLs reported in WMS service capabilities. If not true , the protocol, host and pathname portion of the URLs are inherited from the called capabilities URL. Global settings, overridable per theme \u00b6 The following options can be specified globally, and also overriden per theme, see themesConfig.json . All settings are optional, with fallback to the default values as documented. Setting Description preserveExtentOnThemeSwitch Whether to preserve the current map extent when switching theme, if possible (see below). Default value: false . preserveBackgroundOnThemeSwitch Whether to preserve the current background layer when switching theme, if possible. Default value: false . preserveNonThemeLayersOnThemeSwitch Whether to preserve non-theme layers when switching theme. Default value: false . allowReorderingLayers Whether to allow re-ordering layers in the layer tree. Default value: false . flattenLayerTreeGroups Whether to display a flat layer tree, omitting the groups. Default value: false . allowLayerTreeSeparators Allows users to add separator items in a flat layer tree. Default value: false . preventSplittingGroupsWhenReordering Whether to prevent splitting sibling groups or the group itself when reordering items. Default value: false . allowRemovingThemeLayers Whether to allow removing any theme layers from the layer tree. Default value: false . searchThemes Whether allow searching for themes from the global search field. Default value: false . allowAddingOtherThemes Whether to allow adding another theme to a currently loaded theme. Default value: false . disableImportingLocalLayers Whether to hide the option to import local layers from the layer tree. Default value: false . importLayerUrlPresets A list of predefined URLs from which the user can choose when importing layers from the layer tree. Entries must be strings or objects of the format {\"label\": \"<Label>\", \"value\": \"<URL>\"} . identifyTool The name of the identify plugin to use as default identify tool. If set to an empty string, no identify tool will be active by default. Default value: Identify . globallyDisableDockableDialogs Whether to globally disable the dockable feature of popup dialogs. Default value: false . globallyDisableMaximizeableDialogs Whether to globally disable the maximizeable feature of popup dialogs. Default value: false . searchFilterRegions List of predefined search filter regions, see Search filtering . startupTask Task to automatically start when switching to the theme, in the format {key: \"<Task>\", \"mode\": \"<Mode>\"} . Takes precedence over the global startupTask . Note that the task whenever switching to the theme, not only on application start. Note: The layer tree supports re-ordering layers via drag-and-drop if allowReorderingLayers = true and either preventSplittingGroupsWhenReordering = true or flattenLayerTreeGroups = true . If preserveExtentOnThemeSwitch = true , the current extent is preserved if it is within the new theme extent and if the current theme map projection is equal to the new theme projection. If preserveExtentOnThemeSwitch = \"force\" , the current extent is preserved regardless of whether it is within the new theme extent, but the current and new theme map projections must still match. Separate mobile / desktop global settings \u00b6 You can specify the global settings separately for mobile and desktop by setting these in a corresponding toplevel section, i.e.: { \"<prop>\": \"<value>\", // This property applies for both mobile and desktop ... \"mobile\": { \"<prop>: \"<value>\", // This property applies only for mobile ... }, \"desktop\": { \"<prop>: \"<value>\", // This property applies only for desktop ... } } You can also specify separate mobile and desktop sections in the config block of a theme item. URLs of external services \u00b6 Some plugins require external services (typically part of the qwc-services ecosystem). When using the qwc-docker , these configuration entries will be automatically injected into the config.json for enabled services. Setting Description authServiceUrl Typically the URL of a QWC authentication service like qwc-db-auth . editServiceUrl Typically the URL of the qwc-data-service . elevationServiceUrl Typically the URL of the qwc-elevation-service . mapInfoService Typically the URL of the qwc-map-info-service . permalinkServiceUrl Typically the URL of the qwc-permalink-service . searchServiceUrl Typically the URL of the qwc-fulltext-search-service . featureReportService Typically the URL of the qwc-document-service . Plugin configuration \u00b6 The plugin configuration is entered as follows: \"plugins\": { \"common\": [{<PluginConfig>}, ...], \"mobile\": [{<PluginConfig>}, ...], \"desktop\": [{<PluginConfig>}, ...] } The final mobile and desktop configurations will be computed by merging the common configuration with the respective specific configuration. Each <PluginConfig> block is of the format Setting Description { \u2063 \"name\": \"<name>\", The plugin name. \u2063 \"cfg\": {...}, The plugin configuration options, see plugin reference . \u2063 \"mapClickAction\": <\"identify\"|\"unset\"|null>, Optional: in case the plugin activates a viewer task, determines whether a click in the map will result in the identify tool being invoked, the task being unset, or whether no particular action should be performed (default). } A particularly interesting aspect is the configuration of the entries in the application menu and toolbar, i.e. the entries in menuItems and toolbarItems in the TopBar plugin configuration. The format of these entries is as follows: Setting Description { \u2063 \"key\": \"<key>\", The name of a plugin, i.e. LayerTree . The label for the entry will be looked up from the translations using the appmenu.items.<key> message identifier (see Managing translations ). \u2063 \"icon\": \"<icon>\", The icon of the entry, either a built-in icon name (see below), or :/<path_to_asset> containing the path relative to assetsPath of an asset image. \u2063 \"themeBlacklist\": [\"<themename>\", ...], Optional, allows specifying a blacklist of theme names or titles for which the entry should not be visible. \u2063 \"themeWhitelist\": [\"<themename>\", ...], Optional, allows specifying a whitelist of theme names or titles for which the entry should be visible. \u2063 \"mode\": \"<mode>\", Optional, depending on the plugin, a mode can be configured to launch the plugin directly in a specific mode. For instance, the Measure plugin supports specifying the measurement mode ( Point , LineString , Polygon ). \u2063 \"requireAuth\": \"<true|false>\", Optional, the entry is only visible when user is logged-in. \u2063 \"shortcut\": \"<shortcut>\" Optional, keyboard shortcut which triggers the entry, i.e. \"alt+shift+a\" . } Note: The built-in icons are those located in qwc2-app/qwc2/icons and in qwc2-app/icons . The built-in icon names are the respective file names, without .svg extension. Opening external websites As a special case, entries for opening external URLs can be defined as follows: Setting Description { \u2063 \"key\": \"<key>\", An arbitrary key (not used by existing plugins), used to lookup the label for the entry from the translations. \u2063 \"icon\": \"<icon>\", As above. \u2063 \"url\": \"<url>\", The URL to open. Can contain as placeholders the keys listed in URL Parameters , encolsed in $ (i.e. $e$ for the extent). In addition, the placeholders $x$ and $y$ for the individual map center coordinates are also supported. \u2063 \"target\": \"<target>\" The target where to open the URL, if empty, _blank is assumed. Can be iframe to open the link in a iframe window inside QWC2. } In general, the procedure for enabling a plugin is: Make sure the plugin is compiled into the application (see Build-time configuration ). In the plugins section of config.json , below common (or mobile and/or desktop ), add an entry { \"name\": \"<Plugin name>\", \"cfg\": { <Plugin configuration props> } } For most plugins (i.e. those which launch as an explicit task in the viewer), add entries in menuItems and/or toolbarItems as desired, i.e. \"menuItems\": [ ... {\"key\": \"<Plugin name>\", \"icon\": \"<icon name>\", ...} ] Customizing the viewer assets \u00b6 The viewer assets are located as follows: Standalone viewer: qwc2-app/static/assets qwc-docker : qwc-docker/volumes/qwc2/assets The default structure of the assets folder is as follows: Path Description \u2514\u2500 assets/ See Viewer assets \u251c\u2500 css/ Additional style sheets, must be included by index.html . \u2502 \u251c\u2500 colorschemes.css Additional color schemes. \u2502 \u2514\u2500 qwc2.css Additional style definitions. \u251c\u2500 img/ Application logo etc. \u2502 \u251c\u2500 genmapthumbs/ Autogenerated map thumbnails. \u2502 \u2514\u2500 mapthumbs/ Map thumbnails. \u251c\u2500 templates/ \u2502 \u2514\u2500 legendprint.html HTML template for the legend print. \u251c\u2500 help.html Help dialog fragment, see Help dialog . \u2514\u2500 searchProviders.js Additional search providers, see Search providers . Furthermore, the application entry point index.html is located as follows: Standalone viewer: qwc2-app/index.html qwc-docker : qwc-docker/volumes/config-in/<tenant>/index.html This file noteably specifies the application title, and references many of the assets located below the assets folder. Customizing the color scheme \u00b6 The QWC2 color scheme is fully customizeable via CSS. A default color-scheme is built-in (see DefaultColorScheme.css ). To define a custom color scheme, copy the default color scheme to assets/css/colorschemes.css , add an appropriate class name to the :root selector, and modify the colors as desided. Two additional examples ( highcontrast and dark ) are provided by default in assets/css/colorschemes.css . You can then modify the color scheme which is applied by default by setting defaultColorScheme in config.json to an appropriate class name (i.e. highcontrast or dark ). To change the color scheme at runtime in QWC2, make sure the Settings plugin is enabled, and in the Settings plugin configuration block in config.json list the color schemes below colorSchemes . Refer to the sample config.json . Note : When changing the color scheme via Settings dialog in QWC2, the picked color scheme is stored in the browser local storage, and this setting will override the defaultColorScheme setting from config.json . Specifying the style URL-parameter (see URL parameters ) will take precedence over all other settings. Note: Make sure that assets/css/colorschemes.css is included in index.html . Overriding component styles \u00b6 Occasionally, it may be desired to customize the styling on the QWC2 components. The recommended approach is to add the corresponding style overrides to assets/css/qwc2.css . Note: Make sure that assets/css/qwc2.css is included in index.html . Customizing the application logo \u00b6 The application logo in its various shapes and sizes are located below assets/img/ . In particular, the logo.svg and logo-mobile.svg images are displayed as in the top left corner of QWC2 in desktop and mobile mode respectively. If you'd like to use another format than SVG (while keeping logo and logo-mobile as base name), you can change logoFormat in the TopBar configuration block in config.json . Providing custom map thumbnails \u00b6 By default, when generating the themes configuration (see [ThemesConfiguration.md#generating-theme-configuration]), a default map thumbnail is generating via WMS GetMap , and placed below assets/img/genmapthumbs . You can provide your own thumbnail images instead by placing the corresponding images below assets/img/mapthumbs and referencing these as thumbnail in you theme configuration block in themesConig.json . Personalizing the help dialog \u00b6 You can personalize the help dialog by providing a plain HTML document fragment in static/assets/help.html and configuring the Help plugin accordingly in config.json : { \"name\": \"Help\", \"cfg\": { \"bodyContentsFragmentUrl\": \"assets/help.html\" } } Note: $VERSION$ can be used in the HTML document fragment as a placeholder for the application build date. Personalizing the legend print template \u00b6 The legend print template assets/templates/legendprint.html is used when printing the map legend from the layer tree. The only requirement for this template is that is must contain a <div id=\"legendcontainer\"></div> element. Building a custom viewer \u00b6 QWC2 is divided into two repositories: The QWC2 components, hosted at https://github.com/qgis/qwc2/ . This repository contains the core building blocks common to all QWC2 applications. The QWC2 application, the demo application is hosted at https://github.com/qgis/qwc2-demo-app . To build a custom viewer, the first step is cloning the demo application: git clone --recursive https://github.com/qgis/qwc2-demo-app.git qwc2-app The typical layout of a QWC2 app source tree is as follows: Path Description \u251c\u2500 static/ \u2502 \u251c\u2500 assets/ See Viewer assets \u2502 \u251c\u2500 translations/ Translation files. \u2502 \u251c\u2500 config.json Master configuration file. \u2502 \u2514\u2500 themes.json Full theme configuration, autogenerated from themesConfig.json . \u251c\u2500 js/ \u2502 \u251c\u2500 app.jsx Entry point of the ReactJS application. \u2502 \u251c\u2500 appConfig.js Configuration of the qwc2 core modules. \u2502 \u251c\u2500 Help.jsx Built-in component of custom Help dialog, see Help dialog . \u2502 \u2514\u2500 SearchProviders.js Built-in custom search providers, see Search providers . \u251c\u2500 icons/ Application icons. \u251c\u2500 qwc2/ Git submodule containing the core qwc2 components. \u251c\u2500 index.html Entry point. \u251c\u2500 package.json NodeJS configuration file. \u251c\u2500 themesConfig.json Themes configuration. \u2514\u2500 webpack.config.js Webpack configuration. Application build-time configuration \u00b6 The js/appConfig.js is the the principal build-time configuation file, and defines: - The default application locale, built into the application. This locale is used if no available locale matches the browser locale. - Which plugins are built into the application. Plugins left out here will be completely omitted when compiling the application bundle, and will hence also reduce the size of the bundle. - Various hook functions, as documented in the sample sample js/appConfig.js . Refer to the sample appConfig.js for a concrete example. Overriding icons \u00b6 The common application icons are located in qwc2/icons . They can be overridden by creating an icon with the same filename in the application specific icons folder. Note : The icons in the icons folder are compiled into an icon font. The icons need to be black content on transparent background, and all drawings (including texts) must be converted to paths for the icons to render correctly. Compiling an application bundle \u00b6 After tweaking the source files as desired, compile a deployable application bundle for production running yarn run prod When using qwc-docker , copy the contents of the qwc2-app/prod folder to qwc-docker/volumes/qwc2 and edit the qwc-docker/docker-compose.yml to use qwc-map-viewer-base with your custom build: qwc-map-viewer: image: sourcepole/qwc-map-viewer-base:vYYYY.MM.DD environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/' volumes: - ./pg_service.conf:/srv/pg_service.conf:ro - ./volumes/config:/srv/qwc_service/config:ro - ./volumes/qwc2:/qwc2:ro Keeping the QWC2 application up to date \u00b6 As mentioned above, QWC2 is split into a common components repository and an application specific repository. The goal of this approach is to cleanly separate user-specific configuration and components which common components which serve as a basis for all QWC2 applications, and to make it as easy as possible to rebase the application onto the latest common QWC2 components. The recommended workflow is to keep the qwc2 folder a submodule referencing the upstream qwc2 repository . To update it, just checkout/update the desired branch: cd qwc2 git checkout master # or git checkout YYYY-lts git pull The QWC2 Upgrade Notes documents major changes, and in particular all incompatible changes between releases which require changes to the application specific code and/or configuration. Translations \u00b6 This section gives an overview of the common tasks related to the QWC2 translations. Switching language \u00b6 By default, QWC2 will attempt to load the translation matching your browser language. Alternatively, you can explicitly specify the language by adding the lang=<lang> query parameter to the application URL, i.e. lang=de-CH . The Settings furthermore allows graphically switching the language within QWC2, with the list of available languages configured via the languages plugin configuration property. Adding and modify translations \u00b6 When working inside a qwc2-app source folder, the translations can be found on two levels: At QWC2 components level, in qwc2-app/qwc2/translations . At application level, in qwc2-app/static/translations . A script will take care of merging the component translations into the application translations. This way, when updating the QWC2 submodule, new translations are automatically obtained. This script is automatically invoked on yarn start , but can also be manually invoked using yarn run tsupdate Translations are stored inside the respective translations folder as regular plain-text JSON files, named <lang>.json and can be freely edited with any text editor. The tsconfig.json files stored inside the respective translations folder contains the list of languages for which translations should be generated and a list of message IDs to include in the translation. The tsupdate script will automatically scan the code for message IDs (looking for static strings passed to LocaleUtils.tr and LocaleUtils.trmsg ), store these in tsconfig.json and automatically create resp. update the translation files. In some cases tsconfig.json will not pick up a message ID (for instance, if it is computed at runtime). In these cases, the message IDs can be added manually to the extra_strings section of the tsconfig.json . Also it may be desired to override a translation inherited from the QWC2 components at application level. To prevent tsupdate from continuously reverting the overridden translation, the respective message IDs can be added to the overrides section in the application tsconfig.json file. To add a new language, list it in qwc2-app/qwc2/translations/tsconfig.json and run yarn run tsupdate , then complete the messages taking the english translation file as reference. When adding or modifying translations at QWC2 components level, please contribute them by submitting a pull request to the upstream qwc2 repository . Selectively overriding translation strings \u00b6 Occasionally, it is desireable to selectively override specific translation strings. While one can modify the full translation file as described above, especially when using the qwc-map-viewer-demo docker image, it is easier to just selectively override the desired translation strings and leave the original file unchanged and avoid having to compile a custom viewer (or overwriting the entire file with a docker volume mount). To do this: Set loadTranslationOverrides to true in config.json . Create a <lang>_overrides.json containing just the ovverridden strings, for example en-US_overrides.json : { \"messages\": { \"appmenu\": { \"items\": { \"LayerTree\": \"Layers\" } } } } Place this file inside the translations folder of your production build. When using qwc-docker , you can place this file in qwc-docker/volumes/qwc2/translations/ and mount this file inside the container, i.e. : qwc-map-viewer: image: sourcepole/qwc-map-viewer-demo:vYYYY.MM.DD [...] volumes: - ./volumes/qwc2/translations/en-US_overrides.json:/qwc2/translations/en-US_overrides.json:ro Specifying the default fallback translation \u00b6 When no translation exists for the requested language (i.e. the current browser language), QWC2 will fall back to the default translation specified as defaultLocaleData in qwc2-app/js/appConfig.js . For the demo viewer, the default fallback translation is en-US .","title":"Viewer"},{"location":"configuration/ViewerConfiguration/#qwc2-viewer-configuration","text":"This chapter describes how to customize the QWC2 viewer. First of all, it is important to keep in mind that the QWC2 Viewer is designed to be a modular and highly customizeable application. Configuration falls into three categories: Load-time configuration : configuration applied when the application is loaded. Customizing the assets : specify additional search providers, customize the color schemes, etc... Compiling a custom viewer : configure which components which are built into the application, add own plugins, etc... The qwc2-demo-app (and the qwc-map-viewer-demo docker image) serve as a good starting point, and for simple viewers the load-time configuration options are often sufficient to avoid the need of building a customized application.","title":"QWC2 Viewer Configuration"},{"location":"configuration/ViewerConfiguration/#load-time-configuration-configjson","text":"The load-time configuration config.json configuration file contains global viewer settings as well as the viewer plugin configuration for mobile and desktop devices. It is located as follows: qwc-docker : qwc-docker/volumes/config-in/<tentant>/config.json Standalone viewer: qwc2-app/static/config.json Refer to the sample config.json for a concrete example.","title":"Load-time configuration config.json"},{"location":"configuration/ViewerConfiguration/#global-settings","text":"All settings are optional, with fallback to the default values as documented. Setting Description assetsPath Relative path to the assets folder. Default value: assets . translationsPath Relative path to the translations folder. Default value: translations . loadTranslationOverrides Whether to attempt to load tanslation overrides, see translations . Default value: false . urlPositionFormat How to encode the current map extent in the URL, either centerAndZoom or extent . See URL parameters for details. Default value: extent . urlPositionCrs The CRS used to encode the current map extent coordinates in the URL. Default value: the map projection. omitUrlParameterUpdates Whether to omit updating the URL parameters. Default value: false . defaultFeatureStyle The default style to use for selection geometries and other unstyled features. Default value: see qwc2/utils/FeatureStyles.js . defaultMarkerStyle The default style to use as marker icon. Default value: see qwc2/utils/FeatureStyles.js . defaultInteractionStyle The default style to use on geometries to measure, snap or edit. Default value: see qwc2/utils/FeatureStyles.js . projections A list of map projections to register, in the format {\"code\": \"<code>\", \"proj\": \"<proj4def>\", \"label\": \"<label>\"} . By default, EPSG:3857 and EPSG:4326 are registered. allowFractionalZoom Whether to allow arbitrary scales for viewing the map. Default value: false . localeAwareNumbers Whether to use locale aware numbers throughout. Default value: false . wmsHidpi Whether to honour the device pixel ratio for WMS GetMap requests. Default value: true . wmsMaxGetUrlLength URL length limit before switching to a POST request for GetMap and GetFeatureInfo. Default: 2048. qgisServerVersion The QGIS Server major version in use, defaults to 3 . defaultColorScheme The color scheme to use. See Color schemes for details. startupTask Task to automatically aktivate on application start, in the format {key: \"<Task>\", \"mode\": \"<Mode>\"} . storeAllLayersInPermalink Whether to store the full layertree in the permalink data, rather than only local (i.e. redlining) layers. If false , remote layers are re-queried from the respective services, if true , they are statically reloaded (meaning restored layers may be outdated compared to current service capabilities). urlRegEx A JSON-escaped regular expression used to match URLs in feature attribute values. Default: see qwc2/utils/MiscUtils.js . trustWmsCapabilityURLs Whether to trust the GetMap etc. URLs reported in WMS service capabilities. If not true , the protocol, host and pathname portion of the URLs are inherited from the called capabilities URL.","title":"Global settings"},{"location":"configuration/ViewerConfiguration/#global-settings-overridable-per-theme","text":"The following options can be specified globally, and also overriden per theme, see themesConfig.json . All settings are optional, with fallback to the default values as documented. Setting Description preserveExtentOnThemeSwitch Whether to preserve the current map extent when switching theme, if possible (see below). Default value: false . preserveBackgroundOnThemeSwitch Whether to preserve the current background layer when switching theme, if possible. Default value: false . preserveNonThemeLayersOnThemeSwitch Whether to preserve non-theme layers when switching theme. Default value: false . allowReorderingLayers Whether to allow re-ordering layers in the layer tree. Default value: false . flattenLayerTreeGroups Whether to display a flat layer tree, omitting the groups. Default value: false . allowLayerTreeSeparators Allows users to add separator items in a flat layer tree. Default value: false . preventSplittingGroupsWhenReordering Whether to prevent splitting sibling groups or the group itself when reordering items. Default value: false . allowRemovingThemeLayers Whether to allow removing any theme layers from the layer tree. Default value: false . searchThemes Whether allow searching for themes from the global search field. Default value: false . allowAddingOtherThemes Whether to allow adding another theme to a currently loaded theme. Default value: false . disableImportingLocalLayers Whether to hide the option to import local layers from the layer tree. Default value: false . importLayerUrlPresets A list of predefined URLs from which the user can choose when importing layers from the layer tree. Entries must be strings or objects of the format {\"label\": \"<Label>\", \"value\": \"<URL>\"} . identifyTool The name of the identify plugin to use as default identify tool. If set to an empty string, no identify tool will be active by default. Default value: Identify . globallyDisableDockableDialogs Whether to globally disable the dockable feature of popup dialogs. Default value: false . globallyDisableMaximizeableDialogs Whether to globally disable the maximizeable feature of popup dialogs. Default value: false . searchFilterRegions List of predefined search filter regions, see Search filtering . startupTask Task to automatically start when switching to the theme, in the format {key: \"<Task>\", \"mode\": \"<Mode>\"} . Takes precedence over the global startupTask . Note that the task whenever switching to the theme, not only on application start. Note: The layer tree supports re-ordering layers via drag-and-drop if allowReorderingLayers = true and either preventSplittingGroupsWhenReordering = true or flattenLayerTreeGroups = true . If preserveExtentOnThemeSwitch = true , the current extent is preserved if it is within the new theme extent and if the current theme map projection is equal to the new theme projection. If preserveExtentOnThemeSwitch = \"force\" , the current extent is preserved regardless of whether it is within the new theme extent, but the current and new theme map projections must still match.","title":"Global settings, overridable per theme"},{"location":"configuration/ViewerConfiguration/#separate-mobile-desktop-global-settings","text":"You can specify the global settings separately for mobile and desktop by setting these in a corresponding toplevel section, i.e.: { \"<prop>\": \"<value>\", // This property applies for both mobile and desktop ... \"mobile\": { \"<prop>: \"<value>\", // This property applies only for mobile ... }, \"desktop\": { \"<prop>: \"<value>\", // This property applies only for desktop ... } } You can also specify separate mobile and desktop sections in the config block of a theme item.","title":"Separate mobile / desktop global settings"},{"location":"configuration/ViewerConfiguration/#urls-of-external-services","text":"Some plugins require external services (typically part of the qwc-services ecosystem). When using the qwc-docker , these configuration entries will be automatically injected into the config.json for enabled services. Setting Description authServiceUrl Typically the URL of a QWC authentication service like qwc-db-auth . editServiceUrl Typically the URL of the qwc-data-service . elevationServiceUrl Typically the URL of the qwc-elevation-service . mapInfoService Typically the URL of the qwc-map-info-service . permalinkServiceUrl Typically the URL of the qwc-permalink-service . searchServiceUrl Typically the URL of the qwc-fulltext-search-service . featureReportService Typically the URL of the qwc-document-service .","title":"URLs of external services"},{"location":"configuration/ViewerConfiguration/#plugin-configuration","text":"The plugin configuration is entered as follows: \"plugins\": { \"common\": [{<PluginConfig>}, ...], \"mobile\": [{<PluginConfig>}, ...], \"desktop\": [{<PluginConfig>}, ...] } The final mobile and desktop configurations will be computed by merging the common configuration with the respective specific configuration. Each <PluginConfig> block is of the format Setting Description { \u2063 \"name\": \"<name>\", The plugin name. \u2063 \"cfg\": {...}, The plugin configuration options, see plugin reference . \u2063 \"mapClickAction\": <\"identify\"|\"unset\"|null>, Optional: in case the plugin activates a viewer task, determines whether a click in the map will result in the identify tool being invoked, the task being unset, or whether no particular action should be performed (default). } A particularly interesting aspect is the configuration of the entries in the application menu and toolbar, i.e. the entries in menuItems and toolbarItems in the TopBar plugin configuration. The format of these entries is as follows: Setting Description { \u2063 \"key\": \"<key>\", The name of a plugin, i.e. LayerTree . The label for the entry will be looked up from the translations using the appmenu.items.<key> message identifier (see Managing translations ). \u2063 \"icon\": \"<icon>\", The icon of the entry, either a built-in icon name (see below), or :/<path_to_asset> containing the path relative to assetsPath of an asset image. \u2063 \"themeBlacklist\": [\"<themename>\", ...], Optional, allows specifying a blacklist of theme names or titles for which the entry should not be visible. \u2063 \"themeWhitelist\": [\"<themename>\", ...], Optional, allows specifying a whitelist of theme names or titles for which the entry should be visible. \u2063 \"mode\": \"<mode>\", Optional, depending on the plugin, a mode can be configured to launch the plugin directly in a specific mode. For instance, the Measure plugin supports specifying the measurement mode ( Point , LineString , Polygon ). \u2063 \"requireAuth\": \"<true|false>\", Optional, the entry is only visible when user is logged-in. \u2063 \"shortcut\": \"<shortcut>\" Optional, keyboard shortcut which triggers the entry, i.e. \"alt+shift+a\" . } Note: The built-in icons are those located in qwc2-app/qwc2/icons and in qwc2-app/icons . The built-in icon names are the respective file names, without .svg extension. Opening external websites As a special case, entries for opening external URLs can be defined as follows: Setting Description { \u2063 \"key\": \"<key>\", An arbitrary key (not used by existing plugins), used to lookup the label for the entry from the translations. \u2063 \"icon\": \"<icon>\", As above. \u2063 \"url\": \"<url>\", The URL to open. Can contain as placeholders the keys listed in URL Parameters , encolsed in $ (i.e. $e$ for the extent). In addition, the placeholders $x$ and $y$ for the individual map center coordinates are also supported. \u2063 \"target\": \"<target>\" The target where to open the URL, if empty, _blank is assumed. Can be iframe to open the link in a iframe window inside QWC2. } In general, the procedure for enabling a plugin is: Make sure the plugin is compiled into the application (see Build-time configuration ). In the plugins section of config.json , below common (or mobile and/or desktop ), add an entry { \"name\": \"<Plugin name>\", \"cfg\": { <Plugin configuration props> } } For most plugins (i.e. those which launch as an explicit task in the viewer), add entries in menuItems and/or toolbarItems as desired, i.e. \"menuItems\": [ ... {\"key\": \"<Plugin name>\", \"icon\": \"<icon name>\", ...} ]","title":"Plugin configuration"},{"location":"configuration/ViewerConfiguration/#customizing-the-viewer-assets","text":"The viewer assets are located as follows: Standalone viewer: qwc2-app/static/assets qwc-docker : qwc-docker/volumes/qwc2/assets The default structure of the assets folder is as follows: Path Description \u2514\u2500 assets/ See Viewer assets \u251c\u2500 css/ Additional style sheets, must be included by index.html . \u2502 \u251c\u2500 colorschemes.css Additional color schemes. \u2502 \u2514\u2500 qwc2.css Additional style definitions. \u251c\u2500 img/ Application logo etc. \u2502 \u251c\u2500 genmapthumbs/ Autogenerated map thumbnails. \u2502 \u2514\u2500 mapthumbs/ Map thumbnails. \u251c\u2500 templates/ \u2502 \u2514\u2500 legendprint.html HTML template for the legend print. \u251c\u2500 help.html Help dialog fragment, see Help dialog . \u2514\u2500 searchProviders.js Additional search providers, see Search providers . Furthermore, the application entry point index.html is located as follows: Standalone viewer: qwc2-app/index.html qwc-docker : qwc-docker/volumes/config-in/<tenant>/index.html This file noteably specifies the application title, and references many of the assets located below the assets folder.","title":"Customizing the viewer assets "},{"location":"configuration/ViewerConfiguration/#customizing-the-color-scheme","text":"The QWC2 color scheme is fully customizeable via CSS. A default color-scheme is built-in (see DefaultColorScheme.css ). To define a custom color scheme, copy the default color scheme to assets/css/colorschemes.css , add an appropriate class name to the :root selector, and modify the colors as desided. Two additional examples ( highcontrast and dark ) are provided by default in assets/css/colorschemes.css . You can then modify the color scheme which is applied by default by setting defaultColorScheme in config.json to an appropriate class name (i.e. highcontrast or dark ). To change the color scheme at runtime in QWC2, make sure the Settings plugin is enabled, and in the Settings plugin configuration block in config.json list the color schemes below colorSchemes . Refer to the sample config.json . Note : When changing the color scheme via Settings dialog in QWC2, the picked color scheme is stored in the browser local storage, and this setting will override the defaultColorScheme setting from config.json . Specifying the style URL-parameter (see URL parameters ) will take precedence over all other settings. Note: Make sure that assets/css/colorschemes.css is included in index.html .","title":"Customizing the color scheme"},{"location":"configuration/ViewerConfiguration/#overriding-component-styles","text":"Occasionally, it may be desired to customize the styling on the QWC2 components. The recommended approach is to add the corresponding style overrides to assets/css/qwc2.css . Note: Make sure that assets/css/qwc2.css is included in index.html .","title":"Overriding component styles"},{"location":"configuration/ViewerConfiguration/#customizing-the-application-logo","text":"The application logo in its various shapes and sizes are located below assets/img/ . In particular, the logo.svg and logo-mobile.svg images are displayed as in the top left corner of QWC2 in desktop and mobile mode respectively. If you'd like to use another format than SVG (while keeping logo and logo-mobile as base name), you can change logoFormat in the TopBar configuration block in config.json .","title":"Customizing the application logo"},{"location":"configuration/ViewerConfiguration/#providing-custom-map-thumbnails","text":"By default, when generating the themes configuration (see [ThemesConfiguration.md#generating-theme-configuration]), a default map thumbnail is generating via WMS GetMap , and placed below assets/img/genmapthumbs . You can provide your own thumbnail images instead by placing the corresponding images below assets/img/mapthumbs and referencing these as thumbnail in you theme configuration block in themesConig.json .","title":"Providing custom map thumbnails"},{"location":"configuration/ViewerConfiguration/#personalizing-the-help-dialog","text":"You can personalize the help dialog by providing a plain HTML document fragment in static/assets/help.html and configuring the Help plugin accordingly in config.json : { \"name\": \"Help\", \"cfg\": { \"bodyContentsFragmentUrl\": \"assets/help.html\" } } Note: $VERSION$ can be used in the HTML document fragment as a placeholder for the application build date.","title":"Personalizing the help dialog "},{"location":"configuration/ViewerConfiguration/#personalizing-the-legend-print-template","text":"The legend print template assets/templates/legendprint.html is used when printing the map legend from the layer tree. The only requirement for this template is that is must contain a <div id=\"legendcontainer\"></div> element.","title":"Personalizing the legend print template"},{"location":"configuration/ViewerConfiguration/#building-a-custom-viewer","text":"QWC2 is divided into two repositories: The QWC2 components, hosted at https://github.com/qgis/qwc2/ . This repository contains the core building blocks common to all QWC2 applications. The QWC2 application, the demo application is hosted at https://github.com/qgis/qwc2-demo-app . To build a custom viewer, the first step is cloning the demo application: git clone --recursive https://github.com/qgis/qwc2-demo-app.git qwc2-app The typical layout of a QWC2 app source tree is as follows: Path Description \u251c\u2500 static/ \u2502 \u251c\u2500 assets/ See Viewer assets \u2502 \u251c\u2500 translations/ Translation files. \u2502 \u251c\u2500 config.json Master configuration file. \u2502 \u2514\u2500 themes.json Full theme configuration, autogenerated from themesConfig.json . \u251c\u2500 js/ \u2502 \u251c\u2500 app.jsx Entry point of the ReactJS application. \u2502 \u251c\u2500 appConfig.js Configuration of the qwc2 core modules. \u2502 \u251c\u2500 Help.jsx Built-in component of custom Help dialog, see Help dialog . \u2502 \u2514\u2500 SearchProviders.js Built-in custom search providers, see Search providers . \u251c\u2500 icons/ Application icons. \u251c\u2500 qwc2/ Git submodule containing the core qwc2 components. \u251c\u2500 index.html Entry point. \u251c\u2500 package.json NodeJS configuration file. \u251c\u2500 themesConfig.json Themes configuration. \u2514\u2500 webpack.config.js Webpack configuration.","title":"Building a custom viewer "},{"location":"configuration/ViewerConfiguration/#application-build-time-configuration","text":"The js/appConfig.js is the the principal build-time configuation file, and defines: - The default application locale, built into the application. This locale is used if no available locale matches the browser locale. - Which plugins are built into the application. Plugins left out here will be completely omitted when compiling the application bundle, and will hence also reduce the size of the bundle. - Various hook functions, as documented in the sample sample js/appConfig.js . Refer to the sample appConfig.js for a concrete example.","title":"Application build-time configuration"},{"location":"configuration/ViewerConfiguration/#overriding-icons","text":"The common application icons are located in qwc2/icons . They can be overridden by creating an icon with the same filename in the application specific icons folder. Note : The icons in the icons folder are compiled into an icon font. The icons need to be black content on transparent background, and all drawings (including texts) must be converted to paths for the icons to render correctly.","title":"Overriding icons"},{"location":"configuration/ViewerConfiguration/#compiling-an-application-bundle","text":"After tweaking the source files as desired, compile a deployable application bundle for production running yarn run prod When using qwc-docker , copy the contents of the qwc2-app/prod folder to qwc-docker/volumes/qwc2 and edit the qwc-docker/docker-compose.yml to use qwc-map-viewer-base with your custom build: qwc-map-viewer: image: sourcepole/qwc-map-viewer-base:vYYYY.MM.DD environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/' volumes: - ./pg_service.conf:/srv/pg_service.conf:ro - ./volumes/config:/srv/qwc_service/config:ro - ./volumes/qwc2:/qwc2:ro","title":"Compiling an application bundle"},{"location":"configuration/ViewerConfiguration/#keeping-the-qwc2-application-up-to-date","text":"As mentioned above, QWC2 is split into a common components repository and an application specific repository. The goal of this approach is to cleanly separate user-specific configuration and components which common components which serve as a basis for all QWC2 applications, and to make it as easy as possible to rebase the application onto the latest common QWC2 components. The recommended workflow is to keep the qwc2 folder a submodule referencing the upstream qwc2 repository . To update it, just checkout/update the desired branch: cd qwc2 git checkout master # or git checkout YYYY-lts git pull The QWC2 Upgrade Notes documents major changes, and in particular all incompatible changes between releases which require changes to the application specific code and/or configuration.","title":"Keeping the QWC2 application up to date"},{"location":"configuration/ViewerConfiguration/#translations","text":"This section gives an overview of the common tasks related to the QWC2 translations.","title":"Translations "},{"location":"configuration/ViewerConfiguration/#switching-language","text":"By default, QWC2 will attempt to load the translation matching your browser language. Alternatively, you can explicitly specify the language by adding the lang=<lang> query parameter to the application URL, i.e. lang=de-CH . The Settings furthermore allows graphically switching the language within QWC2, with the list of available languages configured via the languages plugin configuration property.","title":"Switching language"},{"location":"configuration/ViewerConfiguration/#adding-and-modify-translations","text":"When working inside a qwc2-app source folder, the translations can be found on two levels: At QWC2 components level, in qwc2-app/qwc2/translations . At application level, in qwc2-app/static/translations . A script will take care of merging the component translations into the application translations. This way, when updating the QWC2 submodule, new translations are automatically obtained. This script is automatically invoked on yarn start , but can also be manually invoked using yarn run tsupdate Translations are stored inside the respective translations folder as regular plain-text JSON files, named <lang>.json and can be freely edited with any text editor. The tsconfig.json files stored inside the respective translations folder contains the list of languages for which translations should be generated and a list of message IDs to include in the translation. The tsupdate script will automatically scan the code for message IDs (looking for static strings passed to LocaleUtils.tr and LocaleUtils.trmsg ), store these in tsconfig.json and automatically create resp. update the translation files. In some cases tsconfig.json will not pick up a message ID (for instance, if it is computed at runtime). In these cases, the message IDs can be added manually to the extra_strings section of the tsconfig.json . Also it may be desired to override a translation inherited from the QWC2 components at application level. To prevent tsupdate from continuously reverting the overridden translation, the respective message IDs can be added to the overrides section in the application tsconfig.json file. To add a new language, list it in qwc2-app/qwc2/translations/tsconfig.json and run yarn run tsupdate , then complete the messages taking the english translation file as reference. When adding or modifying translations at QWC2 components level, please contribute them by submitting a pull request to the upstream qwc2 repository .","title":"Adding and modify translations"},{"location":"configuration/ViewerConfiguration/#selectively-overriding-translation-strings","text":"Occasionally, it is desireable to selectively override specific translation strings. While one can modify the full translation file as described above, especially when using the qwc-map-viewer-demo docker image, it is easier to just selectively override the desired translation strings and leave the original file unchanged and avoid having to compile a custom viewer (or overwriting the entire file with a docker volume mount). To do this: Set loadTranslationOverrides to true in config.json . Create a <lang>_overrides.json containing just the ovverridden strings, for example en-US_overrides.json : { \"messages\": { \"appmenu\": { \"items\": { \"LayerTree\": \"Layers\" } } } } Place this file inside the translations folder of your production build. When using qwc-docker , you can place this file in qwc-docker/volumes/qwc2/translations/ and mount this file inside the container, i.e. : qwc-map-viewer: image: sourcepole/qwc-map-viewer-demo:vYYYY.MM.DD [...] volumes: - ./volumes/qwc2/translations/en-US_overrides.json:/qwc2/translations/en-US_overrides.json:ro","title":"Selectively overriding translation strings"},{"location":"configuration/ViewerConfiguration/#specifying-the-default-fallback-translation","text":"When no translation exists for the requested language (i.e. the current browser language), QWC2 will fall back to the default translation specified as defaultLocaleData in qwc2-app/js/appConfig.js . For the demo viewer, the default fallback translation is en-US .","title":"Specifying the default fallback translation"},{"location":"references/","text":"References \u00b6 QWC2 plugins qwc-config-generator qwc-admin-gui qwc-data-service qwc-db-auth qwc-elevation-service qwc-ext-service qwc-feature-info-service qwc-legend-service qwc-mapinfo-service qwc-map-viewer qwc-ogc-service qwc-permalink-service qwc-services-permissions qwc-print-service qwc-search-service","title":"References"},{"location":"references/#references","text":"QWC2 plugins qwc-config-generator qwc-admin-gui qwc-data-service qwc-db-auth qwc-elevation-service qwc-ext-service qwc-feature-info-service qwc-legend-service qwc-mapinfo-service qwc-map-viewer qwc-ogc-service qwc-permalink-service qwc-services-permissions qwc-print-service qwc-search-service","title":"References"},{"location":"references/qwc-admin-gui/","text":"QWC Admin GUI QWC Admin GUI Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-admin-gui/master/schemas/qwc-admin-gui.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"admin-gui\" config Required root config Config options Type: object db_url Required root config db_url Type: string DB connection URL config_generator_service_url Required root config config_generator_service_url Type: string Config generator URL totp_enabled Required root config totp_enabled Type: boolean Show TOTP fields for two factor authentication user_info_fields root config user_info_fields Type: array of object Additional user fields No Additional Items Each item of this array must be: root config user_info_fields user_info_fields items Type: object proxy_url_whitelist root config proxy_url_whitelist Type: array of object List of RegExes for whitelisted URLs No Additional Items Each item of this array must be: root config proxy_url_whitelist proxy_url_whitelist items Type: object proxy_timeout root config proxy_timeout Type: integer Timeout in seconds for proxy requests admin_gui_title root config admin_gui_title Type: string Title displayed in Admin Gui home page admin_gui_subtitle root config admin_gui_subtitle Type: string Subtitle displayed in Admin Gui home page solr_service_url root config solr_service_url Type: string Solr Service base URL for collection solr_tenant_dih root config solr_tenant_dih Type: string Solr DataImportHandler for tenant solr_tenant_dih_config_file root config solr_tenant_dih_config_file Type: string Path to source DataImportHandler config file for tenant solr_config_path root config solr_config_path Type: string Path to Solr configs solr_update_check_wait root config solr_update_check_wait Type: number Wait time in seconds for checks during Solr index update solr_update_check_max_retries root config solr_update_check_max_retries Type: integer Max number of retries for checks during Solr index update plugins root config plugins Type: array of string List of plugins to load No Additional Items Each item of this array must be: root config plugins plugins items Type: string input_config_path root config input_config_path Type: string The path to the input configs. Required for 'themes' and 'config_editor' plugin. qwc2_path root config qwc2_path Type: string The path to QWC2 files. Required for 'themes' and 'alkis' plugins. qgs_resources_path root config qgs_resources_path Type: string The path to the QGIS projects. Required for 'themes' plugin. info_templates_path root config info_templates_path Type: string The path to the html info templates. Required for 'themes' plugin. ows_prefix root config ows_prefix Type: string The OGC service URL path prefix, i.e. /ows. Required for 'themes' plugin. default_qgis_server_url root config default_qgis_server_url Type: string The default Qgis server URL. Required for 'themes' plugin. Generated using json-schema-for-humans on 2024-01-04 at 19:22:16 +0000","title":"Qwc admin gui"},{"location":"references/qwc-config-generator/","text":"QWC Config generator QWC Config generator Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"config-generator\" template root template Optional, path to a tenantConfig template. If specified, the contents of the file is merged with the contents of tenantConfig.json. Any occurence of $tenant$ in the template will be replaced with the current tenant name. Type: string themesConfig Required root themesConfig QWC2 themes configuration One of Option 1 Option 2 root themesConfig oneOf item 0 Type: object Corresponds to contents of standalone QWC2 themesConfig.json themes Required root themesConfig oneOf item 0 themes Type: object root themesConfig oneOf item 1 Type: string Path to themesConfig.json config Required root config Config options for Config generator Type: object tenant Required root config tenant Type: string Tenant name. Example: default config_db_url Required root config config_db_url Type: string Format: uri Connection URL for configuration database. Example: postgresql:///?service=qwc_configdb default_qgis_server_url Required root config default_qgis_server_url Type: string Format: uri Default QGIS Server URL for OGC requests. Example: http://qwc-qgis-server/ows/ ows_prefix root config ows_prefix Type: string OWS service path prefix. Defaults to the path component of default qgis server url. Used to form the urls of autodetected projects below qgis projects scan base_dir. Example: /ows qgis_project_extension root config qgis_project_extension Type: string The QGIS project file extension to look for. Default: '.qgs' qgis_projects_base_dir Required root config qgis_projects_base_dir Type: string Base path for QGIS projects. Example: /data qgis_print_layouts_dir root config qgis_print_layouts_dir Type: string Directory containing print layouts. Example: /layouts qgis_projects_scan_base_dir root config qgis_projects_scan_base_dir Type: string Path for QGIS projects, which should be automatically detected. Must be a subdir qgis projects base_dir. Example: /data/scan qgis_projects_gen_base_dir root config qgis_projects_gen_base_dir Type: string Path for generated QGIS projects, result of preprocessing. Must be a subdir of qgis projects base dir. Can be the same as qgis projects scan base_dir, in which case the theme autodetection will apply to generated QGIS projects. Example: /data/gen permissions_default_allow root config permissions_default_allow Type: boolean Set whether resources are permitted or restricted by default. Example: true validate_schema root config validate_schema Type: boolean Validate configuration against schema. Example: true config_path root config config_path Type: string Target path for generated service configs and permissions, if not set by $OUTPUT CONFIG PATH. Example: /config-out qwc2_base_dir root config qwc2_base_dir Type: string Path to the QWC2 directory, which will be used to autodetect thumbnails. If qgis projects scan base dir is not set, then this option will be ignored. Example /qwc2 skip_print_layer_groups root config skip_print_layer_groups Type: boolean Skip group layers containing print layers layer_opacities root config layer_opacities Type: object Layer opacity values for QGIS <= 3.10 split_categorized_layers root config split_categorized_layers Type: boolean Set to true to activate the categorize groups functionality project_settings_read_timeout root config project_settings_read_timeout Type: number Timeout for GetProjectSettings, GetCapabilities and DescribeFeatureType requests. Default: 60sec autogen_keyvaltable_datasets root config autogen_keyvaltable_datasets Type: boolean Whether to automatically generate data service datasets used for key-value relationships without requiring corresponding data resources to be created. Warning: this will expose the key and value fields of the key-value table as world readable. Default: false generate_nested_nrel_forms root config generate_nested_nrel_forms Type: boolean Whether to generate nested nrelation forms instead of a tabluar view. Default: false generate_wfs_services root config generate_wfs_services Type: boolean Generate WFS service resources and permissions for the OGC service. Default: false use_default_map_thumbnail root config use_default_map_thumbnail Type: object Whether to use the default mapthumb (mapthumbs/default.jpg) instead of generating the thumbnail via GetMap if no custom thumbnail is provided. Default: false services Required root services Service configs Type: array Service specific config options for generating their service configs No Additional Items Each item of this array must be: root services services items Generator config for a service One of common_service mapViewer ogc root services services items oneOf common_service Type: object Generator config for a QWC service name Required root services services items oneOf item 0 name Type: enum (of string) Service name Must be one of: \"adminGui\" \"data\" \"dbAuth\" \"elevation\" \"featureInfo\" \"mapinfo\" \"permalink\" \"print\" \"search\" \"legend\" config Required root services services items oneOf item 0 config Type: object QWC service config options (cf. its JSON schema). This is copied unmodified to the service config. root services services items oneOf mapViewer Type: object Generator config for Map Viewer name Required root services services items oneOf item 1 name Type: const Service name Specific value: \"mapViewer\" generator_config Required root services services items oneOf item 1 generator_config Type: object Additional config for generating MapViewer resources qwc2_config Required root services services items oneOf item 1 generator_config qwc2_config Type: object Additional config for QWC2 application configuration qwc2_config_file Required root services services items oneOf item 1 generator_config qwc2_config qwc2_config_file Type: string Path to QWC2 config.json file. Example: /qwc2/config.json qwc2_index_file Required root services services items oneOf item 1 generator_config qwc2_config qwc2_index_file Type: string Path to QWC2 index.html file. Example: /qwc2/index.html config Required root services services items oneOf item 1 config Type: object Map Viewer config options (cf. JSON schema qwc-map-viewer.json). This is copied unmodified to the service config. root services services items oneOf ogc Type: object Generator config for OGC service name Required root services services items oneOf item 2 name Type: const Service name Specific value: \"ogc\" generator_config root services services items oneOf item 2 generator_config Type: object Additional config for generating OGC service resources wms_services root services services items oneOf item 2 generator_config wms_services Type: object Additional config for WMS services online_resources root services services items oneOf item 2 generator_config wms_services online_resources Type: object Custom OnlineResources shown in GetCapabilities service root services services items oneOf item 2 generator_config wms_services online_resources service Type: string Format: uri Default public base URL for OnlineResources feature_info root services services items oneOf item 2 generator_config wms_services online_resources feature_info Type: string Format: uri Public base URL for FeatureInfo OnlineResources legend root services services items oneOf item 2 generator_config wms_services online_resources legend Type: string Format: uri Public base URL for Legend OnlineResources config Required root services services items oneOf item 2 config Type: object OGC service config options (cf. JSON schema qwc-ogc-service.json). This is copied unmodified to the service config. Generated using json-schema-for-humans on 2024-01-04 at 19:22:16 +0000","title":"Qwc config generator"},{"location":"references/qwc-data-service/","text":"QWC Data Service QWC Data Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://github.com/qwc-services/qwc-data-service/raw/master/schemas/qwc-data-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"data\" config Required root config Config options Type: object attachments_base_dir root config attachments_base_dir Type: string Base dir where attachments are stored allowed_attachment_extensions root config allowed_attachment_extensions Type: string Comma separated list of allowed attachment file extensions, i.e. '.png,.jpg' max_attachment_file_size root config max_attachment_file_size Type: number Maximum attachment file size in bytes clamd_host root config clamd_host Type: string Hostname of ClamD server listening on TCP port 3310. If set, uploaded files are checked by ClamAV upload_user_field_suffix root config upload_user_field_suffix Type: string Field suffix where to log the username who last changed an upload field, i.e. __ for the field . If empty, username is not logged. edit_timestamp_field root config edit_timestamp_field Type: string If specified, the timestamp of the last mutation to a record will be logged to the field of the record. edit_user_field root config edit_user_field Type: string If specified, the username of the last user who performed a mutation to a record with be logged to the field of the record. geometry_default_allow_null root config geometry_default_allow_null Type: boolean Whether to allow null geometries by default allowed_extensions_per_dataset root config allowed_extensions_per_dataset Type: object Loopup of allowed attachment file extensions per theme, values as comma separated list, i.e. '.png,.jpg' max_attachment_file_size_per_dataset root config max_attachment_file_size_per_dataset Type: object Lookup of maximum attachment file size in bytes per theme attachment_store_pattern root config attachment_store_pattern Type: string The path pattern to use when saving attachments to disk. You can use {random}, {filename}, {ext} and { }, where field refers to the respective field value of the committed feature. Default is '{random}/{filename}' resources Required root resources Resources Type: object datasets Required root resources datasets Datasets Type: array of object No Additional Items Each item of this array must be: root resources datasets Dataset Dataset Type: object PostgreSQL metadata and field constraints for a dataset name Required root resources datasets Dataset name Type: string Dataset name db_url Required root resources datasets Dataset db_url Type: string DB connection string for read and write access (or read-only access if db write url is present) db_write_url root resources datasets Dataset db_write_url Type: string Optional DB connection string for write access schema Required root resources datasets Dataset schema Type: string table_name Required root resources datasets Dataset table_name Type: string primary_key Required root resources datasets Dataset primary_key Type: string fields Required root resources datasets Dataset fields Type: array of object Dataset fields with optional constraints No Additional Items Each item of this array must be: root resources datasets Dataset fields fields items Type: object name Required root resources datasets Dataset fields fields items name Type: string Field name data_type Required root resources datasets Dataset fields fields items data_type Type: enum (of string) Default: \"text\" Must be one of: \"USER-DEFINED\" \"bigint\" \"boolean\" \"character\" \"character varying\" \"date\" \"double precision\" \"file\" \"integer\" \"json\" \"jsonb\" \"numeric\" \"real\" \"smallint\" \"text\" \"time\" \"timestamp with time zone\" \"timestamp without time zone\" \"uuid\" constraints root resources datasets Dataset fields fields items constraints Type: object maxlength root resources datasets Dataset fields fields items constraints maxlength Type: integer pattern root resources datasets Dataset fields fields items constraints pattern Type: string min root resources datasets Dataset fields fields items constraints min Type: number max root resources datasets Dataset fields fields items constraints max Type: number numeric_precision root resources datasets Dataset fields fields items constraints numeric_precision Type: integer numeric_scale root resources datasets Dataset fields fields items constraints numeric_scale Type: integer step root resources datasets Dataset fields fields items constraints step Type: number values root resources datasets Dataset fields fields items constraints values Type: array of object No Additional Items Each item of this array must be: root resources datasets Dataset fields fields items constraints values values items Type: object label Required root resources datasets Dataset fields fields items constraints values values items label Type: string value Required root resources datasets Dataset fields fields items constraints values values items value Type: string readOnly root resources datasets Dataset fields fields items constraints readOnly Type: boolean required root resources datasets Dataset fields fields items constraints required Type: boolean geometry root resources datasets Dataset geometry PostGIS geometry metadata Type: object geometry_column Required root resources datasets Dataset geometry geometry_column Type: string geometry_type Required root resources datasets Dataset geometry geometry_type Type: enum (of string) Must be one of: \"POINT\" \"POINTZ\" \"LINESTRING\" \"LINESTRINGZ\" \"POLYGON\" \"POLYGONZ\" \"MULTIPOINT\" \"MULTIPOINTZ\" \"MULTILINESTRING\" \"MULTILINESTRINGZ\" \"MULTIPOLYGON\" \"MULTIPOLYGONZ\" srid Required root resources datasets Dataset geometry srid SRID Type: integer Spatial Reference System Identifier (EPSG code) allow_null root resources datasets Dataset geometry allow_null Allow NULL geometries Type: boolean Default: false Allow setting geometry values to NULL Generated using json-schema-for-humans on 2024-01-04 at 19:22:17 +0000","title":"Qwc data service"},{"location":"references/qwc-db-auth/","text":"QWC DB authentication service QWC DB authentication service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-db-auth/master/schemas/qwc-db-auth.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"db-auth\" config Required root config Config options Type: object db_url Required root config db_url Type: string DB connection URL password_min_length root config password_min_length Type: integer Min password length password_max_length root config password_max_length Type: integer Max password length password_constraints root config password_constraints Type: array of string List of RegExes for additional password constraints No Additional Items Each item of this array must be: root config password_constraints password_constraints items Type: string password_min_constraints root config password_min_constraints Type: integer Min number of password_constraints to match for password to be valid password_constraints_message root config password_constraints_message Type: string Validation message if password constraints are not met password_expiry root config password_expiry Type: integer Number of days until password expires, or -1 to disable password_expiry_notice root config password_expiry_notice Type: integer Show an expiry notice within this number of days before a password expires, or -1 to disable password_update_interval root config password_update_interval Type: integer Min number of seconds before password may be changed again, or -1 to disable password_allow_reuse root config password_allow_reuse Type: boolean Set whether previous passwords may be reused or not user_info_fields root config user_info_fields Type: array of string List of user info fields to include in JWT identity No Additional Items Each item of this array must be: root config user_info_fields user_info_fields items Type: string logo_image_url root config logo_image_url Type: string URL to a logo image to show in the login form background_image_url root config background_image_url Type: string URL to a background image for the login page customstylesheet root config customstylesheet Type: string Filename of custom stylesheet placed next to regular style.css terms_url root config terms_url Type: string URL to terms of use Generated using json-schema-for-humans on 2024-01-04 at 19:22:18 +0000","title":"Qwc db auth"},{"location":"references/qwc-document-service/","text":"QWC Document Service \u00b6 Properties \u00b6 $schema (string) : Reference to JSON schema of this config. Default: https://raw.githubusercontent.com/qwc-services/qwc-document-service/master/schemas/qwc-document-service.json . service (string) config (object) jasper_service_url (string) : Jasper Reporting service URL for generating reports. Example: http://localhost:8002/reports. jasper_timeout (integer) : Timeout for requests forwarded to Jasper Reporting service. Default: 60 . resources (object) document_templates (array) Items (object) template (string) report_filename (string)","title":"QWC Document Service"},{"location":"references/qwc-document-service/#qwc-document-service","text":"","title":"QWC Document Service"},{"location":"references/qwc-document-service/#properties","text":"$schema (string) : Reference to JSON schema of this config. Default: https://raw.githubusercontent.com/qwc-services/qwc-document-service/master/schemas/qwc-document-service.json . service (string) config (object) jasper_service_url (string) : Jasper Reporting service URL for generating reports. Example: http://localhost:8002/reports. jasper_timeout (integer) : Timeout for requests forwarded to Jasper Reporting service. Default: 60 . resources (object) document_templates (array) Items (object) template (string) report_filename (string)","title":"Properties"},{"location":"references/qwc-elevation-service/","text":"QWC Elevation Service QWC Elevation Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-elevation-service/master/schemas/qwc-elevation-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"elevation\" config Required root config Config options Type: object elevation_dataset Required root config elevation_dataset Type: string Elevation dataset (file or URL). Example: https://data.sourcepole.com/srtm 1km 3857.tif Generated using json-schema-for-humans on 2024-01-04 at 19:22:18 +0000","title":"Qwc elevation service"},{"location":"references/qwc-ext-service/","text":"QWC External Link Service QWC External Link Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://github.com/qwc-services/qwc-ext-service/raw/master/schemas/qwc-ext-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"ext\" config Required root config Config options Type: object get_link_timeout root config get_link_timeout Type: number Timeout for get link requests, in seconds. Default: 10. post_link_timeout root config post_link_timeout Type: number Timeout for post link requests, in seconds. Default: 30. resources Required root resources Resources Type: object external_links Required root resources external_links Type: array of object No Additional Items Each item of this array must be: root resources external_links external_links items Type: object name Required root resources external_links external_links items name Type: string url Required root resources external_links external_links items url Type: string Generated using json-schema-for-humans on 2024-01-04 at 19:22:19 +0000","title":"Qwc ext service"},{"location":"references/qwc-feature-info-service/","text":"QWC FeatureInfo Service QWC FeatureInfo Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-feature-info-service/master/schemas/qwc-feature-info-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"feature-info\" config Required root config Config options Type: object default_info_template root config default_info_template Type: string Default HTML info template default_info_template_path root config default_info_template_path Type: string Default HTML info template path default_info_template_base64 root config default_info_template_base64 Type: string Default HTML info template in Base64 encoding default_qgis_server_url root config default_qgis_server_url Type: string Default URL for WMS GetFeatureInfo queries data_service_url root config data_service_url Type: string Data service URL transform_image_urls root config transform_image_urls Type: boolean Transform image URLs to inline images skip_empty_attributes root config skip_empty_attributes Type: boolean Whether to skip empty feature attributes in WMS GetFeatureInfo responses (default: false) use_permission_attribute_order root config use_permission_attribute_order Type: boolean Whether to order the attributes according to order of the permitted attribute names in WMS GetFeatureInfo responses, rather than the order returned by WMS GetFeatureInfo (default: false) resources Required root resources Resources Type: object wms_services root resources wms_services WMS service Type: array of object No Additional Items Each item of this array must be: root resources wms_services WMS WMS Type: object WMS service with nested layers and group layers name Required root resources wms_services WMS name Type: string WMS service name root_layer Required root resources wms_services WMS root_layer Root layer of WMS (layer or group layer) One of layer group_layer root resources wms_services WMS root_layer oneOf layer Type: object Single layer No Additional Properties name Required root resources wms_services WMS root_layer oneOf Layer name Type: string WMS layer name type root resources wms_services WMS root_layer oneOf Layer type Type: const Layer type Specific value: \"layer\" title root resources wms_services WMS root_layer oneOf Layer title Type: string Layer title attributes root resources wms_services WMS root_layer oneOf Layer attributes Type: array of object No Additional Items Each item of this array must be: root resources wms_services WMS root_layer oneOf Layer attributes attributes items Type: object name Required root resources wms_services WMS root_layer oneOf Layer attributes attributes items name Type: string Attribute name alias root resources wms_services WMS root_layer oneOf Layer attributes attributes items alias Type: string format root resources wms_services WMS root_layer oneOf Layer attributes attributes items format Type: string Formatting expression for converting attribute values format_base64 root resources wms_services WMS root_layer oneOf Layer attributes attributes items format_base64 Type: string Formatting expression for converting attribute values, in Base64 encoding json_attribute_aliases root resources wms_services WMS root_layer oneOf Layer attributes attributes items json_attribute_aliases JSON attribute aliases Type: array of object Aliases for attributes in JSON values of type list No Additional Items Each item of this array must be: root resources wms_services WMS root_layer oneOf Layer attributes attributes items json_attribute_aliases json_attribute_aliases items Type: object name Required root resources wms_services WMS root_layer oneOf Layer attributes attributes items json_attribute_aliases json_attribute_aliases items name Type: string Attribute name in JSON value alias Required root resources wms_services WMS root_layer oneOf Layer attributes attributes items json_attribute_aliases json_attribute_aliases items alias Type: string Alias for attribute in JSON value info_template root resources wms_services WMS root_layer oneOf Layer info_template Info template One of wms_info_template sql_info_template module_info_template root resources wms_services WMS root_layer oneOf Layer info_template oneOf wms_info_template Type: object Info template for WMS GetFeatureInfo No Additional Properties type Required root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 type Type: const Specific value: \"wms\" wms_url root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 wms_url Type: string Custom WMS URL if different from default qgis server_url template root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 template Type: string HTML template for info result template_path root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 template_path Type: string Path to HTML template for info result template_base64 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 0 template_base64 Type: string HTML template for info result, in Base64 encoding root resources wms_services WMS root_layer oneOf Layer info_template oneOf sql_info_template Type: object Info template for DB Query No Additional Properties One of Option 1 Option 2 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 oneOf item 0 Type: object The following properties are required: type db_url sql root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 oneOf item 1 Type: object The following properties are required: type db_url sql_base64 type root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 type Type: const Specific value: \"sql\" db_url root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 db_url Type: string Database connection string sql root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 sql Type: string Query SQL sql_base64 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 sql_base64 Type: string Query SQL in Base64 encoding template root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 template Type: string HTML template for info result template_path root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 template_path Type: string Path to HTML template for info result template_base64 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 1 template_base64 Type: string HTML template for info result, in Base64 encoding root resources wms_services WMS root_layer oneOf Layer info_template oneOf module_info_template Type: object Info template using WMS GetFeatureInfo No Additional Properties type Required root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 type Type: const Specific value: \"module\" module Required root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 module Type: string Custom info module name template root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 template Type: string HTML template for info result template_path root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 template_path Type: string Path to HTML template for info result. template_base64 root resources wms_services WMS root_layer oneOf Layer info_template oneOf item 2 template_base64 Type: string HTML template for info result, in Base64 encoding display_field root resources wms_services WMS root_layer oneOf Layer display_field Display field Type: string Show value of this attribute in feature result header feature_report root resources wms_services WMS root_layer oneOf Layer feature_report Feature report Type: string Name of corresponding feature report root resources wms_services WMS root_layer oneOf group_layer Type: object Group layer with nested sublayers No Additional Properties name Required root resources wms_services WMS root_layer oneOf Group Layer name Type: string WMS group layer name type root resources wms_services WMS root_layer oneOf Group Layer type Type: const Layer type Specific value: \"layergroup\" title root resources wms_services WMS root_layer oneOf Group Layer title Type: string Group title layers Required root resources wms_services WMS root_layer oneOf Group Layer layers Type: array Sublayers of this group layer (layers or group layers) No Additional Items Each item of this array must be: root resources wms_services WMS root_layer oneOf Group Layer layers layers items One of layer group_layer root resources wms_services WMS root_layer oneOf Group Layer layers layers items oneOf layer Type: object Single layer Same definition as Layer root resources wms_services WMS root_layer oneOf Group Layer layers layers items oneOf group_layer Type: object Group layer with nested sublayers Same definition as Group Layer hide_sublayers root resources wms_services WMS root_layer oneOf Group Layer hide_sublayers Hide sublayers Type: boolean Hide sublayers of this group layer if set, to make the group layer look like a regular layer (Facade layer) Generated using json-schema-for-humans on 2024-01-04 at 19:22:20 +0000","title":"Qwc feature info service"},{"location":"references/qwc-legend-service/","text":"QWC Legend Service QWC Legend Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-legend-service/v2/schemas/qwc-legend-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"legend\" config Required root config Config options Type: object default_qgis_server_url Required root config default_qgis_server_url Type: string Default base URL for forwarding WMS GetLegendGraphics requests legend_default_font_size root config legend_default_font_size Type: number Default font size for GetLegendGraphic request legend_images_path root config legend_images_path Type: string Path to legend images (required if using 'legend_image') resources Required root resources Resources Type: object wms_services root resources wms_services WMS services Type: array of object No Additional Items Each item of this array must be: root resources wms_services WMS service WMS service Type: object WMS service with nested layers and group layers name Required root resources wms_services WMS service name Type: string WMS service name root_layer Required root resources wms_services WMS service root_layer Root layer of WMS (layer or group layer) One of layer group_layer root resources wms_services WMS service root_layer oneOf layer Type: object Single layer No Additional Properties name Required root resources wms_services WMS service root_layer oneOf Layer name Type: string WMS layer name type root resources wms_services WMS service root_layer oneOf Layer type Type: const Layer type Specific value: \"layer\" legend_image root resources wms_services WMS service root_layer oneOf Layer legend_image Type: string Legend image path relative to 'legend images path' legend_image_base64 root resources wms_services WMS service root_layer oneOf Layer legend_image_base64 Type: string Legend image in Base64 encoding root resources wms_services WMS service root_layer oneOf group_layer Type: object Group layer with nested sublayers No Additional Properties name Required root resources wms_services WMS service root_layer oneOf Group Layer name Type: string WMS group layer name type root resources wms_services WMS service root_layer oneOf Group Layer type Type: const Layer type Specific value: \"layergroup\" layers Required root resources wms_services WMS service root_layer oneOf Group Layer layers Type: array Sublayers of this group layer (layers or group layers) No Additional Items Each item of this array must be: root resources wms_services WMS service root_layer oneOf Group Layer layers layers items One of layer group_layer root resources wms_services WMS service root_layer oneOf Group Layer layers layers items oneOf layer Type: object Single layer Same definition as Layer root resources wms_services WMS service root_layer oneOf Group Layer layers layers items oneOf group_layer Type: object Group layer with nested sublayers Same definition as Group Layer hide_sublayers root resources wms_services WMS service root_layer oneOf Group Layer hide_sublayers Type: boolean Hide sublayers of this group layer if set, to make the group layer look like a regular layer (Facade layer) legend_image root resources wms_services WMS service root_layer oneOf Group Layer legend_image Type: string Legend image path relative to 'legend images path' (only if hide_sublayers is set) legend_image_base64 root resources wms_services WMS service root_layer oneOf Group Layer legend_image_base64 Type: string Legend image in Base64 encoding (only if hide_sublayers is set) Generated using json-schema-for-humans on 2024-01-04 at 19:22:20 +0000","title":"Qwc legend service"},{"location":"references/qwc-map-viewer/","text":"QWC Map Viewer QWC Map Viewer Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-map-viewer/v2/schemas/qwc-map-viewer.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"map-viewer\" config Required root config Config options Type: object qwc2_path Required root config qwc2_path Type: string Path to QWC2 files auth_service_url root config auth_service_url Type: string QWC Auth Service URL ccc_config_service_url root config ccc_config_service_url Type: string CCC Service URL data_service_url root config data_service_url Type: string QWC Data Service URL dataproduct_service_url root config dataproduct_service_url Type: string DataProduct Service URL document_service_url root config document_service_url Type: string Document Service URL elevation_service_url root config elevation_service_url Type: string QWC Elevation Service URL info_service_url root config info_service_url Type: string QWC FeatureInfo Service URL landreg_service_url root config landreg_service_url Type: string Land Register Extract Service URL legend_service_url root config legend_service_url Type: string QWC Legend Service URL mapinfo_service_url root config mapinfo_service_url Type: string MapInfo Service URL ogc_service_url Required root config ogc_service_url Type: string QWC OGC Service URL permalink_service_url root config permalink_service_url Type: string QWC Permalink Service URL internal_permalink_service_url root config internal_permalink_service_url Type: string Internal QWC Permalink Service URL plotinfo_service_url root config plotinfo_service_url Type: string PlotInfo Service URL print_service_url root config print_service_url Type: string QWC Print Service URL proxy_service_url root config proxy_service_url Type: string Proxy Service URL search_data_service_url root config search_data_service_url Type: string QWC Search Result Service URL search_service_url root config search_service_url Type: string QWC Search Service URL show_restricted_themes root config show_restricted_themes Type: boolean Whether to insert placeholder items for restricted themes in themes.json show_restricted_themes_whitelist root config show_restricted_themes_whitelist Type: array of string Whitelist of restricted theme names to include in themes.json. If empty, all restricted themes are shown. No Additional Items Each item of this array must be: root config show_restricted_themes_whitelist show_restricted_themes_whitelist items Type: string redirect_restricted_themes_to_auth root config redirect_restricted_themes_to_auth Type: boolean Whether to redirect to login on auth service if requesting a restricted theme in URL params user_info_fields root config user_info_fields Type: array of string List of user info fields to read from JWT identity No Additional Items Each item of this array must be: root config user_info_fields user_info_fields items Type: string display_user_info_field root config display_user_info_field Type: string User info field to display instead of username public_paths root config public_paths Type: array of string Optional: List of paths that will be accessible without a JWT identity, if AUTH_REQUIRED is set. No Additional Items Each item of this array must be: root config public_paths public_paths items Type: string resources Required root resources Resources Type: object qwc2_config Required root resources qwc2_config Type: object restricted_viewer_tasks root resources qwc2_config restricted_viewer_tasks Type: array of string Restricted menu items No Additional Items Each item of this array must be: root resources qwc2_config restricted_viewer_tasks restricted_viewer_tasks items Type: string config Required root resources qwc2_config config Type: object QWC2 application configuration (config.json) qwc2_themes Required root resources qwc2_themes Type: object QWC2 themes configuration (themes.json) themes Required root resources qwc2_themes themes Type: object Generated using json-schema-for-humans on 2024-01-04 at 19:22:22 +0000","title":"Qwc map viewer"},{"location":"references/qwc-mapinfo-service/","text":"QWC Mapinfo Service QWC Mapinfo Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"mapinfo\" config Required root config Config options One of Option 1 Option 2 Option 3 root config oneOf item 0 Type: object The following properties are required: db_url info_table info_geom_col info_display_col info_title root config oneOf item 1 Type: object The following properties are required: db_url info_sql info_title root config oneOf item 2 Type: object The following properties are required: queries db_url root config db_url Type: string DB connection for info queries info_table root config info_table Type: string Table to use info_geom_col root config info_geom_col Type: string Geometry column in table info_display_col root config info_display_col Type: string Display text column in table info_title root config info_title Type: string Display title info_where root config info_where Type: string Additional WHERE query queries root config queries Info queries Type: array of object No Additional Items Each item of this array must be: root config queries Query Query One of Option 1 Option 2 root config queries Query oneOf item 0 Type: object The following properties are required: db_url info_table info_geom_col info_display_col info_title root config queries Query oneOf item 1 Type: object The following properties are required: db_url info_sql info_title db_url root config queries Query db_url Type: string DB connection for info queries info_table root config queries Query info_table Type: string Table to use info_geom_col root config queries Query info_geom_col Type: string Geometry column in table info_display_col root config queries Query info_display_col Type: string Display text column in table info_title root config queries Query info_title Type: string Display title info_where root config queries Query info_where Type: string Additional WHERE query info_sql root config queries Query info_sql Type: string SQL query text Generated using json-schema-for-humans on 2024-01-04 at 19:22:21 +0000","title":"Qwc mapinfo service"},{"location":"references/qwc-ogc-service/","text":"QWC OGC Service QWC OGC Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-ogc-service/master/schemas/qwc-ogc-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"ogc\" config Required root config Config options Type: object default_qgis_server_url root config default_qgis_server_url Type: string Default base URL for WMS/WFS requests public_ogc_url_pattern root config public_ogc_url_pattern Type: string Regex pattern of the external OGC URL pattern, used to detect EXTERNAL_WMS URLs in print requests which point to the OGC server itself. Can use $origin$, $tenant$ and $mountpoint$ as variables. Default: $origin$/.*/?$mountpoint$ basic_auth_login_url root config basic_auth_login_url Type: array of string Login verification URL for requests with basic auth. Example: http://qwc-auth-service:9090/verify_login No Additional Items Each item of this array must be: root config basic_auth_login_url basic_auth_login_url items Type: string qgis_server_identity_parameter root config qgis_server_identity_parameter Type: string Name of the active user parameter for the QGIS Server. Will be set to the name of the logged in user in qwc2 public_paths root config public_paths Type: array of string Optional: List of paths that will be accessible without a JWT identity, if AUTH_REQUIRED is set. No Additional Items Each item of this array must be: root config public_paths public_paths items Type: string marker_params root config marker_params Type: object Optional: Marker parameter definitions default root config marker_params default Type: string Default value type root config marker_params type Type: string Parameter type (number, color, string) resources Required root resources Resources Type: object wms_services root resources wms_services WMS services Type: array of object No Additional Items Each item of this array must be: root resources wms_services WMS service WMS service Type: object WMS service with nested layers and group layers name Required root resources wms_services WMS service name Type: string WMS service name wms_url root resources wms_services WMS service wms_url Type: string Custom WMS URL if different from default qgis server_url online_resources root resources wms_services WMS service online_resources Type: object Custom OnlineResources shown in GetCapabilities service root resources wms_services WMS service online_resources service Type: string Default public base URL for OnlineResources feature_info root resources wms_services WMS service online_resources feature_info Type: string Public base URL for FeatureInfo OnlineResources legend root resources wms_services WMS service online_resources legend Type: string Public base URL for Legend OnlineResources root_layer Required root resources wms_services WMS service root_layer Root layer of WMS (layer or group layer) One of wms_layer wms_group_layer root resources wms_services WMS service root_layer oneOf wms_layer Type: object Single layer No Additional Properties name Required root resources wms_services WMS service root_layer oneOf WMS Layer name Type: string WMS layer name type root resources wms_services WMS service root_layer oneOf WMS Layer type Type: const Layer type Specific value: \"layer\" title root resources wms_services WMS service root_layer oneOf WMS Layer title Type: string Layer title attributes root resources wms_services WMS service root_layer oneOf WMS Layer attributes Type: array of string Attributes for GetFeatureInfo No Additional Items Each item of this array must be: root resources wms_services WMS service root_layer oneOf WMS Layer attributes attributes items Type: string queryable root resources wms_services WMS service root_layer oneOf WMS Layer queryable Type: boolean Whether this layer is queryable opacity root resources wms_services WMS service root_layer oneOf WMS Layer opacity Type: integer Custom base opacity from 0-100 (Hidden sublayers only) root resources wms_services WMS service root_layer oneOf wms_group_layer Type: object Group layer with nested sublayers No Additional Properties name Required root resources wms_services WMS service root_layer oneOf WMS Group Layer name Type: string WMS group layer name type root resources wms_services WMS service root_layer oneOf WMS Group Layer type Type: const Layer type Specific value: \"layergroup\" title root resources wms_services WMS service root_layer oneOf WMS Group Layer title Type: string Group title layers Required root resources wms_services WMS service root_layer oneOf WMS Group Layer layers Type: array Sublayers of this group layer (layers or group layers) No Additional Items Each item of this array must be: root resources wms_services WMS service root_layer oneOf WMS Group Layer layers layers items One of wms_layer wms_group_layer root resources wms_services WMS service root_layer oneOf WMS Group Layer layers layers items oneOf wms_layer Type: object Single layer Same definition as WMS Layer root resources wms_services WMS service root_layer oneOf WMS Group Layer layers layers items oneOf wms_group_layer Type: object Group layer with nested sublayers Same definition as WMS Group Layer hide_sublayers root resources wms_services WMS service root_layer oneOf WMS Group Layer hide_sublayers Type: boolean Hide sublayers of this group layer if set, to make the group layer look like a regular layer (Facade layer) print_url root resources wms_services WMS service print_url Type: string Custom WMS URL for printing, e.g. if using a separate QGIS project. print_templates root resources wms_services WMS service print_templates Type: array of string Available print templates No Additional Items Each item of this array must be: root resources wms_services WMS service print_templates print_templates items Type: string legend_default_font_size root resources wms_services WMS service legend_default_font_size Type: number Default font size for GetLegendGraphic request internal_print_layers root resources wms_services WMS service internal_print_layers Type: array of string Internal layer names used for printing and raster export of background and external layers No Additional Items Each item of this array must be: root resources wms_services WMS service internal_print_layers internal_print_layers items Type: string wfs_services root resources wfs_services WFS services Type: array of object No Additional Items Each item of this array must be: root resources wfs_services WFS service WFS service Type: object WFS service with list of layers name Required root resources wfs_services WFS service name Type: string WFS service name wfs_url root resources wfs_services WFS service wfs_url Type: string Custom WFS URL if different from default qgis server_url online_resource root resources wfs_services WFS service online_resource Type: string Custom OnlineResource shown in GetCapabilities layers Required root resources wfs_services WFS service layers Type: array List of WFS layers No Additional Items Each item of this array must be: root resources wfs_services WFS service layers wfs_layer Type: object Single layer name Required root resources wfs_services WFS service layers WFS Layer name Type: string WFS layer name attributes root resources wfs_services WFS service layers WFS Layer attributes Type: array of string Attributes for GetFeature and DescribeFeatureType No Additional Items Each item of this array must be: root resources wfs_services WFS service layers WFS Layer attributes attributes items Type: string Generated using json-schema-for-humans on 2024-01-04 at 19:22:22 +0000","title":"Qwc ogc service"},{"location":"references/qwc-permalink-service/","text":"QWC Permalink Service QWC Permalink Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-permalink-service/master/schemas/qwc-permalink-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"permalink\" config Required root config Config options Type: object db_url Required root config db_url Type: string DB connection URL. Defaults to postgresql:///?service=qwc_configdb. permalinks_table Required root config permalinks_table Type: string Permalink table. Defaults to qwc_config.permalinks. user_permalink_table root config user_permalink_table Type: string User permalink table. Defaults to qwc config.user permalinks. user_bookmark_table root config user_bookmark_table Type: string User bookmarks table. Defaults to qwc config.user bookmarks. bookmarks_sort_order root config bookmarks_sort_order Type: string Bookmarks sort order, defaults to \"date, description\". default_expiry_period root config default_expiry_period Type: number Default expiry period for permalinks, in days. Default: null (no expiry) Generated using json-schema-for-humans on 2024-01-04 at 19:22:23 +0000","title":"Qwc permalink service"},{"location":"references/qwc-print-service/","text":"QWC Print Service QWC Print Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-print-service/master/schemas/qwc-print-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"print\" config Required root config Config options Type: object ogc_service_url Required root config ogc_service_url Type: string OGC Service URL (internal) qgis_server_version Required root config qgis_server_version Type: string QGIS Server version (e.g. 2.18.19, 3.4.1) qgs_postfix root config qgs_postfix Type: string optional postfix to QGS name for printing print_pdf_filename root config print_pdf_filename Type: string optional filename for returned PDF (default: .pdf) label_values root config label_values Type: array of object No Additional Items Each item of this array must be: root config label_values label_values items Type: object field Required root config label_values label_values items field Type: string value Required root config label_values label_values items value Type: string label_queries root config label_queries Type: array of object No Additional Items Each item of this array must be: root config label_queries label_queries items Type: object db_url Required root config label_queries label_queries items db_url Type: string query Required root config label_queries label_queries items query Type: string params Required root config label_queries label_queries items params Type: array of string No Additional Items Each item of this array must be: root config label_queries label_queries items params params items Type: string resources Required root resources Resources Type: object print_templates Required root resources print_templates Type: array of object No Additional Items Each item of this array must be: root resources print_templates print_templates items Type: object template Required root resources print_templates print_templates items template Type: string Generated using json-schema-for-humans on 2024-01-04 at 19:22:24 +0000","title":"Qwc print service"},{"location":"references/qwc-search-service/","text":"QWC Fulltext Search Service QWC Fulltext Search Service Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://raw.githubusercontent.com/qwc-services/qwc-fulltext-search-service/master/schemas/qwc-search-service.json\" Reference to JSON schema of this config service Required root service Service name Type: const Specific value: \"search\" config Required root config Config options Type: object solr_service_url Required root config solr_service_url Type: string SOLR service URL word_split_re root config word_split_re Type: string Default: \"[\\\\s,.:;\\\"]+\" Word split Regex search_result_limit root config search_result_limit Type: integer Default: 50 Result count limit per search db_url root config db_url Type: string Default DB connection for geometry result query resources Required root resources Resources Type: object facets Required root resources facets Search facets Type: array of object No Additional Items Each item of this array must be: root resources facets Facet Facet Type: object name Required root resources facets Facet name Type: string Facet name filter_word Required root resources facets Facet filter_word Type: string table_name root resources facets Facet table_name Type: string Default: \"search_v\" Table/View for search result geometries geometry_column root resources facets Facet geometry_column Type: string Default: \"geom\" Geometry column in search result table facet_column root resources facets Facet facet_column Type: string Default: \"subclass\" Facet name column in search result table db_url root resources facets Facet db_url Type: string DB connection for geometry result query Generated using json-schema-for-humans on 2024-01-04 at 19:22:25 +0000","title":"Qwc search service"},{"location":"references/qwc-services-permissions/","text":"QWC Services Permissions QWC Services Permissions Type: object $schema root $schema JSON Schema Type: string Format: uri Default: \"https://github.com/qwc-services/qwc-services-core/raw/master/schemas/qwc-services-permissions.json\" Reference to JSON schema of these permissions users Required root users Users Type: array of object No Additional Items Each item of this array must be: root users User User Type: object name Required root users User name Type: string User name groups Required root users User groups Group memberships Type: array of string No Additional Items Each item of this array must be: root users User groups groups items Type: string roles root users User roles Role memberships Type: array of string No Additional Items Each item of this array must be: root users User roles roles items Type: string groups Required root groups Groups Type: array of object No Additional Items Each item of this array must be: root groups Group Group Type: object name Required root groups Group name Type: string Group name roles Required root groups Group roles Role memberships Type: array of string No Additional Items Each item of this array must be: root groups Group roles roles items Type: string roles Required root roles Roles Type: array of object No Additional Items Each item of this array must be: root roles Role Role Type: object role Required root roles Role role Type: string Role name permissions root roles Role permissions Permissions for role Type: object wms_services root roles Role permissions wms_services Type: array of object Permitted WMS services and layers for all QWC services using WMS requests (i.e. OGC, FeatureInfo, Legend, Print service) No Additional Items Each item of this array must be: root roles Role permissions wms_services WMS permissions WMS permissions Type: object name Required root roles Role permissions wms_services WMS permissions name Type: string WMS service name layers Required root roles Role permissions wms_services WMS permissions layers Type: array of object Flat list of permitted layers and group layers No Additional Items Each item of this array must be: root roles Role permissions wms_services WMS permissions layers layers items Type: object name Required root roles Role permissions wms_services WMS permissions layers layers items name Type: string WMS layer name attributes root roles Role permissions wms_services WMS permissions layers layers items attributes Type: array of string No Additional Items Each item of this array must be: root roles Role permissions wms_services WMS permissions layers layers items attributes attributes items Type: string info_template root roles Role permissions wms_services WMS permissions layers layers items info_template Type: boolean print_templates root roles Role permissions wms_services WMS permissions print_templates Type: array of string No Additional Items Each item of this array must be: root roles Role permissions wms_services WMS permissions print_templates print_templates items Type: string wfs_services root roles Role permissions wfs_services Type: array of object Permitted WFS services and layers for OGC service No Additional Items Each item of this array must be: root roles Role permissions wfs_services WFS permissions WFS permissions Type: object name Required root roles Role permissions wfs_services WFS permissions name Type: string WFS service name layers Required root roles Role permissions wfs_services WFS permissions layers Type: array of object List of permitted layers No Additional Items Each item of this array must be: root roles Role permissions wfs_services WFS permissions layers layers items Type: object name Required root roles Role permissions wfs_services WFS permissions layers layers items name Type: string WFS layer name attributes root roles Role permissions wfs_services WFS permissions layers layers items attributes Type: array of string No Additional Items Each item of this array must be: root roles Role permissions wfs_services WFS permissions layers layers items attributes attributes items Type: string background_layers root roles Role permissions background_layers Type: array of string No Additional Items Each item of this array must be: root roles Role permissions background_layers background_layers items Type: string data_datasets root roles Role permissions data_datasets Type: array of object Permitted datasets for Data service No Additional Items Each item of this array must be: root roles Role permissions data_datasets Dataset permissions Dataset permissions Type: object name Required root roles Role permissions data_datasets Dataset permissions name Type: string Dataset name attributes Required root roles Role permissions data_datasets Dataset permissions attributes Type: array of string No Additional Items Each item of this array must be: root roles Role permissions data_datasets Dataset permissions attributes attributes items Type: string writable root roles Role permissions data_datasets Dataset permissions writable Type: boolean creatable root roles Role permissions data_datasets Dataset permissions creatable Type: boolean readable root roles Role permissions data_datasets Dataset permissions readable Type: boolean updatable root roles Role permissions data_datasets Dataset permissions updatable Type: boolean deletable root roles Role permissions data_datasets Dataset permissions deletable Type: boolean viewer_tasks root roles Role permissions viewer_tasks Type: array of string No Additional Items Each item of this array must be: root roles Role permissions viewer_tasks viewer_tasks items Type: string theme_info_links root roles Role permissions theme_info_links Type: array of string No Additional Items Each item of this array must be: root roles Role permissions theme_info_links theme_info_links items Type: string plugin_data root roles Role permissions plugin_data Type: array of object Permitted resources for custom Map viewer plugins No Additional Items Each item of this array must be: root roles Role permissions plugin_data Plugin permissions Plugin permissions Type: object name Required root roles Role permissions plugin_data Plugin permissions name Type: string Plugin name resources Required root roles Role permissions plugin_data Plugin permissions resources Type: array of string Plugin specific resources No Additional Items Each item of this array must be: root roles Role permissions plugin_data Plugin permissions resources resources items Type: string dataproducts root roles Role permissions dataproducts Type: array of string No Additional Items Each item of this array must be: root roles Role permissions dataproducts dataproducts items Type: string document_templates root roles Role permissions document_templates Type: array of string No Additional Items Each item of this array must be: root roles Role permissions document_templates document_templates items Type: string search_providers root roles Role permissions search_providers Type: array of string No Additional Items Each item of this array must be: root roles Role permissions search_providers search_providers items Type: string solr_facets root roles Role permissions solr_facets Type: array of string No Additional Items Each item of this array must be: root roles Role permissions solr_facets solr_facets items Type: string Generated using json-schema-for-humans on 2024-01-04 at 19:22:24 +0000","title":"Qwc services permissions"},{"location":"references/qwc2_plugins/","text":"Plugin reference \u00b6 API AttributeTable Authentication BackgroundSwitcher Bookmark BottomBar Cyclomedia DxfExport Editing FeatureForm FeatureSearch HeightProfilePrintDialog HeightProfile Help HomeButton Identify LayerCatalog LayerTree LocateButton LoginUser MapPlugin MapComparePlugin MapCopyright MapExport MapInfoTooltip MapLegend MapTip Measure NewsPopup Print ProcessNotifications RasterExport Redlining Routing ScratchDrawing Settings Share StartupMarker TaskButton ThemeSwitcher TimeManager TopBar ZoomButton API \u00b6 Exposes an API for interacting with QWC2 via window.qwc2 . All following action functions are available: display layers locate map task theme windows I.e. setCurrentTask is available via window.qwc2.setCurrentTask . Additionally, the following functions are available: window.qwc2.addExternalLayer(resource, beforeLayerName = null) Convenience method for adding an external layer. resource : An external resource of the form wms:<service_url>#<layername> or wmts:<capabilities_url>#<layername> . beforeLayerName : Insert the new layer before the layer with the specified name. If null or the layer does not exist, the layer is inserted on top. window.qwc2.drawScratch(geomType, message, drawMultiple, callback, style = null) Deprecated, use window.qwc2.drawGeometry instead. window.qwc2.drawGeometry(geomType, message, callback, options) Draw geometries, and return these as GeoJSON to the calling application. geomType : Point , LineString , Polygon , Circle or Box . message : A descriptive string to display in the tool taskbar. callback : A function(result, crs) , the result being an array of GeoJSON features, and crs the projection of the feature coordinates. options : Optional configuration: drawMultiple : Whether to allow drawing multiple geometries (default: false ). style : A custom style object to use for the drawn features, in the same format as DEFAULT_FEATURE_STYLE in qwc2/utils/FeatureStyles.js . initialFeatures : Array of initial geometries. snapping : Whether snapping is available while drawing (default: false ). snappingActive : Whether snapping is initially active (default: false ) window.qwc2.getState() Return the current application state. Property Type Description Default value AttributeTable \u00b6 Displaying the attribute table of layers in a dialog. To make a layer available in the attribute table, create a a data resource and matching permissions for it in the qwc-admin-gui . The attribute table works for both read-only as well as read-write data resources. This plugin queries the dataset via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ). Property Type Description Default value allowAddForGeometryLayers bool Whether to allow adding records for datasets which have a geometry column. undefined showEditFormButton bool Whether to show a button to open the edit form for selected layer. Requires the Editing plugin to be enabled. true zoomLevel number The zoom level for zooming to point features. 1000 Authentication \u00b6 Handles authentication Invokes the the authentication service specified by authServiceUrl in config.json . Property Type Description Default value clearLayerParam bool Whether to clear the layer parameter from the URL on login. undefined idleTimeout number An idle timeout in seconds after which the user is automatically logged of. undefined logoutTargetUrl string An URL to redirect to on logout, instead of the viewer URL. undefined requireLogin bool Whether authentication is required, i.e. the viewer automatically redirects to the login page if no user is authenticated. undefined BackgroundSwitcher \u00b6 Map button for switching the background layer. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 0 Bookmark \u00b6 Allows managing user bookmarks. Bookmarks are only allowed for authenticated users. Requires permalinkServiceUrl to point to a qwc-permalink-service . Property Type Description Default value side string The side of the application on which to display the sidebar. 'right' BottomBar \u00b6 Bottom bar, displaying mouse coordinate, scale, etc. Property Type Description Default value displayCoordinates bool Whether to display the coordinates in the bottom bar. true displayScales bool Whether to display the scale in the bottom bar. true termsUrl string The URL of the terms label anchor. undefined termsUrlIcon string Icon of the terms inline window. Relevant only when termsUrlTarget is iframe . undefined termsUrlTarget string The target where to open the terms URL. If iframe , it will be displayed in an inline window, otherwise in a new tab. undefined viewertitleUrl string The URL of the viewer title label anchor. undefined viewertitleUrlIcon string Icon of the viewer title inline window. Relevant only when viewertitleUrl is iframe . undefined viewertitleUrlTarget string The target where to open the viewer title URL. If iframe , it will be displayed in an inline window, otherwise in a new tab. undefined Cyclomedia \u00b6 Cyclomedia integration for QWC2. Property Type Description Default value apikey string The Cyclomedia API key undefined clientId string OAuth client ID. undefined cyclomediaVersion string The cyclomedia version. '23.6' displayMeasurements bool Whether to display Cyclomedia measurement geometries on the map. true geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 480, initialHeight: 640, initialX: 0, initialY: 0, initiallyDocked: false } loginRedirectUri string The relative path to the redirect login handling of oauth. undefined logoutRedirectUri string The relative path to the redirect logout handling of oauth. undefined maxMapScale number The maximum map scale above which the recordings WFS won't be displayed. 10000 projection string The projection to use for Cyclomedia. 'EPSG:3857' DxfExport \u00b6 Allows exporting a selected extent of the map as DXF. Uses the DXF format support of QGIS Server. Deprecated. Use the MapExport plugin instead. Property Type Description Default value formatOptions string Optional format options to pass to QGIS Server via FORMAT_OPTIONS. undefined layerOptions [{ label: string, layers: string, }] Optional choice of layer sets to pass to QGIS Server via LAYERS. undefined serviceUrl string Optional URL invoked on export instead of the default QGIS Server URL. undefined Editing \u00b6 Allows editing geometries and attributes of datasets. The attribute form is generated from the QGIS attribute form configuration. This plugin queries the dataset via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ). Property Type Description Default value allowCloneGeometry bool Whether to enable the \"Clone existing geometry\" functionality. true side string The side of the application on which to display the sidebar. 'right' snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true width string The default width of the editing sidebar, as a CSS width string. \"30em\" FeatureForm \u00b6 Displays queried feature attributes in a form. The attribute form is generated from the QGIS attribute form configuration. If the dataset it editable, allows editing the attributes directly in the displayed form. This plugin queries the feature via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ), rather than over WMS GetFeatureInfo like the Identify plugin. Can be used as default identify tool by setting \"identifyTool\": \"FeatureForm\" in config.json . Property Type Description Default value exitTaskOnResultsClose bool Whether to clear the task when the results window is closed. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 320, initialHeight: 480, initialX: 0, initialY: 0, initiallyDocked: false } HeightProfile \u00b6 Displays a height profile along a measured line. Triggered automatically when a line is measured via the Measure plugin. Requires elevationServiceUrl in config.json to point to a qwc-elevation-service . The print height profile functionality requires a template located at assets/templates/heightprofileprint.html with containing a container element with id=heightprofilecontainer. Property Type Description Default value heighProfilePrecision number The precision of displayed and exported values (0: no decimals, 0.1: 1 decimal position, etc). 0 height number The height of the height profile widget in pixels. 150 samples number The number of elevation samples to query. 500 Help \u00b6 Displays a custom help dialog in a sidebar. Define the help contents by specifying the bodyContentsFragmentUrl prop. Property Type Description Default value bodyContentsFragmentUrl string URL to a document containing a HTML fragment to display in the Help sidebar. undefined side string The side of the application on which to display the sidebar. 'right' HomeButton \u00b6 Map button for reverting to the home extent of the theme. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 5 Identify \u00b6 Displays queried feature attributes. Uses WMS GetFeatureInfo to query features and displays the result in table, as a HTML fragment or as plain text based on the supported GetFeatureInfo format. Extendable in combination with the qwc-feature-info-service , which provides support for customized queries and templates for the result presentation. Property Type Description Default value attributeCalculator func Optional function for computing derived attributes. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. undefined attributeTransform func Optional function for transforming attribute values. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. undefined clearResultsOnClose bool Whether to clear the identify results when exiting the identify tool. true customExporters array Optional list of custom exporters to offer along with the built-in exporters. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. [] displayResultTree bool Whether to display a tree overview of results (as opposed to a flat list of results). true enableExport {bool, array} Whether to enable the export functionality. Either true|false or a list of single allowed formats (builtin formats: json , geojson , csv , csvzip ) true exitTaskOnResultsClose bool Whether to clear the task when the results window is closed. undefined exportGeometry bool Whether to include the geometry in exported features. Default: true . true featureInfoReturnsLayerName bool Whether to assume that XML GetFeatureInfo responses specify the technical layer name in the name attribute, rather than the layer title. true geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 240, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false } initialRadius number The initial radius of the identify dialog in radius mode. 50 initialRadiusUnits string The initial radius units of the identify dialog in radius mode. One of 'meters', 'feet', 'kilometers', 'miles'. 'meters' replaceImageUrls bool Whether to replace an attribute value containing an URL to an image with an inline image. true LayerCatalog \u00b6 Displays a pre-configured catalog of external layers in a window. Configured through a catalog JSON containing a tree of external layer identifiers. Example: { \"catalog\": [ { \"title\": \"Bauzonen\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.are.bauzonen\" }, { \"title\": \"Gew\u00e4sserschutz\", \"resource\": \"wms:https://geo.so.ch/api/wms#ch.so.afu.gewaesserschutz[50]\" }, { \"title\": \"Landeskarten\", \"sublayers\": [ { \"title\": \"Landeskarte 1:1 Million | LK1000\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.pixelkarte-farbe-pk1000.noscale\" }, { \"title\": \"Landeskarte 1:100`000 | LK100\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.pixelkarte-farbe-pk100.noscale\" } ] } ] } Property Type Description Default value catalogUrl string The URL to the catalog JSON file. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 320, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false } LayerTree \u00b6 Displays the map layer tree in a sidebar. The print legend functionality requires a template located at assets/templates/legendprint.html with containing a container element with id=legendcontainer. Property Type Description Default value addLayerSeparator func Whether to allow adding separator entries in the layer tree, useful for organizing the tree. undefined allowCompare bool Whether to enable the compare function. Requires the MapCompare plugin. true allowImport bool Whether to allow importing external layers. true allowMapTips bool Whether to allow enabling map tips. true bboxDependentLegend {bool, string} Whether to display a BBOX dependent legend. Can be true|false|\"theme\" , latter means only for theme layers. false enableLegendPrint bool Whether to enable the legend print functionality. true enableServiceInfo bool Whether to display a service info button to display the WMS service metadata. true enableVisibleFilter bool Whether to display a button to filter invisible layers from the layertree. true extraLegendParameters string Additional parameters to pass to the GetLegendGraphics request- undefined flattenGroups bool Whether to display a flat layer tree, omitting any groups. false grayUnchecked bool Whether to display unchecked layers gray in the layertree. true groupTogglesSublayers bool Whether toggling a group also toggles all sublayers. false infoInSettings bool Whether to display the layer info button inside the layer settings menu rather than next to the layer title. true layerInfoGeometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default layer info window geometry with size, position and docking status. { initialWidth: 480, initialHeight: 480, initialX: null, initialY: null, initiallyDocked: false } scaleDependentLegend {bool, string} Whether to display a scale dependent legend. Can be true|false|\"theme\" , latter means only for theme layers. undefined showLegendIcons bool Whether to display legend icons. true showQueryableIcon bool Whether to display the queryable icon to indicate that a layer is identifyable. true showRootEntry bool Whether to display the root entry of the layertree. true showToggleAllLayersCheckbox bool Whether to display a checkbox to toggle all layers. true side string The side of the application on which to display the sidebar. 'right' width string The initial width of the layertree, as a CSS width string. \"25em\" LocateButton \u00b6 Map button for controling the locate (GPS) state. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 2 LoginUser \u00b6 Displays the currently logged in user. Property Type Description Default value MapPlugin \u00b6 The main map component. Property Type Description Default value mapOptions { zoomDuration: number, enableRotation: bool, rotation: number, panStepSize: number, panPageSize: number, constrainExtent: bool, } Zoom duration in ms, rotation in degrees, panStepSize and panPageSize as fraction of map width/height. {} showLoading bool Whether to display the loading spinner when layers are loading. true swipeGeometryTypeBlacklist [string] A list of layer geometry types to ignore when determining the top-most layer to compare. [] swipeLayerNameBlacklist [string] A list of layer names to ignore when determining the top-most layer to compare. You can use * as a whildcard character. [] toolsOptions object Map tool configuraiton options. Refer to the sample config.json. {} MapComparePlugin \u00b6 Allows comparing the top layer with the rest of the map. Activated through a checkbox in the LayerTree. Property Type Description Default value MapCopyright \u00b6 Displays layer attributions in the bottom right corner of the map. Property Type Description Default value prefixCopyrightsWithLayerNames bool Whether to prepend the layer name to the attribution string. undefined showThemeCopyrightOnly bool Whether to only display the attribution of the theme, omitting external layers. undefined MapExport \u00b6 Allows exporting a selected portion of the map to a variety of formats. Property Type Description Default value allowedFormats [string] Whitelist of allowed export format mimetypes. If empty, supported formats are listed. undefined allowedScales {[number], bool} List of scales at which to export the map. If empty, scale can be freely specified. If false , the map can only be exported at the current scale. undefined defaultFormat string Default export format mimetype. If empty, first available format is used. undefined defaultScaleFactor number The factor to apply to the map scale to determine the initial export map scale (if allowedScales is not false ). 0.5 dpis [number] List of dpis at which to export the map. If empty, the default server dpi is used. undefined exportExternalLayers bool Whether to include external layers in the image. Requires QGIS Server 3.x! true formatConfiguration { format: [{ name: string, extraQuery: string, formatOptions: string, baseLayer: string, }], } Custom export configuration per format. If more than one configuration per format is provided, a selection combo will be displayed. extraQuery will be appended to the query string (replacing any existing parameters). formatOptions will be passed as FORMAT_OPTIONS. baseLayer will be appended to the LAYERS instead of the background layer. undefined pageSizes [{ name: string, width: number, height: number, }] List of image sizes to offer, in addition to the free-hand selection. The width and height are in millimeters. [ {name: '15 x 15 cm', width: 150, height: 150}, {name: '30 x 30 cm', width: 300, height: 300} ] side string The side of the application on which to display the sidebar. 'right' MapInfoTooltip \u00b6 Provides map context information when right-clicking on the map. Displays the coordinates at the picked position by default. If elevationServiceUrl in config.json to points to a qwc-elevation-service , the height at the picked position is also displayed. If mapInfoService in config.json points to a qwc-mapinfo-service , additional custom information according to the qwc-mapinfo-service configuration is returned. You can pass additional plugin components to the MapInfoTooltip in appConfig.js : MapInfoTooltipPlugin: MapInfoTooltipPlugin([FirstPlugin, SecondPlugin]) where a Plugin is a React component of the form class MapInfoTooltipPlugin extends React.Component { static propTypes = { point: PropTypes.object, closePopup: PropTypes.func } render() { return ...; } }; Property Type Description Default value cooPrecision number The number of decimal places to display for metric/imperial coordinates. 0 degreeCooPrecision number The number of decimal places to display for degree coordinates. 4 elevationPrecision number The number of decimal places to display for elevation values. 0 plugins array Additional plugin components for the map info tooltip. [] MapLegend \u00b6 Displays the map legend in a floating dialog. The user can toggle whether to display only layers which are enabled, visible in the current extent and/or visible at the current scale. Property Type Description Default value addGroupTitles bool Whether to add group titles to the legend. false addLayerTitles bool Whether to add layer titles to the legend. Note that often the legend image itself already contains the layer title. false bboxDependentLegend bool Whether to display a BBOX-dependent legend by default. false extraLegendParameters string Extra parameters to add to the GetLegendGraphics request. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 320, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false } onlyVisibleLegend bool Whether to only include enabled layers in the legend by default. false scaleDependentLegend bool Whether to display a scale-dependent legend by default. false MapTip \u00b6 Displays maptips by hovering over features on the map. Queries the map tips configured in the QGIS layer properites over GetFeatureInfo. The map tip needs to be configured in QGIS Layer Properties \u2192 Display. Property Type Description Default value layerFeatureCount number The maximum number of feature maptips to display for a single layer. 5 Measure \u00b6 Allows measuring points/lines/areas on the map. Property Type Description Default value showMeasureModeSwitcher bool Whether to show the widget to switch between measure modes. true snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true NewsPopup \u00b6 Displays a newsletter in a popup dialog. The popup won't be dispayed anymore, if the user chooses so, until a newer revision is published (specified via newsRev prop). Property Type Description Default value newsDocument string URL to the news HTML document to display in the popup. undefined newsRev string Revision of the document. undefined Print \u00b6 Invokes QGIS Server WMS GetPrint to print the map to PDF. Uses the print layouts defined in the QGIS project. Property Type Description Default value allowGeoPdfExport bool Whether to allow GeoPDF export. Requires QGIS Server 3.32 or newer. undefined defaultDpi number The default print dpi. 300 defaultScaleFactor number The factor to apply to the map scale to determine the initial print map scale. 0.5 displayRotation bool Whether to display the map rotation control. true formats [string] Export layout format mimetypes. If empty, supported formats are listed. If format is not supported by QGIS Server, print will fail undefined gridInitiallyEnabled bool Whether the grid is enabled by default. false hideAutopopulatedFields bool Whether to hide form fields which contain autopopulated values (i.e. search result label). undefined inlinePrintOutput bool Whether to display the print output in an inline dialog instead triggering a download. false printExternalLayers bool Whether to print external layers. Requires QGIS Server 3.x! true scaleFactor number Scale factor to apply to line widths, font sizes, ... of redlining drawings passed to GetPrint. 1.9 side string The side of the application on which to display the sidebar. 'right' ProcessNotifications \u00b6 Adds support for displaying notifications of background processes. Only useful for third-party plugins which use this functionality. Property Type Description Default value RasterExport \u00b6 Allows exporting a selected portion of the map to an image (\"screenshot\"). Deprecated. Use the MapExport plugin instead. Property Type Description Default value allowedFormats [string] Whitelist of allowed export format mimetypes. If empty, supported formats are listed. undefined allowedScales [number] List of scales at which to export the map. undefined defaultFormat string Default export format mimetype. If empty, first available format is used. undefined defaultScaleFactor number The factor to apply to the map scale to determine the initial export map scale. 0.5 dpis [number] List of dpis at which to export the map. If empty, the default server dpi is used. undefined exportExternalLayers bool Whether to include external layers in the image. Requires QGIS Server 3.x! true pageSizes [{ name: string, width: number, height: number, }] List of image sizes to offer, in addition to the free-hand selection. The width and height are in millimeters. [ {name: '15 x 15 cm', width: 150, height: 150}, {name: '30 x 30 cm', width: 300, height: 300} ] side string The side of the application on which to display the sidebar. 'right' Redlining \u00b6 Allows drawing figures and text labels on the map. Property Type Description Default value allowGeometryLabels bool Whether to allow labeling geometric figures. true snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true Routing \u00b6 Compute routes and isochrones. Requites routingServiceUrl in config.json pointing to a Valhalla routing service. Property Type Description Default value enabledModes [string] List of enabled routing modes. [\"auto\", \"heavyvehicle\", \"transit\", \"bicycle\", \"pedestrian\"] enabledProviders [string] List of search providers to use for routing location search. [\"coordinates\", \"nominatim\"] geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 320, initialHeight: 640, initialX: 0, initialY: 0, initiallyDocked: true } ScratchDrawing \u00b6 Task which which can be invoked by other tools to draw a geometry and pass it to a callback. Only useful for third-party code, i.e. over the JavaScript API. Invoke as setCurrentTask(\"ScratchDrawing\", null, null, {callback: <function(features, crs)>}); Property Type Description Default value Settings \u00b6 Settings panel. Allows configuring language and color scheme. Property Type Description Default value colorSchemes [{ title: string, titleMsgId: string, value: string, }] List of available color schemes. Value is the css class name, title/titleMsgId the display name. [] languages [{ title: string, titleMsgId: string, value: string, }] List of available languages. Value is the lang code, title/titleMsgId the display name. [] showDefaultThemeSelector bool Whether to show a selector to set the default theme/bookmark (of a logged in user). true side string The side of the application on which to display the sidebar. 'right' Share \u00b6 Share the current map as a URL/permalink. Compact permalinks will be generated if permalinkServiceUrl in config.json points to a qwc-permalink-service . Property Type Description Default value showLink bool Show the map URL. true showQRCode bool Show the QR code of the map URL. true showSocials {bool, [string]} Show the social buttons. Either true or false to enable/disable all, or an array of specific buttons to display (possible choices: email , facebook , twitter , linkedin , whatsapp ). true side string The side of the application on which to display the sidebar. 'right' StartupMarker \u00b6 Displays a marker when starting up the viewer. The marked is displayed in the center of the map if c=<x>,<y>&hc=1 is set in the URL. Property Type Description Default value removeMode string When to remove the marker. Possible choices: onpan, onzoom, onclickonmarker. 'onpan' TaskButton \u00b6 Generic map button to launch a task. Property Type Description Default value icon string The icon name. undefined mode string The task mode. undefined position number The position slot index of the map button, from the bottom (0: bottom slot). 1 task string The task name. undefined ThemeSwitcher \u00b6 Theme switcher panel. Property Type Description Default value collapsibleGroups bool Whether to allow collapsing theme groups. undefined showLayerAfterChangeTheme bool Whether to show the LayerTree by default after switching the theme. false showThemeFilter bool Wether to show the theme filter field in the top bar. * true side string The side of the application on which to display the sidebar. 'right' themeLayersListWindowSize { width: number, height: number, } The default window size for the theme layers dialog. {width: 400, height: 300} width string Default width as a CSS string. \"50%\" TimeManager \u00b6 Allows controling the time dimension of temporal WMS layers. Property Type Description Default value cursorFormat string The format of the time cursor label. Either date , time or datetime . \"datetime\" dateFormat string The date format in the time controls, i.e. YYYY-MM-DD. \"YYYY-MM-DD[\\n]HH:mm:ss\" defaultAnimationInterval number The default interval for the temporal animation, in seconds. 1 defaultEnabled bool Default for TimeManager enabled when loading application. true or false false defaultFeatureCount number The default number of features that will be requested. 100 defaultStepSize number The default step size for the temporal animation, in step units. 1 defaultStepUnit string The default step unit for the temporal animation, one of ms , s , m , d , M , y , 10y , 100y \"d\" defaultTimelineDisplay string The default timeline display mode. One of hidden , minimal , features , layers . undefined defaultTimelineMode string The default timeline mode. One of fixed , infinite . \"fixed\" markerConfiguration { markersAvailable: bool, gradient: [string], markerOffset: array, markerPins: bool, } The feature marker configuration. { markersAvailable: true, gradient: [\"#f7af7d\", \"#eacc6e\", \"#fef89a\", \"#c5e09b\", \"#a3d29c\", \"#7cc096\", \"#79c8c5\", \"#34afce\"], markerOffset: [0, 0], markerPins: true } stepUnits [string] The available temporal anumation step units. [\"s\", \"m\", \"h\", \"d\", \"M\", \"y\"] TopBar \u00b6 Top bar, containing the logo, searchbar, task buttons and app menu. Property Type Description Default value appMenuClearsTask bool Whether opening the app menu clears the active task. undefined appMenuFilterField bool Whether to display the filter field in the app menu. undefined appMenuShortcut string The shortcut for tiggering the app menu, i.e. alt+shift+m. undefined appMenuVisibleOnStartup bool Whether to open the app menu on application startup. undefined logoFormat string The logo file format. \"svg\" logoSrc string The logo image URL if a different source than the default assets/img/logo. and assets/img/logo-mobile. is desired. undefined logoUrl string The hyperlink to open when the logo is clicked. undefined menuItems array The menu items. Refer to the corresponding chapter of the viewer documentation and the sample config.json. [] searchOptions object Options passed down to the search component. See the searchOption propType of the used search component. {} toolbarItems array The toolbar. Refer to the corresponding chapter of the viewer documentation and the sample config.json. [] toolbarItemsShortcutPrefix string The keyboard shortcut prefix for triggering toolbar tasks. I.e. alt+shift. The task are then triggered by +{1,2,3,...} for the 1st, 2nd, 3rd... toolbar icon. undefined ZoomButton \u00b6 Map button for zooming the map. Two specific plugins exist: ZoomInPlugin and ZoomOutPlugin, which are instances of ZoomButton for the respective zoom directions. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). undefined","title":"Qwc2 plugins"},{"location":"references/qwc2_plugins/#plugin-reference","text":"API AttributeTable Authentication BackgroundSwitcher Bookmark BottomBar Cyclomedia DxfExport Editing FeatureForm FeatureSearch HeightProfilePrintDialog HeightProfile Help HomeButton Identify LayerCatalog LayerTree LocateButton LoginUser MapPlugin MapComparePlugin MapCopyright MapExport MapInfoTooltip MapLegend MapTip Measure NewsPopup Print ProcessNotifications RasterExport Redlining Routing ScratchDrawing Settings Share StartupMarker TaskButton ThemeSwitcher TimeManager TopBar ZoomButton","title":"Plugin reference"},{"location":"references/qwc2_plugins/#api","text":"Exposes an API for interacting with QWC2 via window.qwc2 . All following action functions are available: display layers locate map task theme windows I.e. setCurrentTask is available via window.qwc2.setCurrentTask . Additionally, the following functions are available: window.qwc2.addExternalLayer(resource, beforeLayerName = null) Convenience method for adding an external layer. resource : An external resource of the form wms:<service_url>#<layername> or wmts:<capabilities_url>#<layername> . beforeLayerName : Insert the new layer before the layer with the specified name. If null or the layer does not exist, the layer is inserted on top. window.qwc2.drawScratch(geomType, message, drawMultiple, callback, style = null) Deprecated, use window.qwc2.drawGeometry instead. window.qwc2.drawGeometry(geomType, message, callback, options) Draw geometries, and return these as GeoJSON to the calling application. geomType : Point , LineString , Polygon , Circle or Box . message : A descriptive string to display in the tool taskbar. callback : A function(result, crs) , the result being an array of GeoJSON features, and crs the projection of the feature coordinates. options : Optional configuration: drawMultiple : Whether to allow drawing multiple geometries (default: false ). style : A custom style object to use for the drawn features, in the same format as DEFAULT_FEATURE_STYLE in qwc2/utils/FeatureStyles.js . initialFeatures : Array of initial geometries. snapping : Whether snapping is available while drawing (default: false ). snappingActive : Whether snapping is initially active (default: false ) window.qwc2.getState() Return the current application state. Property Type Description Default value","title":"API"},{"location":"references/qwc2_plugins/#attributetable","text":"Displaying the attribute table of layers in a dialog. To make a layer available in the attribute table, create a a data resource and matching permissions for it in the qwc-admin-gui . The attribute table works for both read-only as well as read-write data resources. This plugin queries the dataset via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ). Property Type Description Default value allowAddForGeometryLayers bool Whether to allow adding records for datasets which have a geometry column. undefined showEditFormButton bool Whether to show a button to open the edit form for selected layer. Requires the Editing plugin to be enabled. true zoomLevel number The zoom level for zooming to point features. 1000","title":"AttributeTable"},{"location":"references/qwc2_plugins/#authentication","text":"Handles authentication Invokes the the authentication service specified by authServiceUrl in config.json . Property Type Description Default value clearLayerParam bool Whether to clear the layer parameter from the URL on login. undefined idleTimeout number An idle timeout in seconds after which the user is automatically logged of. undefined logoutTargetUrl string An URL to redirect to on logout, instead of the viewer URL. undefined requireLogin bool Whether authentication is required, i.e. the viewer automatically redirects to the login page if no user is authenticated. undefined","title":"Authentication"},{"location":"references/qwc2_plugins/#backgroundswitcher","text":"Map button for switching the background layer. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 0","title":"BackgroundSwitcher"},{"location":"references/qwc2_plugins/#bookmark","text":"Allows managing user bookmarks. Bookmarks are only allowed for authenticated users. Requires permalinkServiceUrl to point to a qwc-permalink-service . Property Type Description Default value side string The side of the application on which to display the sidebar. 'right'","title":"Bookmark"},{"location":"references/qwc2_plugins/#bottombar","text":"Bottom bar, displaying mouse coordinate, scale, etc. Property Type Description Default value displayCoordinates bool Whether to display the coordinates in the bottom bar. true displayScales bool Whether to display the scale in the bottom bar. true termsUrl string The URL of the terms label anchor. undefined termsUrlIcon string Icon of the terms inline window. Relevant only when termsUrlTarget is iframe . undefined termsUrlTarget string The target where to open the terms URL. If iframe , it will be displayed in an inline window, otherwise in a new tab. undefined viewertitleUrl string The URL of the viewer title label anchor. undefined viewertitleUrlIcon string Icon of the viewer title inline window. Relevant only when viewertitleUrl is iframe . undefined viewertitleUrlTarget string The target where to open the viewer title URL. If iframe , it will be displayed in an inline window, otherwise in a new tab. undefined","title":"BottomBar"},{"location":"references/qwc2_plugins/#cyclomedia","text":"Cyclomedia integration for QWC2. Property Type Description Default value apikey string The Cyclomedia API key undefined clientId string OAuth client ID. undefined cyclomediaVersion string The cyclomedia version. '23.6' displayMeasurements bool Whether to display Cyclomedia measurement geometries on the map. true geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 480, initialHeight: 640, initialX: 0, initialY: 0, initiallyDocked: false } loginRedirectUri string The relative path to the redirect login handling of oauth. undefined logoutRedirectUri string The relative path to the redirect logout handling of oauth. undefined maxMapScale number The maximum map scale above which the recordings WFS won't be displayed. 10000 projection string The projection to use for Cyclomedia. 'EPSG:3857'","title":"Cyclomedia"},{"location":"references/qwc2_plugins/#dxfexport","text":"Allows exporting a selected extent of the map as DXF. Uses the DXF format support of QGIS Server. Deprecated. Use the MapExport plugin instead. Property Type Description Default value formatOptions string Optional format options to pass to QGIS Server via FORMAT_OPTIONS. undefined layerOptions [{ label: string, layers: string, }] Optional choice of layer sets to pass to QGIS Server via LAYERS. undefined serviceUrl string Optional URL invoked on export instead of the default QGIS Server URL. undefined","title":"DxfExport"},{"location":"references/qwc2_plugins/#editing","text":"Allows editing geometries and attributes of datasets. The attribute form is generated from the QGIS attribute form configuration. This plugin queries the dataset via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ). Property Type Description Default value allowCloneGeometry bool Whether to enable the \"Clone existing geometry\" functionality. true side string The side of the application on which to display the sidebar. 'right' snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true width string The default width of the editing sidebar, as a CSS width string. \"30em\"","title":"Editing"},{"location":"references/qwc2_plugins/#featureform","text":"Displays queried feature attributes in a form. The attribute form is generated from the QGIS attribute form configuration. If the dataset it editable, allows editing the attributes directly in the displayed form. This plugin queries the feature via the editing service specified by editServiceUrl in config.json (by default the qwc-data-service ), rather than over WMS GetFeatureInfo like the Identify plugin. Can be used as default identify tool by setting \"identifyTool\": \"FeatureForm\" in config.json . Property Type Description Default value exitTaskOnResultsClose bool Whether to clear the task when the results window is closed. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 320, initialHeight: 480, initialX: 0, initialY: 0, initiallyDocked: false }","title":"FeatureForm"},{"location":"references/qwc2_plugins/#heightprofile","text":"Displays a height profile along a measured line. Triggered automatically when a line is measured via the Measure plugin. Requires elevationServiceUrl in config.json to point to a qwc-elevation-service . The print height profile functionality requires a template located at assets/templates/heightprofileprint.html with containing a container element with id=heightprofilecontainer. Property Type Description Default value heighProfilePrecision number The precision of displayed and exported values (0: no decimals, 0.1: 1 decimal position, etc). 0 height number The height of the height profile widget in pixels. 150 samples number The number of elevation samples to query. 500","title":"HeightProfile"},{"location":"references/qwc2_plugins/#help","text":"Displays a custom help dialog in a sidebar. Define the help contents by specifying the bodyContentsFragmentUrl prop. Property Type Description Default value bodyContentsFragmentUrl string URL to a document containing a HTML fragment to display in the Help sidebar. undefined side string The side of the application on which to display the sidebar. 'right'","title":"Help"},{"location":"references/qwc2_plugins/#homebutton","text":"Map button for reverting to the home extent of the theme. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 5","title":"HomeButton"},{"location":"references/qwc2_plugins/#identify","text":"Displays queried feature attributes. Uses WMS GetFeatureInfo to query features and displays the result in table, as a HTML fragment or as plain text based on the supported GetFeatureInfo format. Extendable in combination with the qwc-feature-info-service , which provides support for customized queries and templates for the result presentation. Property Type Description Default value attributeCalculator func Optional function for computing derived attributes. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. undefined attributeTransform func Optional function for transforming attribute values. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. undefined clearResultsOnClose bool Whether to clear the identify results when exiting the identify tool. true customExporters array Optional list of custom exporters to offer along with the built-in exporters. See js/IdentifyExtensions.js for details. This prop can be specified in the appConfig.js cfg section. [] displayResultTree bool Whether to display a tree overview of results (as opposed to a flat list of results). true enableExport {bool, array} Whether to enable the export functionality. Either true|false or a list of single allowed formats (builtin formats: json , geojson , csv , csvzip ) true exitTaskOnResultsClose bool Whether to clear the task when the results window is closed. undefined exportGeometry bool Whether to include the geometry in exported features. Default: true . true featureInfoReturnsLayerName bool Whether to assume that XML GetFeatureInfo responses specify the technical layer name in the name attribute, rather than the layer title. true geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 240, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false } initialRadius number The initial radius of the identify dialog in radius mode. 50 initialRadiusUnits string The initial radius units of the identify dialog in radius mode. One of 'meters', 'feet', 'kilometers', 'miles'. 'meters' replaceImageUrls bool Whether to replace an attribute value containing an URL to an image with an inline image. true","title":"Identify"},{"location":"references/qwc2_plugins/#layercatalog","text":"Displays a pre-configured catalog of external layers in a window. Configured through a catalog JSON containing a tree of external layer identifiers. Example: { \"catalog\": [ { \"title\": \"Bauzonen\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.are.bauzonen\" }, { \"title\": \"Gew\u00e4sserschutz\", \"resource\": \"wms:https://geo.so.ch/api/wms#ch.so.afu.gewaesserschutz[50]\" }, { \"title\": \"Landeskarten\", \"sublayers\": [ { \"title\": \"Landeskarte 1:1 Million | LK1000\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.pixelkarte-farbe-pk1000.noscale\" }, { \"title\": \"Landeskarte 1:100`000 | LK100\", \"resource\": \"wms:http://wms.geo.admin.ch#ch.swisstopo.pixelkarte-farbe-pk100.noscale\" } ] } ] } Property Type Description Default value catalogUrl string The URL to the catalog JSON file. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 320, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false }","title":"LayerCatalog"},{"location":"references/qwc2_plugins/#layertree","text":"Displays the map layer tree in a sidebar. The print legend functionality requires a template located at assets/templates/legendprint.html with containing a container element with id=legendcontainer. Property Type Description Default value addLayerSeparator func Whether to allow adding separator entries in the layer tree, useful for organizing the tree. undefined allowCompare bool Whether to enable the compare function. Requires the MapCompare plugin. true allowImport bool Whether to allow importing external layers. true allowMapTips bool Whether to allow enabling map tips. true bboxDependentLegend {bool, string} Whether to display a BBOX dependent legend. Can be true|false|\"theme\" , latter means only for theme layers. false enableLegendPrint bool Whether to enable the legend print functionality. true enableServiceInfo bool Whether to display a service info button to display the WMS service metadata. true enableVisibleFilter bool Whether to display a button to filter invisible layers from the layertree. true extraLegendParameters string Additional parameters to pass to the GetLegendGraphics request- undefined flattenGroups bool Whether to display a flat layer tree, omitting any groups. false grayUnchecked bool Whether to display unchecked layers gray in the layertree. true groupTogglesSublayers bool Whether toggling a group also toggles all sublayers. false infoInSettings bool Whether to display the layer info button inside the layer settings menu rather than next to the layer title. true layerInfoGeometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default layer info window geometry with size, position and docking status. { initialWidth: 480, initialHeight: 480, initialX: null, initialY: null, initiallyDocked: false } scaleDependentLegend {bool, string} Whether to display a scale dependent legend. Can be true|false|\"theme\" , latter means only for theme layers. undefined showLegendIcons bool Whether to display legend icons. true showQueryableIcon bool Whether to display the queryable icon to indicate that a layer is identifyable. true showRootEntry bool Whether to display the root entry of the layertree. true showToggleAllLayersCheckbox bool Whether to display a checkbox to toggle all layers. true side string The side of the application on which to display the sidebar. 'right' width string The initial width of the layertree, as a CSS width string. \"25em\"","title":"LayerTree"},{"location":"references/qwc2_plugins/#locatebutton","text":"Map button for controling the locate (GPS) state. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). 2","title":"LocateButton"},{"location":"references/qwc2_plugins/#loginuser","text":"Displays the currently logged in user. Property Type Description Default value","title":"LoginUser"},{"location":"references/qwc2_plugins/#mapplugin","text":"The main map component. Property Type Description Default value mapOptions { zoomDuration: number, enableRotation: bool, rotation: number, panStepSize: number, panPageSize: number, constrainExtent: bool, } Zoom duration in ms, rotation in degrees, panStepSize and panPageSize as fraction of map width/height. {} showLoading bool Whether to display the loading spinner when layers are loading. true swipeGeometryTypeBlacklist [string] A list of layer geometry types to ignore when determining the top-most layer to compare. [] swipeLayerNameBlacklist [string] A list of layer names to ignore when determining the top-most layer to compare. You can use * as a whildcard character. [] toolsOptions object Map tool configuraiton options. Refer to the sample config.json. {}","title":"MapPlugin"},{"location":"references/qwc2_plugins/#mapcompareplugin","text":"Allows comparing the top layer with the rest of the map. Activated through a checkbox in the LayerTree. Property Type Description Default value","title":"MapComparePlugin"},{"location":"references/qwc2_plugins/#mapcopyright","text":"Displays layer attributions in the bottom right corner of the map. Property Type Description Default value prefixCopyrightsWithLayerNames bool Whether to prepend the layer name to the attribution string. undefined showThemeCopyrightOnly bool Whether to only display the attribution of the theme, omitting external layers. undefined","title":"MapCopyright"},{"location":"references/qwc2_plugins/#mapexport","text":"Allows exporting a selected portion of the map to a variety of formats. Property Type Description Default value allowedFormats [string] Whitelist of allowed export format mimetypes. If empty, supported formats are listed. undefined allowedScales {[number], bool} List of scales at which to export the map. If empty, scale can be freely specified. If false , the map can only be exported at the current scale. undefined defaultFormat string Default export format mimetype. If empty, first available format is used. undefined defaultScaleFactor number The factor to apply to the map scale to determine the initial export map scale (if allowedScales is not false ). 0.5 dpis [number] List of dpis at which to export the map. If empty, the default server dpi is used. undefined exportExternalLayers bool Whether to include external layers in the image. Requires QGIS Server 3.x! true formatConfiguration { format: [{ name: string, extraQuery: string, formatOptions: string, baseLayer: string, }], } Custom export configuration per format. If more than one configuration per format is provided, a selection combo will be displayed. extraQuery will be appended to the query string (replacing any existing parameters). formatOptions will be passed as FORMAT_OPTIONS. baseLayer will be appended to the LAYERS instead of the background layer. undefined pageSizes [{ name: string, width: number, height: number, }] List of image sizes to offer, in addition to the free-hand selection. The width and height are in millimeters. [ {name: '15 x 15 cm', width: 150, height: 150}, {name: '30 x 30 cm', width: 300, height: 300} ] side string The side of the application on which to display the sidebar. 'right'","title":"MapExport"},{"location":"references/qwc2_plugins/#mapinfotooltip","text":"Provides map context information when right-clicking on the map. Displays the coordinates at the picked position by default. If elevationServiceUrl in config.json to points to a qwc-elevation-service , the height at the picked position is also displayed. If mapInfoService in config.json points to a qwc-mapinfo-service , additional custom information according to the qwc-mapinfo-service configuration is returned. You can pass additional plugin components to the MapInfoTooltip in appConfig.js : MapInfoTooltipPlugin: MapInfoTooltipPlugin([FirstPlugin, SecondPlugin]) where a Plugin is a React component of the form class MapInfoTooltipPlugin extends React.Component { static propTypes = { point: PropTypes.object, closePopup: PropTypes.func } render() { return ...; } }; Property Type Description Default value cooPrecision number The number of decimal places to display for metric/imperial coordinates. 0 degreeCooPrecision number The number of decimal places to display for degree coordinates. 4 elevationPrecision number The number of decimal places to display for elevation values. 0 plugins array Additional plugin components for the map info tooltip. []","title":"MapInfoTooltip"},{"location":"references/qwc2_plugins/#maplegend","text":"Displays the map legend in a floating dialog. The user can toggle whether to display only layers which are enabled, visible in the current extent and/or visible at the current scale. Property Type Description Default value addGroupTitles bool Whether to add group titles to the legend. false addLayerTitles bool Whether to add layer titles to the legend. Note that often the legend image itself already contains the layer title. false bboxDependentLegend bool Whether to display a BBOX-dependent legend by default. false extraLegendParameters string Extra parameters to add to the GetLegendGraphics request. undefined geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 320, initialHeight: 320, initialX: 0, initialY: 0, initiallyDocked: false } onlyVisibleLegend bool Whether to only include enabled layers in the legend by default. false scaleDependentLegend bool Whether to display a scale-dependent legend by default. false","title":"MapLegend"},{"location":"references/qwc2_plugins/#maptip","text":"Displays maptips by hovering over features on the map. Queries the map tips configured in the QGIS layer properites over GetFeatureInfo. The map tip needs to be configured in QGIS Layer Properties \u2192 Display. Property Type Description Default value layerFeatureCount number The maximum number of feature maptips to display for a single layer. 5","title":"MapTip"},{"location":"references/qwc2_plugins/#measure","text":"Allows measuring points/lines/areas on the map. Property Type Description Default value showMeasureModeSwitcher bool Whether to show the widget to switch between measure modes. true snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true","title":"Measure"},{"location":"references/qwc2_plugins/#newspopup","text":"Displays a newsletter in a popup dialog. The popup won't be dispayed anymore, if the user chooses so, until a newer revision is published (specified via newsRev prop). Property Type Description Default value newsDocument string URL to the news HTML document to display in the popup. undefined newsRev string Revision of the document. undefined","title":"NewsPopup"},{"location":"references/qwc2_plugins/#print","text":"Invokes QGIS Server WMS GetPrint to print the map to PDF. Uses the print layouts defined in the QGIS project. Property Type Description Default value allowGeoPdfExport bool Whether to allow GeoPDF export. Requires QGIS Server 3.32 or newer. undefined defaultDpi number The default print dpi. 300 defaultScaleFactor number The factor to apply to the map scale to determine the initial print map scale. 0.5 displayRotation bool Whether to display the map rotation control. true formats [string] Export layout format mimetypes. If empty, supported formats are listed. If format is not supported by QGIS Server, print will fail undefined gridInitiallyEnabled bool Whether the grid is enabled by default. false hideAutopopulatedFields bool Whether to hide form fields which contain autopopulated values (i.e. search result label). undefined inlinePrintOutput bool Whether to display the print output in an inline dialog instead triggering a download. false printExternalLayers bool Whether to print external layers. Requires QGIS Server 3.x! true scaleFactor number Scale factor to apply to line widths, font sizes, ... of redlining drawings passed to GetPrint. 1.9 side string The side of the application on which to display the sidebar. 'right'","title":"Print"},{"location":"references/qwc2_plugins/#processnotifications","text":"Adds support for displaying notifications of background processes. Only useful for third-party plugins which use this functionality. Property Type Description Default value","title":"ProcessNotifications"},{"location":"references/qwc2_plugins/#rasterexport","text":"Allows exporting a selected portion of the map to an image (\"screenshot\"). Deprecated. Use the MapExport plugin instead. Property Type Description Default value allowedFormats [string] Whitelist of allowed export format mimetypes. If empty, supported formats are listed. undefined allowedScales [number] List of scales at which to export the map. undefined defaultFormat string Default export format mimetype. If empty, first available format is used. undefined defaultScaleFactor number The factor to apply to the map scale to determine the initial export map scale. 0.5 dpis [number] List of dpis at which to export the map. If empty, the default server dpi is used. undefined exportExternalLayers bool Whether to include external layers in the image. Requires QGIS Server 3.x! true pageSizes [{ name: string, width: number, height: number, }] List of image sizes to offer, in addition to the free-hand selection. The width and height are in millimeters. [ {name: '15 x 15 cm', width: 150, height: 150}, {name: '30 x 30 cm', width: 300, height: 300} ] side string The side of the application on which to display the sidebar. 'right'","title":"RasterExport"},{"location":"references/qwc2_plugins/#redlining","text":"Allows drawing figures and text labels on the map. Property Type Description Default value allowGeometryLabels bool Whether to allow labeling geometric figures. true snapping bool Whether snapping is available when editing. true snappingActive {bool, string} Whether snapping is enabled by default when editing. Either false , edge , vertex or true (i.e. both vertex and edge). true","title":"Redlining"},{"location":"references/qwc2_plugins/#routing","text":"Compute routes and isochrones. Requites routingServiceUrl in config.json pointing to a Valhalla routing service. Property Type Description Default value enabledModes [string] List of enabled routing modes. [\"auto\", \"heavyvehicle\", \"transit\", \"bicycle\", \"pedestrian\"] enabledProviders [string] List of search providers to use for routing location search. [\"coordinates\", \"nominatim\"] geometry { initialWidth: number, initialHeight: number, initialX: number, initialY: number, initiallyDocked: bool, } Default window geometry with size, position and docking status. { initialWidth: 320, initialHeight: 640, initialX: 0, initialY: 0, initiallyDocked: true }","title":"Routing"},{"location":"references/qwc2_plugins/#scratchdrawing","text":"Task which which can be invoked by other tools to draw a geometry and pass it to a callback. Only useful for third-party code, i.e. over the JavaScript API. Invoke as setCurrentTask(\"ScratchDrawing\", null, null, {callback: <function(features, crs)>}); Property Type Description Default value","title":"ScratchDrawing"},{"location":"references/qwc2_plugins/#settings","text":"Settings panel. Allows configuring language and color scheme. Property Type Description Default value colorSchemes [{ title: string, titleMsgId: string, value: string, }] List of available color schemes. Value is the css class name, title/titleMsgId the display name. [] languages [{ title: string, titleMsgId: string, value: string, }] List of available languages. Value is the lang code, title/titleMsgId the display name. [] showDefaultThemeSelector bool Whether to show a selector to set the default theme/bookmark (of a logged in user). true side string The side of the application on which to display the sidebar. 'right'","title":"Settings"},{"location":"references/qwc2_plugins/#share","text":"Share the current map as a URL/permalink. Compact permalinks will be generated if permalinkServiceUrl in config.json points to a qwc-permalink-service . Property Type Description Default value showLink bool Show the map URL. true showQRCode bool Show the QR code of the map URL. true showSocials {bool, [string]} Show the social buttons. Either true or false to enable/disable all, or an array of specific buttons to display (possible choices: email , facebook , twitter , linkedin , whatsapp ). true side string The side of the application on which to display the sidebar. 'right'","title":"Share"},{"location":"references/qwc2_plugins/#startupmarker","text":"Displays a marker when starting up the viewer. The marked is displayed in the center of the map if c=<x>,<y>&hc=1 is set in the URL. Property Type Description Default value removeMode string When to remove the marker. Possible choices: onpan, onzoom, onclickonmarker. 'onpan'","title":"StartupMarker"},{"location":"references/qwc2_plugins/#taskbutton","text":"Generic map button to launch a task. Property Type Description Default value icon string The icon name. undefined mode string The task mode. undefined position number The position slot index of the map button, from the bottom (0: bottom slot). 1 task string The task name. undefined","title":"TaskButton"},{"location":"references/qwc2_plugins/#themeswitcher","text":"Theme switcher panel. Property Type Description Default value collapsibleGroups bool Whether to allow collapsing theme groups. undefined showLayerAfterChangeTheme bool Whether to show the LayerTree by default after switching the theme. false showThemeFilter bool Wether to show the theme filter field in the top bar. * true side string The side of the application on which to display the sidebar. 'right' themeLayersListWindowSize { width: number, height: number, } The default window size for the theme layers dialog. {width: 400, height: 300} width string Default width as a CSS string. \"50%\"","title":"ThemeSwitcher"},{"location":"references/qwc2_plugins/#timemanager","text":"Allows controling the time dimension of temporal WMS layers. Property Type Description Default value cursorFormat string The format of the time cursor label. Either date , time or datetime . \"datetime\" dateFormat string The date format in the time controls, i.e. YYYY-MM-DD. \"YYYY-MM-DD[\\n]HH:mm:ss\" defaultAnimationInterval number The default interval for the temporal animation, in seconds. 1 defaultEnabled bool Default for TimeManager enabled when loading application. true or false false defaultFeatureCount number The default number of features that will be requested. 100 defaultStepSize number The default step size for the temporal animation, in step units. 1 defaultStepUnit string The default step unit for the temporal animation, one of ms , s , m , d , M , y , 10y , 100y \"d\" defaultTimelineDisplay string The default timeline display mode. One of hidden , minimal , features , layers . undefined defaultTimelineMode string The default timeline mode. One of fixed , infinite . \"fixed\" markerConfiguration { markersAvailable: bool, gradient: [string], markerOffset: array, markerPins: bool, } The feature marker configuration. { markersAvailable: true, gradient: [\"#f7af7d\", \"#eacc6e\", \"#fef89a\", \"#c5e09b\", \"#a3d29c\", \"#7cc096\", \"#79c8c5\", \"#34afce\"], markerOffset: [0, 0], markerPins: true } stepUnits [string] The available temporal anumation step units. [\"s\", \"m\", \"h\", \"d\", \"M\", \"y\"]","title":"TimeManager"},{"location":"references/qwc2_plugins/#topbar","text":"Top bar, containing the logo, searchbar, task buttons and app menu. Property Type Description Default value appMenuClearsTask bool Whether opening the app menu clears the active task. undefined appMenuFilterField bool Whether to display the filter field in the app menu. undefined appMenuShortcut string The shortcut for tiggering the app menu, i.e. alt+shift+m. undefined appMenuVisibleOnStartup bool Whether to open the app menu on application startup. undefined logoFormat string The logo file format. \"svg\" logoSrc string The logo image URL if a different source than the default assets/img/logo. and assets/img/logo-mobile. is desired. undefined logoUrl string The hyperlink to open when the logo is clicked. undefined menuItems array The menu items. Refer to the corresponding chapter of the viewer documentation and the sample config.json. [] searchOptions object Options passed down to the search component. See the searchOption propType of the used search component. {} toolbarItems array The toolbar. Refer to the corresponding chapter of the viewer documentation and the sample config.json. [] toolbarItemsShortcutPrefix string The keyboard shortcut prefix for triggering toolbar tasks. I.e. alt+shift. The task are then triggered by +{1,2,3,...} for the 1st, 2nd, 3rd... toolbar icon. undefined","title":"TopBar"},{"location":"references/qwc2_plugins/#zoombutton","text":"Map button for zooming the map. Two specific plugins exist: ZoomInPlugin and ZoomOutPlugin, which are instances of ZoomButton for the respective zoom directions. Property Type Description Default value position number The position slot index of the map button, from the bottom (0: bottom slot). undefined","title":"ZoomButton"},{"location":"release_notes/QWC2UpgradeNotes/","text":"Upgrade notes \u00b6 This document describes incompatibilites and other aspects which QWC2 applications need to address when updating against the latest qwc2 submodule. When updating the qwc2 submodule, run yarn install to ensure the dependencies are up to date! Update to qwc2 submodule revision 38b242a (01.11.2023) \u00b6 Import svg as inline assets qwc2/utils/FeatureStyles.js now imports some SVG files as inline assets. For this to work, you need to list .svg in the assets/inline loader rules in webpack.config.js : { test: /(.woff|.woff2|.png|.jpg|.gif|.svg)/, type: 'asset/inline' } Babel plugin changes The class-properties and object-rest-spread proposals have been merged to the ECMAScript standard, and the respective babel plugins in .babelrc.json need to be changed to \"plugins\": [ \"@babel/plugin-transform-class-properties\", \"@babel/plugin-transform-object-rest-spread\" ] Update to qwc2 submodule revision 7409372 (23.08.2023) \u00b6 MapInfoToolTip plugin instantation change The instantation of the MapInfoToolTip in appConfig.js needs to be changed to MapInfoTooltipPlugin: MapInfoTooltipPlugin() Note the extra braces at the end. As a new feature, you can pass a list of plugins to the MapInfoTooltipPlugin . Configuration changes The window size configuration of various plugins has been uniformized to the geometry config prop (rather than occasionally windowSize before). Affected plugins are: FeatureForm , Identify , LayerCatalog , LayerTree , MapLegend . Please check the respective plugin reference for more details on the new format. Update to qwc2 submodule revision 96aaa51 (09.02.2023) \u00b6 Config setting change Geodesic measurement mode is now configured at toplevel in config.json via geodesicMeasurements: true|false rather than below Map -> cfg -> toolsOptions -> MeasurementSupport . Update to qwc2 submodule revision 7a474e3 (23.01.2023) \u00b6 Dependency update Most dependencies have been updated to the latest version. The following adjustments need to be performed by hand: Use createRoot in app.jsx , see the demo app.jsx . Update uuid imports in external components, examples: import {v1 as uuidv1} from 'uuid'; import {v4 as uuidv4} from 'uuid'; and then instead of uuid.v1() use uuidv1() etc. Adjust webpack.config.js from { test: /\\.mjs$/, type: 'javascript/auto' } to { test: /(.mjs|.js)$/, type: 'javascript/auto' } Update to qwc2 submodule revision fe063b6 (13.01.2023) \u00b6 Reworked search provider support The arguments and expected behaviour of the provider onSearch and getResultGeometry have changed. Please refer to the documentation chapter in the Documentation . Consult js/SearchProviders.js and static/assets/searchProviders.js for full examples. It is now possible to define search providers in a external JS file loaded at runtime rather than compiled into the application bundle. See static/assets/searchProviders.js , which is loaded by index.html . js/SearchProviders.js now only includes coordinates and nominatim as built-in search providers for the demo application. The searchProviderFactory function has been removed from js/SearchProviders.js . Instead, custom parameters to be passed to a provider can be specified directly in the theme item searchProviders entry: { key: \"<providerkey2>\", params: {...} } and read from searchParams.cfgParams in the provider onSearch function. Load Help dialog contents from HTML fragment Instead of requiring users to implement the renderHelp function in js/Help.jsx , for simple cases the users can provide a plain HTML fragment which is loaded at runtime from the assets. Consult the Documentation . Update to qwc2 submodule revision 90c613a (28.11.2022) \u00b6 Reworked color scheme support The styleConfig.js file is deprecated and won't be honoured anymore for the styling of core QWC2 components. Instead, base theme colors can be defined via CSS, refer to documentation for details. Renamed config variable The maxGetUrlLength variable in config.json has been renamed to wmsMaxGetUrlLength . Update to qwc2 submodule revision e357152 (27.06.2022) \u00b6 Reworked interface for handling 1:N relations between qwc2 and qwc-data-service The interface for reading and writing 1:n relations between the qwc2 and the qwc-data-service was reworked. If you are using the qwc-data-service, make sure to update to qwc-data-service-v2022.06.27 or later when updating to qwc2 submodule revision e357152 or later. Update to qwc2 submodule revision 76ec566 (17.06.2022) \u00b6 Refactoring of editing components The editing components have been heavily refactored internally. The changes are mostly transparent, but two points are important: The editDataset field of an editConfig entry is now mandatory. editConfig s generated by qwc-config-generator already write this field, so this applies only to manually written editConfig s for use outside of qwc-services. The changeEditingState action has been replaced by setEditContext (and clearEditContext ). This allows for storing and switching between multiple edit contexts in the application state. Custom components interacting with editing also should be changed to verify that the current edit context is the desired one. Update to qwc2 submodule revision 7929587 (21.04.2022) \u00b6 Format change for external layer resource strings For a short period of time (after submodule revision cb870a1 ), QWC2 supported external resource strings in the form wms:<service_url>#<layername>?<options> . The format has been changed to wms:<service_url>?<options>#<layername> i.e. by moving the query portion before the hash portion, which is inline with the URL scheme format. Update to qwc2 submodule revision eb5e358 (25.10.2021) \u00b6 Update to Webpack 5, React 17 Synchronize the webpack.config.js and the dependencies and package scripts from the demo app package.json . Note that the build package script is now an alias with the prod script. Remove the dist/App.js script include from index.html , it is now added automatically by Webpack. All static files of the app need to be placed below a toplevel static folder, which will contain assets , translations , config.json , themes.json , etc. The themesConfig script will write themes.json to that folder. In custom components, replace any use of Swipeable from react-swipeable : import {Swipeable} from 'react-swipeable'; import {Swipeable} from 'qwc2/components/Swipeable'; Update to qwc2 submodule revision e08aed5 (18.05.2021) \u00b6 Reworked Identify plugin The Identify plugin has been completely reworked, and the IdentifyRegion plugin has been merged into the Identify plugin: Remove the IdentifyRegion plugin from js/appConfig.js and config.json Create menu/toolbar entries in config.json for the region identify tool mode by specifying \"mode\": \"Region\" , i.e.: {\"key\": \"Identify\", \"icon\": \"identify_region\", \"mode\": \"Region\"}, The translation message id identifyregion.info has been changed to infotool.clickhelpPolygon (unless the string is overridden, yarn run tsupdate will take care of this automatically). Note : The identify tool state is now handled internally by the Identify component, it does not store the results in the global application state anymore. Update to qwc2 submodule revision 317eea3 (03.01.2021) \u00b6 Updated dependencies Many dependencies in the qwc2 submodule have been update, please run yarn install to update them in your application. In the demo app, also many dependencies in the application package.json have been updated. It's recommended to synchronize the application package.json and webpack.config.js with the ones of the demo app. Plugins do not need to specify the reducers they use anymore Action files register now the reducers they use automatically, so whenever a symbol is imported from an action file, the respective reducer is automatically enabled. If you have a custom action/reducer file outside the qwc2 submodule folder (i.e. js/{actions,reducers}/myfunctionality.js ), you should add lines similar to import ReducerIndex from 'qwc2/reducers/index'; import myfunctionalityReducer from '/reducers/myfunctionality'; ReducerIndex.register(\"myfunctionality\", myfunctionalityReducer); to js/actions/myfunctionality.js . If you have custom QWC2 plugins, remove the reducers field of the plugin export. ES6 imports QWC2 now uses the ES6 import/export syntax throughout. For instance const Icon = require('qwc2/components/Icon'); const {addLayer} = require('qwc2/actions/layers'); become import Icon from 'qwc2/components/Icon'; import {addLayer} from 'qwc2/actions/layers'; And module.exports = MyClass; becomes export default MyClass; resp. function foo() {...}; function bar() {...}; module.exports = {foo, bar}; becomes export function foo() {...}; export function bar() {...}; In particular, js/appConfig.js needs to be heavily adapted. Update to React 16.14 As per React 16.3, various component lifecycle methods have been deprecated. All qwc2 core components are updated to avoid their use. Custom components should also be updated. See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html for details. Reworked localization Localization in QWC2 has been reworked: - Instead of <Message msgId=\"<msgid>\" /> and LocaleUtils.getMessageById() , use LocaleUtils.tr(<msgid>) . - For message IDs which are not translated directly via LocaleUtils.tr , use LocaleUtils.trmsg to mark the string as a message ID. - The Message component has been dropped. - Static message IDs are now picked up automatically by updateTranslations.js (invoked by yarn run tsupdate ). - Message IDs built at runtime will beed to be specified manually in tsconfig.json in the extra_strings section. - The translation files are now called translations/<lang>-<COUNTRY>.json rather than translations/data.<lang>-<COUNTRY> . The format of the files remains unchanged. - The supportedLocales section in appConfig.js needs to be dropped. - Previously, the fallback locale was specified as fallbacklocale in config.json. Now, it must be specified as defaultLocaleData in appConfig.js . Default editing interface now shipped in the qwc2 submodule The js/EditingInterface.js in the demo app has been moved to qwc2/utils/EditingInterface.js . This is the interface which acts as a counterpart to the QWC data service . If you want to use a custom editing interface, you can still do so, passing it to the Editing plugin in appConfig.js as before. Assets and translations path now optional Assets and translations path can now be omitted from the config.json , and are resolved to assets resp translations relative to the index.html path of the QWC2 application by default. Use ConfigUtils.getAssetsPath() and ConfigUtils.getTranslationsPath() in your custom components instead of ConfigUtils.getConfigProp . You can still specify assetsPath and translationsPath in config.json to override the default values. Changes to map click point/feature state The previous state.map.clickPoint and state.map.clickFeature have been merged to a single state.map.click . The clickFeatureOnMap action has been removed.","title":"QWC2 upgrade notes"},{"location":"release_notes/QWC2UpgradeNotes/#upgrade-notes","text":"This document describes incompatibilites and other aspects which QWC2 applications need to address when updating against the latest qwc2 submodule. When updating the qwc2 submodule, run yarn install to ensure the dependencies are up to date!","title":"Upgrade notes"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-38b242a-01112023","text":"Import svg as inline assets qwc2/utils/FeatureStyles.js now imports some SVG files as inline assets. For this to work, you need to list .svg in the assets/inline loader rules in webpack.config.js : { test: /(.woff|.woff2|.png|.jpg|.gif|.svg)/, type: 'asset/inline' } Babel plugin changes The class-properties and object-rest-spread proposals have been merged to the ECMAScript standard, and the respective babel plugins in .babelrc.json need to be changed to \"plugins\": [ \"@babel/plugin-transform-class-properties\", \"@babel/plugin-transform-object-rest-spread\" ]","title":"Update to qwc2 submodule revision 38b242a (01.11.2023)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-7409372-23082023","text":"MapInfoToolTip plugin instantation change The instantation of the MapInfoToolTip in appConfig.js needs to be changed to MapInfoTooltipPlugin: MapInfoTooltipPlugin() Note the extra braces at the end. As a new feature, you can pass a list of plugins to the MapInfoTooltipPlugin . Configuration changes The window size configuration of various plugins has been uniformized to the geometry config prop (rather than occasionally windowSize before). Affected plugins are: FeatureForm , Identify , LayerCatalog , LayerTree , MapLegend . Please check the respective plugin reference for more details on the new format.","title":"Update to qwc2 submodule revision 7409372 (23.08.2023)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-96aaa51-09022023","text":"Config setting change Geodesic measurement mode is now configured at toplevel in config.json via geodesicMeasurements: true|false rather than below Map -> cfg -> toolsOptions -> MeasurementSupport .","title":"Update to qwc2 submodule revision 96aaa51 (09.02.2023)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-7a474e3-23012023","text":"Dependency update Most dependencies have been updated to the latest version. The following adjustments need to be performed by hand: Use createRoot in app.jsx , see the demo app.jsx . Update uuid imports in external components, examples: import {v1 as uuidv1} from 'uuid'; import {v4 as uuidv4} from 'uuid'; and then instead of uuid.v1() use uuidv1() etc. Adjust webpack.config.js from { test: /\\.mjs$/, type: 'javascript/auto' } to { test: /(.mjs|.js)$/, type: 'javascript/auto' }","title":"Update to qwc2 submodule revision 7a474e3 (23.01.2023)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-fe063b6-13012023","text":"Reworked search provider support The arguments and expected behaviour of the provider onSearch and getResultGeometry have changed. Please refer to the documentation chapter in the Documentation . Consult js/SearchProviders.js and static/assets/searchProviders.js for full examples. It is now possible to define search providers in a external JS file loaded at runtime rather than compiled into the application bundle. See static/assets/searchProviders.js , which is loaded by index.html . js/SearchProviders.js now only includes coordinates and nominatim as built-in search providers for the demo application. The searchProviderFactory function has been removed from js/SearchProviders.js . Instead, custom parameters to be passed to a provider can be specified directly in the theme item searchProviders entry: { key: \"<providerkey2>\", params: {...} } and read from searchParams.cfgParams in the provider onSearch function. Load Help dialog contents from HTML fragment Instead of requiring users to implement the renderHelp function in js/Help.jsx , for simple cases the users can provide a plain HTML fragment which is loaded at runtime from the assets. Consult the Documentation .","title":"Update to qwc2 submodule revision fe063b6 (13.01.2023)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-90c613a-28112022","text":"Reworked color scheme support The styleConfig.js file is deprecated and won't be honoured anymore for the styling of core QWC2 components. Instead, base theme colors can be defined via CSS, refer to documentation for details. Renamed config variable The maxGetUrlLength variable in config.json has been renamed to wmsMaxGetUrlLength .","title":"Update to qwc2 submodule revision 90c613a (28.11.2022)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-e357152-27062022","text":"Reworked interface for handling 1:N relations between qwc2 and qwc-data-service The interface for reading and writing 1:n relations between the qwc2 and the qwc-data-service was reworked. If you are using the qwc-data-service, make sure to update to qwc-data-service-v2022.06.27 or later when updating to qwc2 submodule revision e357152 or later.","title":"Update to qwc2 submodule revision e357152 (27.06.2022)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-76ec566-17062022","text":"Refactoring of editing components The editing components have been heavily refactored internally. The changes are mostly transparent, but two points are important: The editDataset field of an editConfig entry is now mandatory. editConfig s generated by qwc-config-generator already write this field, so this applies only to manually written editConfig s for use outside of qwc-services. The changeEditingState action has been replaced by setEditContext (and clearEditContext ). This allows for storing and switching between multiple edit contexts in the application state. Custom components interacting with editing also should be changed to verify that the current edit context is the desired one.","title":"Update to qwc2 submodule revision 76ec566 (17.06.2022)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-7929587-21042022","text":"Format change for external layer resource strings For a short period of time (after submodule revision cb870a1 ), QWC2 supported external resource strings in the form wms:<service_url>#<layername>?<options> . The format has been changed to wms:<service_url>?<options>#<layername> i.e. by moving the query portion before the hash portion, which is inline with the URL scheme format.","title":"Update to qwc2 submodule revision 7929587 (21.04.2022)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-eb5e358-25102021","text":"Update to Webpack 5, React 17 Synchronize the webpack.config.js and the dependencies and package scripts from the demo app package.json . Note that the build package script is now an alias with the prod script. Remove the dist/App.js script include from index.html , it is now added automatically by Webpack. All static files of the app need to be placed below a toplevel static folder, which will contain assets , translations , config.json , themes.json , etc. The themesConfig script will write themes.json to that folder. In custom components, replace any use of Swipeable from react-swipeable : import {Swipeable} from 'react-swipeable'; import {Swipeable} from 'qwc2/components/Swipeable';","title":"Update to qwc2 submodule revision eb5e358 (25.10.2021)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-e08aed5-18052021","text":"Reworked Identify plugin The Identify plugin has been completely reworked, and the IdentifyRegion plugin has been merged into the Identify plugin: Remove the IdentifyRegion plugin from js/appConfig.js and config.json Create menu/toolbar entries in config.json for the region identify tool mode by specifying \"mode\": \"Region\" , i.e.: {\"key\": \"Identify\", \"icon\": \"identify_region\", \"mode\": \"Region\"}, The translation message id identifyregion.info has been changed to infotool.clickhelpPolygon (unless the string is overridden, yarn run tsupdate will take care of this automatically). Note : The identify tool state is now handled internally by the Identify component, it does not store the results in the global application state anymore.","title":"Update to qwc2 submodule revision e08aed5 (18.05.2021)"},{"location":"release_notes/QWC2UpgradeNotes/#update-to-qwc2-submodule-revision-317eea3-03012021","text":"Updated dependencies Many dependencies in the qwc2 submodule have been update, please run yarn install to update them in your application. In the demo app, also many dependencies in the application package.json have been updated. It's recommended to synchronize the application package.json and webpack.config.js with the ones of the demo app. Plugins do not need to specify the reducers they use anymore Action files register now the reducers they use automatically, so whenever a symbol is imported from an action file, the respective reducer is automatically enabled. If you have a custom action/reducer file outside the qwc2 submodule folder (i.e. js/{actions,reducers}/myfunctionality.js ), you should add lines similar to import ReducerIndex from 'qwc2/reducers/index'; import myfunctionalityReducer from '/reducers/myfunctionality'; ReducerIndex.register(\"myfunctionality\", myfunctionalityReducer); to js/actions/myfunctionality.js . If you have custom QWC2 plugins, remove the reducers field of the plugin export. ES6 imports QWC2 now uses the ES6 import/export syntax throughout. For instance const Icon = require('qwc2/components/Icon'); const {addLayer} = require('qwc2/actions/layers'); become import Icon from 'qwc2/components/Icon'; import {addLayer} from 'qwc2/actions/layers'; And module.exports = MyClass; becomes export default MyClass; resp. function foo() {...}; function bar() {...}; module.exports = {foo, bar}; becomes export function foo() {...}; export function bar() {...}; In particular, js/appConfig.js needs to be heavily adapted. Update to React 16.14 As per React 16.3, various component lifecycle methods have been deprecated. All qwc2 core components are updated to avoid their use. Custom components should also be updated. See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html for details. Reworked localization Localization in QWC2 has been reworked: - Instead of <Message msgId=\"<msgid>\" /> and LocaleUtils.getMessageById() , use LocaleUtils.tr(<msgid>) . - For message IDs which are not translated directly via LocaleUtils.tr , use LocaleUtils.trmsg to mark the string as a message ID. - The Message component has been dropped. - Static message IDs are now picked up automatically by updateTranslations.js (invoked by yarn run tsupdate ). - Message IDs built at runtime will beed to be specified manually in tsconfig.json in the extra_strings section. - The translation files are now called translations/<lang>-<COUNTRY>.json rather than translations/data.<lang>-<COUNTRY> . The format of the files remains unchanged. - The supportedLocales section in appConfig.js needs to be dropped. - Previously, the fallback locale was specified as fallbacklocale in config.json. Now, it must be specified as defaultLocaleData in appConfig.js . Default editing interface now shipped in the qwc2 submodule The js/EditingInterface.js in the demo app has been moved to qwc2/utils/EditingInterface.js . This is the interface which acts as a counterpart to the QWC data service . If you want to use a custom editing interface, you can still do so, passing it to the Editing plugin in appConfig.js as before. Assets and translations path now optional Assets and translations path can now be omitted from the config.json , and are resolved to assets resp translations relative to the index.html path of the QWC2 application by default. Use ConfigUtils.getAssetsPath() and ConfigUtils.getTranslationsPath() in your custom components instead of ConfigUtils.getConfigProp . You can still specify assetsPath and translationsPath in config.json to override the default values. Changes to map click point/feature state The previous state.map.clickPoint and state.map.clickFeature have been merged to a single state.map.click . The clickFeatureOnMap action has been removed.","title":"Update to qwc2 submodule revision 317eea3 (03.01.2021)"},{"location":"release_notes/QwcDockerUpgradeNotes/","text":"2023.10.24 qwc-base-db rework \u00b6 As of 2023.10.24 the QWC base DB image has been reworked as follows: Migrations were moved to the qwc-base-db repository, the qwc-config-db repository is now obsolete. A new qwc-base-db-migrate image helps migrating dockerized or external config DBs. Demo data will be initialized by an optional setup script in qwc-docker , the qwc-demo-db repository is now obsolete. To use the new images, replace qwc-postgis: image: docker.io/sourcepole/qwc-demo-db:<version> ... with qwc-postgis: image: sourcepole/qwc-base-db:<pg_version> environment: POSTGRES_PASSWORD: '' # TODO: Set your postgres password here! volumes: - ./volumes/db:/var/lib/postgresql/docker # If you don't want/need the demo data, you can remove this line - ./volumes/demo-data/setup-demo-data.sh:/docker-entrypoint-initdb.d/2_setup-demo-data.sh ports: - \"127.0.0.1:5439:5432\" healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U postgres\"] interval: 10s qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro depends_on: qwc-postgis: condition: service_healthy in your docker-compose.yml . Note: It is now mandatory to set your own POSTGRES_PASSWORD . You can keep your previous volumes/db postgres data folder, but it is recommended to make a backup. The sourcepole/qwc-base-db images are versioned according to the Postgres major version (i.e. 13, 14, 15, ...). The sourcepole/qwc-base-db-migrate images are versioned by date ( vYYYY.MM.DD ) See the qwc-base-db README for more information. As of 2023.10.24 the name of the database was changed to the more generic qwc_services instead of qwc_demo . Upgrading to qwc service images v2022.01.26 \u00b6 The qwc-uwsgi-base images have been changed to allow for configurable UID/GID of the uwsgi process. The default is UID=33 and GID=33 , you can override it by setting the SERVICE_UID and SERVICE_GID environment variables in docker-compose.yml . As a consequence, /var/www is not necessarily anymore the home directory of the user wich runs uwsgi , and therefore the qwc-uwsgi-base images now set ENV PGSERVICEFILE=\"/srv/pg_service.conf\" . You'll therefore need to adapt your pg_service.conf volume mounts in your docker-compose.yml to point to that location, i.e. [...] - ./pg_service.conf:/srv/pg_service.conf:ro [...] Upgrading to qwc-config-generator-v2022.01.12 \u00b6 scanned_projects_path_prefix has been dropped as a config setting. Instead, qgis_projects_scan_base_dir must be a directory below qgis_projects_base_dir , and the prefix is automatically computed internally. scanned_projects_path_prefix has been added as a config setting as the output path for preprocessed qgis projects. It must be a directory below qgis_projects_base_dir to which the config service is allowed to write. Upgrading from qwc service images v2021.x to v2022.01.08 or later \u00b6 Starting with v2022.01.08, the requirements of all services where updated to use Flask-JWT-Extended 4.3.1. Flask-JWT-4.x changes the JWT format (see 4.0.0 Breaking Changes ), which can result in QWC Services returning a Missing claim: identity error message. To avoid this: * Change your JWT secret key in .env . * Ensure all services are upgraded to v2022.01.12 or later (if such a version exists). Please omit v2022.01.08 and v2022.01.11.","title":"qwc-docker upgrade notes"},{"location":"release_notes/QwcDockerUpgradeNotes/#20231024-qwc-base-db-rework","text":"As of 2023.10.24 the QWC base DB image has been reworked as follows: Migrations were moved to the qwc-base-db repository, the qwc-config-db repository is now obsolete. A new qwc-base-db-migrate image helps migrating dockerized or external config DBs. Demo data will be initialized by an optional setup script in qwc-docker , the qwc-demo-db repository is now obsolete. To use the new images, replace qwc-postgis: image: docker.io/sourcepole/qwc-demo-db:<version> ... with qwc-postgis: image: sourcepole/qwc-base-db:<pg_version> environment: POSTGRES_PASSWORD: '' # TODO: Set your postgres password here! volumes: - ./volumes/db:/var/lib/postgresql/docker # If you don't want/need the demo data, you can remove this line - ./volumes/demo-data/setup-demo-data.sh:/docker-entrypoint-initdb.d/2_setup-demo-data.sh ports: - \"127.0.0.1:5439:5432\" healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U postgres\"] interval: 10s qwc-config-db-migrate: image: sourcepole/qwc-base-db-migrate:<version> volumes: - ./pg_service.conf:/tmp/pg_service.conf:ro depends_on: qwc-postgis: condition: service_healthy in your docker-compose.yml . Note: It is now mandatory to set your own POSTGRES_PASSWORD . You can keep your previous volumes/db postgres data folder, but it is recommended to make a backup. The sourcepole/qwc-base-db images are versioned according to the Postgres major version (i.e. 13, 14, 15, ...). The sourcepole/qwc-base-db-migrate images are versioned by date ( vYYYY.MM.DD ) See the qwc-base-db README for more information. As of 2023.10.24 the name of the database was changed to the more generic qwc_services instead of qwc_demo .","title":"2023.10.24 qwc-base-db rework"},{"location":"release_notes/QwcDockerUpgradeNotes/#upgrading-to-qwc-service-images-v20220126","text":"The qwc-uwsgi-base images have been changed to allow for configurable UID/GID of the uwsgi process. The default is UID=33 and GID=33 , you can override it by setting the SERVICE_UID and SERVICE_GID environment variables in docker-compose.yml . As a consequence, /var/www is not necessarily anymore the home directory of the user wich runs uwsgi , and therefore the qwc-uwsgi-base images now set ENV PGSERVICEFILE=\"/srv/pg_service.conf\" . You'll therefore need to adapt your pg_service.conf volume mounts in your docker-compose.yml to point to that location, i.e. [...] - ./pg_service.conf:/srv/pg_service.conf:ro [...]","title":"Upgrading to qwc service images v2022.01.26"},{"location":"release_notes/QwcDockerUpgradeNotes/#upgrading-to-qwc-config-generator-v20220112","text":"scanned_projects_path_prefix has been dropped as a config setting. Instead, qgis_projects_scan_base_dir must be a directory below qgis_projects_base_dir , and the prefix is automatically computed internally. scanned_projects_path_prefix has been added as a config setting as the output path for preprocessed qgis projects. It must be a directory below qgis_projects_base_dir to which the config service is allowed to write.","title":"Upgrading to qwc-config-generator-v2022.01.12"},{"location":"release_notes/QwcDockerUpgradeNotes/#upgrading-from-qwc-service-images-v2021x-to-v20220108-or-later","text":"Starting with v2022.01.08, the requirements of all services where updated to use Flask-JWT-Extended 4.3.1. Flask-JWT-4.x changes the JWT format (see 4.0.0 Breaking Changes ), which can result in QWC Services returning a Missing claim: identity error message. To avoid this: * Change your JWT secret key in .env . * Ensure all services are upgraded to v2022.01.12 or later (if such a version exists). Please omit v2022.01.08 and v2022.01.11.","title":"Upgrading from qwc service images v2021.x to v2022.01.08 or later"},{"location":"topics/Editing/","text":"Editing \u00b6 QWC2 offers comprehensive editing support through a variety of plugins: The Editing plugin allows creating, editing and removing features of an editable vector layer. It supports editing both geometry and attributes, displaying customizeable attribute forms. The AttributeTable plugin also allows creating, editing and removing features of an editable vector layer. It displays all features of the editable layer in a tabularized view, and allows editing attributes, but not geometries. Noteably, it will allow editing geometryless datasets. The FeatureForm works similarly to the feature-info, but will display the feature form according to the QGIS form configuration, and also allows editing the attributes and geometry of a picked feature. It can configured as identifyTool instead of the standard Identify plugin in config.json . Quick start \u00b6 The easiest way to use the editing functionality is by using the pre-configured qwc-docker with the qwc-data-service and qwc-config-generator . To make a layer editable, follow these steps: The datasource of the layer needs to be a PostGIS database. In particular, make sure that a primary key is configured for your dataset! Configure the QGIS PostgreSQL connection using a service name, add the corresponding service definition to your host pg_service.conf and to qwc-docker/pg_service-write.conf . Make sure your database host is reachable within the docker containers! Especially when your primary key field type is serial , you'll want to mark the corresponding field widget type as Hidden in the QGIS Attributes Form settings. Create a Data resource as child of the corresponding Map resource in the administration backend, and create a new permission for the Map and Data resources for the roles which should be allowed to edit the layer. Note: if you leave the \"Write\" checkbox in the Data resource permission unchecked, the dataset will be available as read-only, which can be useful if you want to use the AttributeTable and/or FeatureForm to just display the dataset without allowing any edits. Run the config generator from the administration backend to update service configuration. Designing the edit forms \u00b6 Much of the power of the QWC2 editing functionality resides in its fully customizeable forms, providing support for different input widget types, file uploads and 1:N relations. The qwc-config-generator will automatically generate forms based on the configuration specified in the QGIS Layer Properties \u2192 Attributes Form. If Autogenerate or Drag and Drop Designer is chosen, a corresponding Qt UI form is automatically generated for QWC2 in assets/forms/autogen . If Provide ui-file is chosen, the specified UI form will copied to assets/forms/autogen . Localized translation forms are supported. To this end, place a Qt Translation file called <form_basename>_<lang>.ts next to the designer form <form_basename>.ui , where lang is a language or language/country code, i.e. en or en-US . There is a translateui.sh script to help generate the translation files. Example: ./translateui.sh .../qwc2/assets/forms/form.ui de it fr File uploads \u00b6 You can configure a text-like field of your dataset as an upload field as follows: For Autogenerated and Drag and Drop Designer forms configuration, set the widget type to Attachment. You can set the file type filter in the widget configuration under Display button to open file dialog -> Filter , in the format *.ext1, *.ext2 . For manually created Qt Designed Ui forms, use a QLineEdit widget named <fieldname>__upload , and optionally as the text value of the QLineEdit set a comma separated list of suggested file extensions. Attachments are stored on disk below the attachments_base_dir defined in the data service configuration, and the path to the attachments stored in the dataset. Note: If you set the format constraint to *.jpeg and your browser has access to a camera, QWC2 will allow you to directly upload images captured from the camera. You can set the allowed attachment extensions and maximum file sizes globally by setting allowed_attachment_extensions and max_attachment_file_size in the data service configuration. You may also need to set/increase client_max_body_size in qwc-docker/api-gateway/nginx.conf . You can also set the allowed attachment extensions and maximum file sizes per dataset by setting max_attachment_file_size_per_dataset and allowed_extensions_per_dataset in the data service configuration. If you set the per dataset values, the global settings will be disregarded (i.e. if an attachment satisfies the per dataset constraint it will be considered valid, even if it violates the global constraint). To ensure the uploaded files are properly rendered as download links in GetFeatureInfo responses, use the qwc-feature-info-service . Key-value relations (value mappings) \u00b6 Value relations allow mapping technical values to a human readable display strings, displayed in a combo box. For Autogenerated and Drag and Drop Designer , use widgets of type Value Relation . In a manually created Qt-Designer Ui form, you can use key-value relations for combo box entries by naming the QComboBox widget according to the following pattern: kvrel__<fieldname>__<kvtablename>__<kvtable_valuefield>__<kvtable_labelfield> . <kvtablename> refers to a table containing a field called <kvtable_valuefield> for the value of the entry and a field <kvtable_labelfield> for the label of the entry. For key-value relations inside a 1:N relation, use kvrel__<reltablename>__<fieldname>__<kvtablename>__<kvtable_valuefield>__<kvtable_labelfield> . Note: The relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend. Alternatively, you can set autogen_keyvaltable_datasets to true in the config generator configuration, to automatically generate resources and read-only permissions as required. 1:N relations \u00b6 1:N relations allow associating multiple child records to the target feature, displayed in a table. For Autogenerated and Drag and Drop Designer forms, configure the 1:N relation in QGIS Project \u2192 Properties \u2192 Relations. Note that the child table foreign key must refer to parent primary key. By default, a table widget similar to an attribute table will be generated to manage the relation values. If you set generate_nested_nrel_forms to true in the config generator config, the relation values will be displayed as a list of buttons which open the record in a nested form. The button label is chosen according to the following rules: The display name (Layer properties \u2192 Display \u2192 Display Name) of the referencing layer, if the expression is a single field name. The primary key value of the referencing layer. In a manually created Qt-Designer Ui form, create a widget of type QWidget , QGroupBox or QFrame named according to the pattern nrel__<reltablename>__<foreignkeyfield> , where <reltablename> is the name of the relation table and <foreignkeyfield> the name of the foreign key field in the relation table. Inside this widget, add the edit widgets for the values of the relation table. Name the widgets <reltablename>__<fieldname> . These edit widgets will be replicated for each relation record. Notes : In a manually created Qt-Designer Ui form, you can also specify a sort column for the 1:N relation in the form nrel__<reltablename>__<foreignkeyfield>__<sortcol> . If a sort-column is specified, QWC2 will display sort arrows for each entry in the relation widget. The relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend. Special form widgets \u00b6 In manually created Qt-Designer Ui forms, there are a number of special widgets you can use: Images : To display attribute values which contain an image URL as an inline image, use a QLabel named img__<fieldname> . Linked features : To display a button to choose a linked feature and edit its attributes in a nested edit form, create a QPushButton named featurelink__<linkdataset>__<fieldname> (simple join) or featurelink__<linkdataset>__<reltable>__<fieldname> in a 1:N relation. In a 1:N relation, linkdataset can be equal to reltable to edit the relation record itself in the nested form. fieldname will contain the id of the linked feature. External fields : Some times it is useful to display information from an external source in the edit form. This can be accomplished by creating a QWidget with name ext__<fieldname> and using a form preprocessor hook (see registerFormPreprocessor in QtDesignerForm.jsx to populate the field by assigning a React fragment to formData.externalFields.<fieldname> . Buttons : To add a button with a custom action, add a QPushButton with name btn__<buttonname> , and use a form preprocessor hook to set the custom function to formData.buttons.buttonname.onClick . Logging mutations \u00b6 The qwc-data-service offers some basic functionality for logging mutations: If you set upload_user_field_suffix in the data service config, the username of the last user who performed a mutation to <fieldname> will be logged to <fieldname>__<upload_user_field_suffix> . If you set edit_user_field in the data service config, the username of the last user who performed a mutation to a record with be logged to the <edit_user_field> field of the record. If you set edit_timestamp_field in the data service config, the timestamp of the last mutation to a record will be logged to the <edit_timestamp_field> field of the record. Note : for these fields to be written, ensure the qgis project is also up-to-date, i.e. that contain the up-to-date table schemas. You can set the respective field types to hidden in the QGIS layer properties to avoid them showing up in the autogenerated edit forms. Using a custom editing backend \u00b6 You can also use a custom editing backend instead of the qwc-data-service by following these steps: Implement the custom editing interface, taking default EditingInterface.js as a template. Enable the desired editing plugins in js/appConfig.js , passing your custom editing interface to Editing , AttributeTable and FeatureForm . Set up an editing backend. If you are using the qwc-config-generator , the edit configuration will be automatically generated from the QGIS project. Otherwise, you need to write a custom editConfig in themesConfig.json as follows: Entry Description { \u2063 <LayerId>: { A WMS layer ID. Should be a theme WMS layer name, to ensure the WMS is correctly refreshed. \u2063 \"layerName\": \"<LayerName>\", The layer name to show in the selection combo box. \u2063 \"editDataset\": \"<DatasetName>\", The name of the edit dataset passed to the editing interface. \u2063 \"geomType\": \"<GeomType>\", The geometry type, either Point , LineString or Polygon . \u2063 \"displayField\": \"<FieldId>\", The ID of the field to use in the feature selection menu. \u2063 \"permissions\": { A list of different write permissions to specify rights and buttons. \u2063 \"creatable\": <boolean>, If true , Draw button will appear in Editing interface and Add button in Attribute Table. \u2063 \"updatable\": <boolean>, If true , Pick button will appear in Editing interface. \u2063 \"deletable\": <boolean>, If true , Delete button will appear in Editing interface and Attribute Table. \u2063 }, \u2063 \"fields\": [{ A list of field definitions, for each exposed attribute. \u2063 \"id\": \"<FieldID>\", The field ID. \u2063 \"name\": \"<FieldName>\", The field name, as displayed in the editing form. \u2063 \"type\": \"<FieldType>\", A field type. Either bool , list or a regular HTML input element type . \u2063 \"constraints\": { Constraints for the input field. \u2063 \"values\": [<Entries>], Only if type is list : an array of arbitrary strings. \u2063 ... For regular HTML input types, the ReactJS API name of any applicable HTML input constraint , i.e. maxLength or readOnly . \u2063 } \u2063 }], \u2063 \"form\": \"<PathToUiFile>\", Optional, a QtDesigner UI file. \u2063 } } If you specify just fields , a simple form is autogenerated based on the field definitions. Alternatively you can specify the URL to a Qt Designer UI form in form (use :/<path> to specify a path below the assets folder).","title":"Editing"},{"location":"topics/Editing/#editing","text":"QWC2 offers comprehensive editing support through a variety of plugins: The Editing plugin allows creating, editing and removing features of an editable vector layer. It supports editing both geometry and attributes, displaying customizeable attribute forms. The AttributeTable plugin also allows creating, editing and removing features of an editable vector layer. It displays all features of the editable layer in a tabularized view, and allows editing attributes, but not geometries. Noteably, it will allow editing geometryless datasets. The FeatureForm works similarly to the feature-info, but will display the feature form according to the QGIS form configuration, and also allows editing the attributes and geometry of a picked feature. It can configured as identifyTool instead of the standard Identify plugin in config.json .","title":"Editing"},{"location":"topics/Editing/#quick-start","text":"The easiest way to use the editing functionality is by using the pre-configured qwc-docker with the qwc-data-service and qwc-config-generator . To make a layer editable, follow these steps: The datasource of the layer needs to be a PostGIS database. In particular, make sure that a primary key is configured for your dataset! Configure the QGIS PostgreSQL connection using a service name, add the corresponding service definition to your host pg_service.conf and to qwc-docker/pg_service-write.conf . Make sure your database host is reachable within the docker containers! Especially when your primary key field type is serial , you'll want to mark the corresponding field widget type as Hidden in the QGIS Attributes Form settings. Create a Data resource as child of the corresponding Map resource in the administration backend, and create a new permission for the Map and Data resources for the roles which should be allowed to edit the layer. Note: if you leave the \"Write\" checkbox in the Data resource permission unchecked, the dataset will be available as read-only, which can be useful if you want to use the AttributeTable and/or FeatureForm to just display the dataset without allowing any edits. Run the config generator from the administration backend to update service configuration.","title":"Quick start "},{"location":"topics/Editing/#designing-the-edit-forms","text":"Much of the power of the QWC2 editing functionality resides in its fully customizeable forms, providing support for different input widget types, file uploads and 1:N relations. The qwc-config-generator will automatically generate forms based on the configuration specified in the QGIS Layer Properties \u2192 Attributes Form. If Autogenerate or Drag and Drop Designer is chosen, a corresponding Qt UI form is automatically generated for QWC2 in assets/forms/autogen . If Provide ui-file is chosen, the specified UI form will copied to assets/forms/autogen . Localized translation forms are supported. To this end, place a Qt Translation file called <form_basename>_<lang>.ts next to the designer form <form_basename>.ui , where lang is a language or language/country code, i.e. en or en-US . There is a translateui.sh script to help generate the translation files. Example: ./translateui.sh .../qwc2/assets/forms/form.ui de it fr","title":"Designing the edit forms"},{"location":"topics/Editing/#file-uploads","text":"You can configure a text-like field of your dataset as an upload field as follows: For Autogenerated and Drag and Drop Designer forms configuration, set the widget type to Attachment. You can set the file type filter in the widget configuration under Display button to open file dialog -> Filter , in the format *.ext1, *.ext2 . For manually created Qt Designed Ui forms, use a QLineEdit widget named <fieldname>__upload , and optionally as the text value of the QLineEdit set a comma separated list of suggested file extensions. Attachments are stored on disk below the attachments_base_dir defined in the data service configuration, and the path to the attachments stored in the dataset. Note: If you set the format constraint to *.jpeg and your browser has access to a camera, QWC2 will allow you to directly upload images captured from the camera. You can set the allowed attachment extensions and maximum file sizes globally by setting allowed_attachment_extensions and max_attachment_file_size in the data service configuration. You may also need to set/increase client_max_body_size in qwc-docker/api-gateway/nginx.conf . You can also set the allowed attachment extensions and maximum file sizes per dataset by setting max_attachment_file_size_per_dataset and allowed_extensions_per_dataset in the data service configuration. If you set the per dataset values, the global settings will be disregarded (i.e. if an attachment satisfies the per dataset constraint it will be considered valid, even if it violates the global constraint). To ensure the uploaded files are properly rendered as download links in GetFeatureInfo responses, use the qwc-feature-info-service .","title":"File uploads"},{"location":"topics/Editing/#key-value-relations-value-mappings","text":"Value relations allow mapping technical values to a human readable display strings, displayed in a combo box. For Autogenerated and Drag and Drop Designer , use widgets of type Value Relation . In a manually created Qt-Designer Ui form, you can use key-value relations for combo box entries by naming the QComboBox widget according to the following pattern: kvrel__<fieldname>__<kvtablename>__<kvtable_valuefield>__<kvtable_labelfield> . <kvtablename> refers to a table containing a field called <kvtable_valuefield> for the value of the entry and a field <kvtable_labelfield> for the label of the entry. For key-value relations inside a 1:N relation, use kvrel__<reltablename>__<fieldname>__<kvtablename>__<kvtable_valuefield>__<kvtable_labelfield> . Note: The relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend. Alternatively, you can set autogen_keyvaltable_datasets to true in the config generator configuration, to automatically generate resources and read-only permissions as required.","title":"Key-value relations (value mappings)"},{"location":"topics/Editing/#1n-relations","text":"1:N relations allow associating multiple child records to the target feature, displayed in a table. For Autogenerated and Drag and Drop Designer forms, configure the 1:N relation in QGIS Project \u2192 Properties \u2192 Relations. Note that the child table foreign key must refer to parent primary key. By default, a table widget similar to an attribute table will be generated to manage the relation values. If you set generate_nested_nrel_forms to true in the config generator config, the relation values will be displayed as a list of buttons which open the record in a nested form. The button label is chosen according to the following rules: The display name (Layer properties \u2192 Display \u2192 Display Name) of the referencing layer, if the expression is a single field name. The primary key value of the referencing layer. In a manually created Qt-Designer Ui form, create a widget of type QWidget , QGroupBox or QFrame named according to the pattern nrel__<reltablename>__<foreignkeyfield> , where <reltablename> is the name of the relation table and <foreignkeyfield> the name of the foreign key field in the relation table. Inside this widget, add the edit widgets for the values of the relation table. Name the widgets <reltablename>__<fieldname> . These edit widgets will be replicated for each relation record. Notes : In a manually created Qt-Designer Ui form, you can also specify a sort column for the 1:N relation in the form nrel__<reltablename>__<foreignkeyfield>__<sortcol> . If a sort-column is specified, QWC2 will display sort arrows for each entry in the relation widget. The relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend.","title":"1:N relations"},{"location":"topics/Editing/#special-form-widgets","text":"In manually created Qt-Designer Ui forms, there are a number of special widgets you can use: Images : To display attribute values which contain an image URL as an inline image, use a QLabel named img__<fieldname> . Linked features : To display a button to choose a linked feature and edit its attributes in a nested edit form, create a QPushButton named featurelink__<linkdataset>__<fieldname> (simple join) or featurelink__<linkdataset>__<reltable>__<fieldname> in a 1:N relation. In a 1:N relation, linkdataset can be equal to reltable to edit the relation record itself in the nested form. fieldname will contain the id of the linked feature. External fields : Some times it is useful to display information from an external source in the edit form. This can be accomplished by creating a QWidget with name ext__<fieldname> and using a form preprocessor hook (see registerFormPreprocessor in QtDesignerForm.jsx to populate the field by assigning a React fragment to formData.externalFields.<fieldname> . Buttons : To add a button with a custom action, add a QPushButton with name btn__<buttonname> , and use a form preprocessor hook to set the custom function to formData.buttons.buttonname.onClick .","title":"Special form widgets"},{"location":"topics/Editing/#logging-mutations","text":"The qwc-data-service offers some basic functionality for logging mutations: If you set upload_user_field_suffix in the data service config, the username of the last user who performed a mutation to <fieldname> will be logged to <fieldname>__<upload_user_field_suffix> . If you set edit_user_field in the data service config, the username of the last user who performed a mutation to a record with be logged to the <edit_user_field> field of the record. If you set edit_timestamp_field in the data service config, the timestamp of the last mutation to a record will be logged to the <edit_timestamp_field> field of the record. Note : for these fields to be written, ensure the qgis project is also up-to-date, i.e. that contain the up-to-date table schemas. You can set the respective field types to hidden in the QGIS layer properties to avoid them showing up in the autogenerated edit forms.","title":"Logging mutations"},{"location":"topics/Editing/#using-a-custom-editing-backend","text":"You can also use a custom editing backend instead of the qwc-data-service by following these steps: Implement the custom editing interface, taking default EditingInterface.js as a template. Enable the desired editing plugins in js/appConfig.js , passing your custom editing interface to Editing , AttributeTable and FeatureForm . Set up an editing backend. If you are using the qwc-config-generator , the edit configuration will be automatically generated from the QGIS project. Otherwise, you need to write a custom editConfig in themesConfig.json as follows: Entry Description { \u2063 <LayerId>: { A WMS layer ID. Should be a theme WMS layer name, to ensure the WMS is correctly refreshed. \u2063 \"layerName\": \"<LayerName>\", The layer name to show in the selection combo box. \u2063 \"editDataset\": \"<DatasetName>\", The name of the edit dataset passed to the editing interface. \u2063 \"geomType\": \"<GeomType>\", The geometry type, either Point , LineString or Polygon . \u2063 \"displayField\": \"<FieldId>\", The ID of the field to use in the feature selection menu. \u2063 \"permissions\": { A list of different write permissions to specify rights and buttons. \u2063 \"creatable\": <boolean>, If true , Draw button will appear in Editing interface and Add button in Attribute Table. \u2063 \"updatable\": <boolean>, If true , Pick button will appear in Editing interface. \u2063 \"deletable\": <boolean>, If true , Delete button will appear in Editing interface and Attribute Table. \u2063 }, \u2063 \"fields\": [{ A list of field definitions, for each exposed attribute. \u2063 \"id\": \"<FieldID>\", The field ID. \u2063 \"name\": \"<FieldName>\", The field name, as displayed in the editing form. \u2063 \"type\": \"<FieldType>\", A field type. Either bool , list or a regular HTML input element type . \u2063 \"constraints\": { Constraints for the input field. \u2063 \"values\": [<Entries>], Only if type is list : an array of arbitrary strings. \u2063 ... For regular HTML input types, the ReactJS API name of any applicable HTML input constraint , i.e. maxLength or readOnly . \u2063 } \u2063 }], \u2063 \"form\": \"<PathToUiFile>\", Optional, a QtDesigner UI file. \u2063 } } If you specify just fields , a simple form is autogenerated based on the field definitions. Alternatively you can specify the URL to a Qt Designer UI form in form (use :/<path> to specify a path below the assets folder).","title":"Using a custom editing backend"},{"location":"topics/FeatureInfo/","text":"Feature info \u00b6 The feature info behaviour in QWC2 is controlled by configuring identifyTool in config.json (or per-theme in themesConfig.json ) to the desired plugin as well as whether a qwc-feature-info-service is used. The feature info is by default triggered when clicking on a feature in the map. You can also configure the feature info as an explicit viewer tool by setting identifyTool: null and adding a menuItems or toolbarItems entry. The following approaches are available for feature info: Identify plugin: WMS GetFeatureInfo , rendered in a table or in a custom HTML template DB feature info with custom SQL queries FeatureForm plugin : custom attribute forms with qwc-data-service WMS GetFeatureInfo \u00b6 To query features over WMS GetFeatureInfo, set identifyTool: \"Identify\" . By default, results are displayed in a table. To display the results in a custom HTML template, the qwc-feature-info-service can be used . Note: Use of the qwc-feature-info-service is also recommended if the qwc-data-service is used for editing, to ensure attribute values containing paths to uploaded files are properly converted to clickable hyperlinks. Set whether a layer is identifyable in QGIS &rarr; Project Properties &rarr; Data sources . To highlight the geometry, make sure QGIS &rarr; Project Properties &rarr; QGIS Server &rarr; Add geometry to feature response is checked. Suppressing attributes \u00b6 You can suppress attributes globally by selecting \"Do not expose via WMS\" in QGIS \u2192 Layer properties \u2192 Fields. Alternatively, you can selectively restrict attributes using the qwc-admin-gui and assigning Attribute resource permissions as desired. You can also omit empty attributes by setting skipEmptyFeatureAttributes: true in the theme configuration entry in themesConfig.json . If you use the qwc-feature-info-service , you can also omit empty attributes directly in the GetFeatureInfo by setting skip_empty_attributes: true in the featureInfo service configuration in tenantConfig.json . Attribute values: HTML markup, hyperlinks, images \u00b6 In general, HTML markup in attribute values is preserved. For displaying interactive hyperlinks, the following options are supported: URLs in attribute text values with no HTML markup are automatically converted to an interactive hyperlink. Alternatively, you can enclose the URL in a HTML <a> tag in the attribute value. To open the linked page in an inline dialog within QWC2, you can set the anchor target to :iframedialog:<dialogname>:<optkey>=<optval>:<optkey>=<optval>:... where the supported options are: w : Dialog width in pixels, default: 640 . h : Dialog height in pixels, default: 480 . title : Dialog window title, by default the translation string windows.<dialogname> . print : Whether to add a print icon for printing the dialog contents, default: true . dockable : Whether the dialog can be docked, default false . docked : Whether the dialog is initially docked, default false . Example: <a href=\"https://example.com\" target=\":iframedialog:w=1024:h=768:title=Example\">Link text</a> For displaying images, the following options are supported: If replaceImageUrls: true is set in the Identify plugin configuration in config.json , attribute text values which contain exactly an URL to an image are converted to inline images. If you use the qwc-feature-info-service , you need to set transform_image_urls in the featureInfo service configuration in tenantConfig.json . Alternatively, you can add a <img> tag directly in the attribute value. This applies in particular to <a /> anchor and <img /> tags for displaying links an images in an attribute value. Client side attribute transformations \u00b6 This functionality is only available without the qwc-feature-info-service . To compute derived attributes client-side, you can implement the customAttributeCalculator in qwc2-app/js/IdentifyExtensions.js (which is passed to the Identify plugin in appConfig.js ). To transform attributes client-side you can implement the attributeTransform in qwc2-app/js/IdentifyExtensions.js (which is passed to the Identify plugin in appConfig.js ). Custom export \u00b6 By default, the identify dialog in QWC2 allows you to export the results to json (QWC2 feature storage format), geojson (standard GeoJSON without QWC2 specific fields), csv (single CSV with all layers) or csv+zip (ZIP with one CSV per layer). You can define additional export functions by extending customExporters in qwc2-app/js/IdentifyExtensions.js . Custom HTML templates \u00b6 You can specify a custom HTML template for displaying the feature rather than the default table view by using the qwc-feature-info-service and providing the template in the featureInfo service configuration in tenantConfig.json , either inline or as a path: { \"name\": \"featureInfo\", \"config\": ..., \"resources\": { \"wms_services\": [ { \"name\": \"<service_name>\", \"root_layer\": { \"name\": \"<root_layer_name>\", \"layers\": [ { \"name\": \"<layer_name>\", \"info_template\": { <See below> } } ] } } ] } } Example info_template with inline template: \"info_template\": { \"type\": \"wms\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Example info_template with template path: \"info_template\": { \"type\": \"wms\", \"template_path\": \"/info_templates/template.html\" } Note: - x and y are the info query coordinates. feature.<attr> renders the attr attribute value of the feature. - The templates must be HTML fragments without html or body tags. - The templates folder needs to be mounted into the qwc-feature-info-service container, i.e.: qwc-feature-info-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/info-templates:/info_templates:ro DB query feature info \u00b6 When using the Identify plugin and the qwc-feature-info-service , you can query features directly from a database instead of over WMS GetFeatureInfo, by providing the featureInfo service configuration as described in HTML templates , but specifying a db_url and sql , for example \"info_template\": { \"type\": \"sql\", \"db_url\": \"postgresql:///?service=qwc_geodb\", \"sql\": \"SELECT ogc_fid as _fid_, name, formal_en, pop_est, subregion, ST_AsText(wkb_geometry) as wkt_geom FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_Intersects(wkb_geometry, ST_GeomFromText(:geom, :srid)) LIMIT :feature_count;\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Note: x , y and geom are passed as parameters to the SQL query. If a GetFeatureInfo request is being processed with a filter_geom parameter, geom will correspond to that parameter. Otherwise geom will be POINT(x y) . Localization \u00b6 The qwc-feature-info-service supports switching the runtime locale by setting the LOCALE environment variable, i.e.: qwc-feature-info-service: image: docker.io/sourcepole/qwc-feature-info-service:latest-lts environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/featureinfo' LOCALE: 'de_DE' In addition, the locale object is available in templates. This is particularly helpful for rendering locale-formatted numbers, i.e. <div>Area: {{ locale.format_string(\"%.2f\", area, True) }}</div> Feature form \u00b6 The FeatureForm plugin displays picked features in a feature form as configured in QGIS &rarr; Layer properties &rarr; Attributes form . It queries the features via qwc-data-service , and hence only works for layers with postgresql data source. See Designing the edit forms for more information on designing edit forms. To use it as default identify-tool, set identifyTool: \"FeatureForm\" in config.json . A layer is only identifyable with the FeatureForm plugin if corresponding Data resources and permissions are configured for the layer data source in the qwc-admin-gui . If a write permission is configured, the feature will be editable. Permissions \u00b6 When using the Identify plugin and the qwc-feature-info-service , you can manage the permissions in the qwc-admin-gui as follows: To restrict the display of single layer attributes to specific roles, create a Layer and Attribute resource (latter as child of the created Layer resource) and create permissions assigning the desired roles to the Attribute resources. Note : The name of the Attribute resource needs to be equal to the attribute alias name if one is defined in the QGIS project! To restrict whether a layer is identifiable to specific roles, create a FeatureInfo service and FeatureInfo layer resource (latter as child of the created FeatureInfo service resource), and create permissions assigning the desired roles to the FeatureInfo layer resources. When using the FeatureForm plugin and the qwc-data-service , the Data resource permissions are used, see Editing .","title":"Feature info"},{"location":"topics/FeatureInfo/#feature-info","text":"The feature info behaviour in QWC2 is controlled by configuring identifyTool in config.json (or per-theme in themesConfig.json ) to the desired plugin as well as whether a qwc-feature-info-service is used. The feature info is by default triggered when clicking on a feature in the map. You can also configure the feature info as an explicit viewer tool by setting identifyTool: null and adding a menuItems or toolbarItems entry. The following approaches are available for feature info: Identify plugin: WMS GetFeatureInfo , rendered in a table or in a custom HTML template DB feature info with custom SQL queries FeatureForm plugin : custom attribute forms with qwc-data-service","title":"Feature info"},{"location":"topics/FeatureInfo/#wms-getfeatureinfo","text":"To query features over WMS GetFeatureInfo, set identifyTool: \"Identify\" . By default, results are displayed in a table. To display the results in a custom HTML template, the qwc-feature-info-service can be used . Note: Use of the qwc-feature-info-service is also recommended if the qwc-data-service is used for editing, to ensure attribute values containing paths to uploaded files are properly converted to clickable hyperlinks. Set whether a layer is identifyable in QGIS &rarr; Project Properties &rarr; Data sources . To highlight the geometry, make sure QGIS &rarr; Project Properties &rarr; QGIS Server &rarr; Add geometry to feature response is checked.","title":"WMS GetFeatureInfo"},{"location":"topics/FeatureInfo/#suppressing-attributes","text":"You can suppress attributes globally by selecting \"Do not expose via WMS\" in QGIS \u2192 Layer properties \u2192 Fields. Alternatively, you can selectively restrict attributes using the qwc-admin-gui and assigning Attribute resource permissions as desired. You can also omit empty attributes by setting skipEmptyFeatureAttributes: true in the theme configuration entry in themesConfig.json . If you use the qwc-feature-info-service , you can also omit empty attributes directly in the GetFeatureInfo by setting skip_empty_attributes: true in the featureInfo service configuration in tenantConfig.json .","title":"Suppressing attributes"},{"location":"topics/FeatureInfo/#attribute-values-html-markup-hyperlinks-images","text":"In general, HTML markup in attribute values is preserved. For displaying interactive hyperlinks, the following options are supported: URLs in attribute text values with no HTML markup are automatically converted to an interactive hyperlink. Alternatively, you can enclose the URL in a HTML <a> tag in the attribute value. To open the linked page in an inline dialog within QWC2, you can set the anchor target to :iframedialog:<dialogname>:<optkey>=<optval>:<optkey>=<optval>:... where the supported options are: w : Dialog width in pixels, default: 640 . h : Dialog height in pixels, default: 480 . title : Dialog window title, by default the translation string windows.<dialogname> . print : Whether to add a print icon for printing the dialog contents, default: true . dockable : Whether the dialog can be docked, default false . docked : Whether the dialog is initially docked, default false . Example: <a href=\"https://example.com\" target=\":iframedialog:w=1024:h=768:title=Example\">Link text</a> For displaying images, the following options are supported: If replaceImageUrls: true is set in the Identify plugin configuration in config.json , attribute text values which contain exactly an URL to an image are converted to inline images. If you use the qwc-feature-info-service , you need to set transform_image_urls in the featureInfo service configuration in tenantConfig.json . Alternatively, you can add a <img> tag directly in the attribute value. This applies in particular to <a /> anchor and <img /> tags for displaying links an images in an attribute value.","title":"Attribute values: HTML markup, hyperlinks, images"},{"location":"topics/FeatureInfo/#client-side-attribute-transformations","text":"This functionality is only available without the qwc-feature-info-service . To compute derived attributes client-side, you can implement the customAttributeCalculator in qwc2-app/js/IdentifyExtensions.js (which is passed to the Identify plugin in appConfig.js ). To transform attributes client-side you can implement the attributeTransform in qwc2-app/js/IdentifyExtensions.js (which is passed to the Identify plugin in appConfig.js ).","title":"Client side attribute transformations"},{"location":"topics/FeatureInfo/#custom-export","text":"By default, the identify dialog in QWC2 allows you to export the results to json (QWC2 feature storage format), geojson (standard GeoJSON without QWC2 specific fields), csv (single CSV with all layers) or csv+zip (ZIP with one CSV per layer). You can define additional export functions by extending customExporters in qwc2-app/js/IdentifyExtensions.js .","title":"Custom export"},{"location":"topics/FeatureInfo/#custom-html-templates","text":"You can specify a custom HTML template for displaying the feature rather than the default table view by using the qwc-feature-info-service and providing the template in the featureInfo service configuration in tenantConfig.json , either inline or as a path: { \"name\": \"featureInfo\", \"config\": ..., \"resources\": { \"wms_services\": [ { \"name\": \"<service_name>\", \"root_layer\": { \"name\": \"<root_layer_name>\", \"layers\": [ { \"name\": \"<layer_name>\", \"info_template\": { <See below> } } ] } } ] } } Example info_template with inline template: \"info_template\": { \"type\": \"wms\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Example info_template with template path: \"info_template\": { \"type\": \"wms\", \"template_path\": \"/info_templates/template.html\" } Note: - x and y are the info query coordinates. feature.<attr> renders the attr attribute value of the feature. - The templates must be HTML fragments without html or body tags. - The templates folder needs to be mounted into the qwc-feature-info-service container, i.e.: qwc-feature-info-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/info-templates:/info_templates:ro","title":"Custom HTML templates"},{"location":"topics/FeatureInfo/#db-query-feature-info","text":"When using the Identify plugin and the qwc-feature-info-service , you can query features directly from a database instead of over WMS GetFeatureInfo, by providing the featureInfo service configuration as described in HTML templates , but specifying a db_url and sql , for example \"info_template\": { \"type\": \"sql\", \"db_url\": \"postgresql:///?service=qwc_geodb\", \"sql\": \"SELECT ogc_fid as _fid_, name, formal_en, pop_est, subregion, ST_AsText(wkb_geometry) as wkt_geom FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_Intersects(wkb_geometry, ST_GeomFromText(:geom, :srid)) LIMIT :feature_count;\", \"template\": \"<div><h2>Demo Template</h2>Pos: {{ x }}, {{ y }}<br>Name: {{ feature.Name }}</div>\" } Note: x , y and geom are passed as parameters to the SQL query. If a GetFeatureInfo request is being processed with a filter_geom parameter, geom will correspond to that parameter. Otherwise geom will be POINT(x y) .","title":"DB query feature info"},{"location":"topics/FeatureInfo/#localization","text":"The qwc-feature-info-service supports switching the runtime locale by setting the LOCALE environment variable, i.e.: qwc-feature-info-service: image: docker.io/sourcepole/qwc-feature-info-service:latest-lts environment: <<: *qwc-service-variables SERVICE_MOUNTPOINT: '/api/v1/featureinfo' LOCALE: 'de_DE' In addition, the locale object is available in templates. This is particularly helpful for rendering locale-formatted numbers, i.e. <div>Area: {{ locale.format_string(\"%.2f\", area, True) }}</div>","title":"Localization"},{"location":"topics/FeatureInfo/#feature-form","text":"The FeatureForm plugin displays picked features in a feature form as configured in QGIS &rarr; Layer properties &rarr; Attributes form . It queries the features via qwc-data-service , and hence only works for layers with postgresql data source. See Designing the edit forms for more information on designing edit forms. To use it as default identify-tool, set identifyTool: \"FeatureForm\" in config.json . A layer is only identifyable with the FeatureForm plugin if corresponding Data resources and permissions are configured for the layer data source in the qwc-admin-gui . If a write permission is configured, the feature will be editable.","title":"Feature form"},{"location":"topics/FeatureInfo/#permissions","text":"When using the Identify plugin and the qwc-feature-info-service , you can manage the permissions in the qwc-admin-gui as follows: To restrict the display of single layer attributes to specific roles, create a Layer and Attribute resource (latter as child of the created Layer resource) and create permissions assigning the desired roles to the Attribute resources. Note : The name of the Attribute resource needs to be equal to the attribute alias name if one is defined in the QGIS project! To restrict whether a layer is identifiable to specific roles, create a FeatureInfo service and FeatureInfo layer resource (latter as child of the created FeatureInfo service resource), and create permissions assigning the desired roles to the FeatureInfo layer resources. When using the FeatureForm plugin and the qwc-data-service , the Data resource permissions are used, see Editing .","title":"Permissions"},{"location":"topics/Interfacing/","text":"Interfacing with other applications \u00b6 QWC2 offers a number of options to interface it with other applications. URL parameters \u00b6 The following parameters can appear in the URL of the QWC2 application: t : The active theme l : The layers in the map, see below. bl : The visible background layer e : The visible extent c : The center of the visible extent s : The current scale crs : The CRS of extent/center coordinates hc : If c is specified and hc is true or 1 , a marker is set at c when starting the application. Note: requires the StartupMarkerPlugin plugin to be active. st : The search text hp , hf , ht : Startup highlight parameters used in conjunction with the qwc-fulltext-search-service , see below. localConfig : Override the name of the loaded config file, i.e. to load myconfig.json instead of the default config.json , pass localConfig=myconfig . The l parameter lists all layers in the map (redlining and background layers) as a comma separated list of entries of the form <layername>[<transparency>]{<style>}! where - layername is the WMS name of a theme layer or group, or an external layer resource string in the format <wms|wfs>:<service_url>#<layername> for external layers, i.e. wms:https://wms.geo.admin.ch/?#ch.are.bauzonen . - <transparency> denotes the layer transparency, betwen 0 and 100. If the [<transparency>] portion is omitted, the layer is fully opaque. - <style> denotes the layer style name. If the {<style>} portion is omitted, the style named default will be used, if one exists, or the first available style otherwise. - ! denotes that the layer is invisible (i.e. unchecked in the layer tree). If omitted, the layer is visible. Note : If group name is specified instead of the layer name, QWC2 will automatically resolve this to all layer names contained in that group, and will apply transparency and visibility settings as specified for the group. The urlPositionFormat parameter in config.json determines whether the extent or the center and scale appears in the URL. The urlPositionCrs parameter in config.json determines the projection to use for the extent resp. center coordinates in the URL. By default the map projection of the current theme is used. If urlPositionCrs is equal to the map projection, the crs parameter is omitted in the URL. Highlight feature on startup \u00b6 If a search text passed via st results in a unique result, the viewer automatically zooms to this result on startup. If the search result does not provide a bounding box, the minScale defined in the searchOptions of the TopBar configuration in config.json is used. When using the qwc-fulltext-search-service , you can hightlight a feature on startup as follows: - Either specify hp=<search product>&hf=<search filter> - Or specify ht=<search text>&hp=<search product> See Fulltext search for more details. Launching external websites \u00b6 QWC2 menu entries can be configured to launch external websites as described in opening external websites . Javascript API \u00b6 The API plugin exposes many application actions via the window.qwc2 object and makes them accessible for external applications. See API plugin reference for more details. See api_examples.js for some concrete examples.","title":"Interfacing with applications"},{"location":"topics/Interfacing/#interfacing-with-other-applications","text":"QWC2 offers a number of options to interface it with other applications.","title":"Interfacing with other applications"},{"location":"topics/Interfacing/#url-parameters","text":"The following parameters can appear in the URL of the QWC2 application: t : The active theme l : The layers in the map, see below. bl : The visible background layer e : The visible extent c : The center of the visible extent s : The current scale crs : The CRS of extent/center coordinates hc : If c is specified and hc is true or 1 , a marker is set at c when starting the application. Note: requires the StartupMarkerPlugin plugin to be active. st : The search text hp , hf , ht : Startup highlight parameters used in conjunction with the qwc-fulltext-search-service , see below. localConfig : Override the name of the loaded config file, i.e. to load myconfig.json instead of the default config.json , pass localConfig=myconfig . The l parameter lists all layers in the map (redlining and background layers) as a comma separated list of entries of the form <layername>[<transparency>]{<style>}! where - layername is the WMS name of a theme layer or group, or an external layer resource string in the format <wms|wfs>:<service_url>#<layername> for external layers, i.e. wms:https://wms.geo.admin.ch/?#ch.are.bauzonen . - <transparency> denotes the layer transparency, betwen 0 and 100. If the [<transparency>] portion is omitted, the layer is fully opaque. - <style> denotes the layer style name. If the {<style>} portion is omitted, the style named default will be used, if one exists, or the first available style otherwise. - ! denotes that the layer is invisible (i.e. unchecked in the layer tree). If omitted, the layer is visible. Note : If group name is specified instead of the layer name, QWC2 will automatically resolve this to all layer names contained in that group, and will apply transparency and visibility settings as specified for the group. The urlPositionFormat parameter in config.json determines whether the extent or the center and scale appears in the URL. The urlPositionCrs parameter in config.json determines the projection to use for the extent resp. center coordinates in the URL. By default the map projection of the current theme is used. If urlPositionCrs is equal to the map projection, the crs parameter is omitted in the URL.","title":"URL parameters "},{"location":"topics/Interfacing/#highlight-feature-on-startup","text":"If a search text passed via st results in a unique result, the viewer automatically zooms to this result on startup. If the search result does not provide a bounding box, the minScale defined in the searchOptions of the TopBar configuration in config.json is used. When using the qwc-fulltext-search-service , you can hightlight a feature on startup as follows: - Either specify hp=<search product>&hf=<search filter> - Or specify ht=<search text>&hp=<search product> See Fulltext search for more details.","title":"Highlight feature on startup"},{"location":"topics/Interfacing/#launching-external-websites","text":"QWC2 menu entries can be configured to launch external websites as described in opening external websites .","title":"Launching external websites"},{"location":"topics/Interfacing/#javascript-api","text":"The API plugin exposes many application actions via the window.qwc2 object and makes them accessible for external applications. See API plugin reference for more details. See api_examples.js for some concrete examples.","title":"Javascript API"},{"location":"topics/LegendGraphics/","text":"Legend graphics \u00b6 By default, QWC2 will obtain the legend graphics of a layer from QGIS Server. Customizing the GetLegendGraphics request \u00b6 You can customize the GetLegendGraphics request by specifying additional query parameters in via extraLegendParameters in the theme configuration block . The list of supported query parameters is documented in the QGIS Server documentation . Providing custom legend images \u00b6 You can provide custom legend images by enabling the qwc-legend-service . Configure legend_images_path in the legend service configuration in tenantConfig.json : { \"name\": \"legend\", \"config\": { \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"legend_images_path\": \"/legends/\" } } Note: The legend folder needs to be mounted into the qwc-legend-service container, i.e.: qwc-legend-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/legends:/legends Then, legend images will be searched for in this order (the first one found is used): A <legend_images_path>/<service_name>/<layername><suffix>.png file, where service_name is the name of the WMS service layername is the WMS layer name suffix : empty, or one of _thumbnail , _tooltip . The suffix is passed by QWC2 to the legend service depending on the requested image type. A <legend_images_path>/default<suffix>.png file for a default legend image. A <legend_images_path>/<legend_image> file with legend_image as specified for the desired layer in the legend service configuration, for example: { \"name\": \"legend\", \"config\": ..., \"resources\": { \"wms_services\": [ { \"name\": \"<service name>\", \"root_layer\": { \"name\": \"<root_layer_name>\", \"layers\": [ { \"name\": \"<layer_name>\", \"legend_image\": \"edit_points.png\" } ] } } ] } }","title":"Legend graphics"},{"location":"topics/LegendGraphics/#legend-graphics","text":"By default, QWC2 will obtain the legend graphics of a layer from QGIS Server.","title":"Legend graphics"},{"location":"topics/LegendGraphics/#customizing-the-getlegendgraphics-request","text":"You can customize the GetLegendGraphics request by specifying additional query parameters in via extraLegendParameters in the theme configuration block . The list of supported query parameters is documented in the QGIS Server documentation .","title":"Customizing the GetLegendGraphics request"},{"location":"topics/LegendGraphics/#providing-custom-legend-images","text":"You can provide custom legend images by enabling the qwc-legend-service . Configure legend_images_path in the legend service configuration in tenantConfig.json : { \"name\": \"legend\", \"config\": { \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"legend_images_path\": \"/legends/\" } } Note: The legend folder needs to be mounted into the qwc-legend-service container, i.e.: qwc-legend-service: image: sourcepole/qwc-feature-info-service:vYYYY.MM.DD volumes: ... - ./volumes/legends:/legends Then, legend images will be searched for in this order (the first one found is used): A <legend_images_path>/<service_name>/<layername><suffix>.png file, where service_name is the name of the WMS service layername is the WMS layer name suffix : empty, or one of _thumbnail , _tooltip . The suffix is passed by QWC2 to the legend service depending on the requested image type. A <legend_images_path>/default<suffix>.png file for a default legend image. A <legend_images_path>/<legend_image> file with legend_image as specified for the desired layer in the legend service configuration, for example: { \"name\": \"legend\", \"config\": ..., \"resources\": { \"wms_services\": [ { \"name\": \"<service name>\", \"root_layer\": { \"name\": \"<root_layer_name>\", \"layers\": [ { \"name\": \"<layer_name>\", \"legend_image\": \"edit_points.png\" } ] } } ] } }","title":"Providing custom legend images"},{"location":"topics/Mapinfo/","text":"Map info \u00b6 The map-info popup is displayed when right-clicking any position on the map. By default, it displayes the picked coordinates. If the qwc-elevation-service is enabled , it also returns the height at the picked position. If the qwc-mapinfo-service is enabled, queries can be configured in the service configuration in tenantConfig.json to return additional information. Example: { \"name\": \"mapinfo\", \"config\": { \"queries\": [ { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_where\": \"type = 'Sovereign country'\", \"info_title\": \"Country\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT type FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": \"Type\" } ] } } If info_table , info_geom_col , info_display_col and optionally info_where are provided, the result obtained from SELECT {info_display_col} FROM {info_table} WHERE ST_contains({info_table}.{info_geom_col}, ST_SetSRID(ST_Point(:x, :y), :srid)) AND {info_where} LIMIT 1; will be returned and displayed in the map-info popup as with title as specified in info_title . If info_sql is provided, the result obtained from the specified query will be returned. Use the :x , :y and :srid placeholders.","title":"Map info"},{"location":"topics/Mapinfo/#map-info","text":"The map-info popup is displayed when right-clicking any position on the map. By default, it displayes the picked coordinates. If the qwc-elevation-service is enabled , it also returns the height at the picked position. If the qwc-mapinfo-service is enabled, queries can be configured in the service configuration in tenantConfig.json to return additional information. Example: { \"name\": \"mapinfo\", \"config\": { \"queries\": [ { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_table\": \"qwc_geodb.ne_10m_admin_0_countries\", \"info_geom_col\": \"wkb_geometry\", \"info_display_col\": \"name\", \"info_where\": \"type = 'Sovereign country'\", \"info_title\": \"Country\" }, { \"db_url\": \"postgresql:///?service=qwc_geodb\", \"info_sql\": \"SELECT type FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_contains(wkb_geometry, ST_SetSRID(ST_Point(:x, :y), :srid)) LIMIT 1\", \"info_title\": \"Type\" } ] } } If info_table , info_geom_col , info_display_col and optionally info_where are provided, the result obtained from SELECT {info_display_col} FROM {info_table} WHERE ST_contains({info_table}.{info_geom_col}, ST_SetSRID(ST_Point(:x, :y), :srid)) AND {info_where} LIMIT 1; will be returned and displayed in the map-info popup as with title as specified in info_title . If info_sql is provided, the result obtained from the specified query will be returned. Use the :x , :y and :srid placeholders.","title":"Map info"},{"location":"topics/MultiTenancy/","text":"Multi-Tenancy \u00b6 Multi-tenancy allows serving multiple viewer configurations from a single installation. Specifically, it allows separate theme, viewer (plugins, appearance, etc.) and user/permissions configurations for each tenant. By default, qwc-docker includes a single default tenant, with the respective configuration file located at qwc-docker/volumes/config-in/default/tenantConfig.json . To configure additional tenants, the main steps are as follows: Define how the tenant name is extracted from the requests. Write a tenantConfig.json , specifying the location of the configuration database, the viewer configuration and viewer assets. Extracting the tenant name from the requests \u00b6 Multi-tenancy works by extracting a tenant name from the request URL and passing it to the respective QWC services. A typical setup is to run the application at the base address https://<hostname>/<tenant>/ The simplest approach is to extract the tenant name in a rewrite rule and set a corresponding header which will be read by the QWC services. This can be accomplished as follows: Define the name of the tenant header in qwc-docker/docker-compose.yml by setting the TENANT_HEADER environment variable in the qwc-service-variables block, i.e.: x-qwc-service-variables: &qwc-service-variables [...] TENANT_HEADER: Tenant Add rewrite rules to the api-gateway configuration file qwc-docker/api-gateway/nginx.conf , extracting the tenant name and setting the tenant header. For example server { listen 80; server_name localhost; proxy_redirect off; server_tokens off; location ~ ^/(?<t>tenant1|tenant2) { # Extract tenant proxy_set_header Tenant $t; # Set headers for original request host proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; location ~ ^/[^/]+/auth { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-auth-service:9090; } location ~ ^/[^/]+/ows { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-ogc-service:9090; } location ~ ^/[^/]+/api/v1/featureinfo { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-feature-info-service:9090; } # etc... location ~ ^/[^/]+/qwc_admin { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-admin-gui:9090; } # Place these last to give precedence to the other rules: # Redirect request without trailing slash location ~ ^(/[^/]+)$ { return 301 $scheme://$http_host$1/; } location ~ ^/[^/]+/ { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-map-viewer:9090; } } } Writing the tenantConfig.json \u00b6 The tenant configuration file tenantConfig.json is located at qwc-docker/volumes/config-in/<tenant>/tenantConfig.json with <tenant> the name of the tenant. There are a number of configuration options which specifically affect the type of multi-tenancy setup, which is very flexible. Possible choices are: Shared vs. separate configuration database / admin backend Shared vs. separate viewer build Shared vs. separate qgs-resources tree etc... In general, you need to ensure that All the service URLs point to locations which are handled by the api-gateway configuration. All the paths refers to locations which are mounted in qwc-docker/docker-compose.yml . All database connection service names refer to connections which are defined qwc-docker/pg_service.conf . A minimal configuration for tenant tenant_name may look as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { \"tenant\": \"tenant_name\", \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"config_db_url\": \"postgresql:///?service=qwc_configdb\", \"qgis_projects_base_dir\": \"/data/tenant_name\", \"qgis_projects_scan_base_dir\": \"/data/tenant_name/scan\", \"qwc2_base_dir\": \"/qwc2\", \"ows_prefix\": \"/tenant_name/ows\", ... }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"adminGui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"qgs_resources_path\": \"/qgs-resources/tenant_name/\", \"ows_prefix\": \"/tenant_name/ows\", ... } }, { \"name\": \"dbAuth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\" } }, { \"name\": \"mapViewer\", \"generator_config\": { \"qwc2_config\": { \"qwc2_config_file\": \"/srv/qwc_service/config-in/tenant_name/config.json\", \"qwc2_index_file\": \"/srv/qwc_service/config-in/tenant_name/index.html\" } }, \"config\": { \"qwc2_path\": \"/qwc2/\", \"auth_service_url\": \"/tenant_name/auth/\", \"ogc_service_url\": \"/tenant_name/ows/\", \"info_service_url\": \"/tenant_name/api/v1/featureinfo/\", ... } } ] } Notes : The database URL ( postgresql:///?service=qwc_configdb ) will determine whether a shared or sperate configuration database is used for each tenant. The qwc2_config_file , qwc2_index_file , qwc2_base_dir and qwc2_path paths will determine whether the viewer build/configuration is shared or separate for each tenant. To use a separate assets folder for each tenant, you can set an appropriate assetsPath in the qwc2_config_file of each tenant. The various service URLs in the mapViewer configuration and in other service configurations need to match what is expected in the api-gateway configuration. tenantConfig template \u00b6 In particular when managing a large number of tenants, it can be tedious and error-prone to manage separate tenantConfig.json files for each tenant which might be nearly identical aside from the tenant name. To alleviate this, you can create a tenantConfig template, using the $tenant$ placeholder where appropriate, and point to this file in the respective tenantConfig.json files. The contents of the template will then be merged with the contents of tenantConfig.json , and occurence of $tenant$ in the template will be replaced with the current tenant name. For example, a minimal tenantConfig.json in qwc-docker/volumes/config-in/tenant_name/ could look as follows: { \"template\": \"../tenantConfig.template.json\", \"config\": { \"tenant\": \"tenant_name\" }, \"themesConfig\": \"./themesConfig.json\" } And the tenantConfig.template.json in qwc-docker/volumes/config-in/ as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"config_db_url\": \"postgresql:///?service=qwc_configdb\", \"qgis_projects_base_dir\": \"/data\", \"qgis_projects_scan_base_dir\": \"/data/$tenant$/scan\", \"qwc2_base_dir\": \"/qwc2\", \"ows_prefix\": \"/ows\", ... }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"adminGui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"qgs_resources_path\": \"/qgs-resources/\", \"ows_prefix\": \"/ows\", ... } }, { \"name\": \"dbAuth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\" } }, { \"name\": \"mapViewer\", \"generator_config\": { \"qwc2_config\": { \"qwc2_config_file\": \"/srv/qwc_service/config-in/$tenant$/config.json\", \"qwc2_index_file\": \"/srv/qwc_service/config-in/$tenant$/index.html\" } }, \"config\": { \"qwc2_path\": \"/qwc2/\", \"auth_service_url\": \"/$tenant$/auth/\", \"ogc_service_url\": \"/$tenant$/ows/\", \"info_service_url\": \"/$tenant$/api/v1/featureinfo/\", ... } } ] }","title":"Multi-tenancy"},{"location":"topics/MultiTenancy/#multi-tenancy","text":"Multi-tenancy allows serving multiple viewer configurations from a single installation. Specifically, it allows separate theme, viewer (plugins, appearance, etc.) and user/permissions configurations for each tenant. By default, qwc-docker includes a single default tenant, with the respective configuration file located at qwc-docker/volumes/config-in/default/tenantConfig.json . To configure additional tenants, the main steps are as follows: Define how the tenant name is extracted from the requests. Write a tenantConfig.json , specifying the location of the configuration database, the viewer configuration and viewer assets.","title":"Multi-Tenancy"},{"location":"topics/MultiTenancy/#extracting-the-tenant-name-from-the-requests","text":"Multi-tenancy works by extracting a tenant name from the request URL and passing it to the respective QWC services. A typical setup is to run the application at the base address https://<hostname>/<tenant>/ The simplest approach is to extract the tenant name in a rewrite rule and set a corresponding header which will be read by the QWC services. This can be accomplished as follows: Define the name of the tenant header in qwc-docker/docker-compose.yml by setting the TENANT_HEADER environment variable in the qwc-service-variables block, i.e.: x-qwc-service-variables: &qwc-service-variables [...] TENANT_HEADER: Tenant Add rewrite rules to the api-gateway configuration file qwc-docker/api-gateway/nginx.conf , extracting the tenant name and setting the tenant header. For example server { listen 80; server_name localhost; proxy_redirect off; server_tokens off; location ~ ^/(?<t>tenant1|tenant2) { # Extract tenant proxy_set_header Tenant $t; # Set headers for original request host proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; location ~ ^/[^/]+/auth { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-auth-service:9090; } location ~ ^/[^/]+/ows { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-ogc-service:9090; } location ~ ^/[^/]+/api/v1/featureinfo { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-feature-info-service:9090; } # etc... location ~ ^/[^/]+/qwc_admin { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-admin-gui:9090; } # Place these last to give precedence to the other rules: # Redirect request without trailing slash location ~ ^(/[^/]+)$ { return 301 $scheme://$http_host$1/; } location ~ ^/[^/]+/ { rewrite ^/[^/]+(.+) $1 break; proxy_pass http://qwc-map-viewer:9090; } } }","title":"Extracting the tenant name from the requests"},{"location":"topics/MultiTenancy/#writing-the-tenantconfigjson","text":"The tenant configuration file tenantConfig.json is located at qwc-docker/volumes/config-in/<tenant>/tenantConfig.json with <tenant> the name of the tenant. There are a number of configuration options which specifically affect the type of multi-tenancy setup, which is very flexible. Possible choices are: Shared vs. separate configuration database / admin backend Shared vs. separate viewer build Shared vs. separate qgs-resources tree etc... In general, you need to ensure that All the service URLs point to locations which are handled by the api-gateway configuration. All the paths refers to locations which are mounted in qwc-docker/docker-compose.yml . All database connection service names refer to connections which are defined qwc-docker/pg_service.conf . A minimal configuration for tenant tenant_name may look as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { \"tenant\": \"tenant_name\", \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"config_db_url\": \"postgresql:///?service=qwc_configdb\", \"qgis_projects_base_dir\": \"/data/tenant_name\", \"qgis_projects_scan_base_dir\": \"/data/tenant_name/scan\", \"qwc2_base_dir\": \"/qwc2\", \"ows_prefix\": \"/tenant_name/ows\", ... }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"adminGui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"qgs_resources_path\": \"/qgs-resources/tenant_name/\", \"ows_prefix\": \"/tenant_name/ows\", ... } }, { \"name\": \"dbAuth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\" } }, { \"name\": \"mapViewer\", \"generator_config\": { \"qwc2_config\": { \"qwc2_config_file\": \"/srv/qwc_service/config-in/tenant_name/config.json\", \"qwc2_index_file\": \"/srv/qwc_service/config-in/tenant_name/index.html\" } }, \"config\": { \"qwc2_path\": \"/qwc2/\", \"auth_service_url\": \"/tenant_name/auth/\", \"ogc_service_url\": \"/tenant_name/ows/\", \"info_service_url\": \"/tenant_name/api/v1/featureinfo/\", ... } } ] } Notes : The database URL ( postgresql:///?service=qwc_configdb ) will determine whether a shared or sperate configuration database is used for each tenant. The qwc2_config_file , qwc2_index_file , qwc2_base_dir and qwc2_path paths will determine whether the viewer build/configuration is shared or separate for each tenant. To use a separate assets folder for each tenant, you can set an appropriate assetsPath in the qwc2_config_file of each tenant. The various service URLs in the mapViewer configuration and in other service configurations need to match what is expected in the api-gateway configuration.","title":"Writing the tenantConfig.json"},{"location":"topics/MultiTenancy/#tenantconfig-template","text":"In particular when managing a large number of tenants, it can be tedious and error-prone to manage separate tenantConfig.json files for each tenant which might be nearly identical aside from the tenant name. To alleviate this, you can create a tenantConfig template, using the $tenant$ placeholder where appropriate, and point to this file in the respective tenantConfig.json files. The contents of the template will then be merged with the contents of tenantConfig.json , and occurence of $tenant$ in the template will be replaced with the current tenant name. For example, a minimal tenantConfig.json in qwc-docker/volumes/config-in/tenant_name/ could look as follows: { \"template\": \"../tenantConfig.template.json\", \"config\": { \"tenant\": \"tenant_name\" }, \"themesConfig\": \"./themesConfig.json\" } And the tenantConfig.template.json in qwc-docker/volumes/config-in/ as follows: { \"$schema\": \"https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\", \"service\": \"config-generator\", \"config\": { \"default_qgis_server_url\": \"http://qwc-qgis-server/ows/\", \"config_db_url\": \"postgresql:///?service=qwc_configdb\", \"qgis_projects_base_dir\": \"/data\", \"qgis_projects_scan_base_dir\": \"/data/$tenant$/scan\", \"qwc2_base_dir\": \"/qwc2\", \"ows_prefix\": \"/ows\", ... }, \"themesConfig\": \"./themesConfig.json\", \"services\": [ { \"name\": \"adminGui\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"qgs_resources_path\": \"/qgs-resources/\", \"ows_prefix\": \"/ows\", ... } }, { \"name\": \"dbAuth\", \"config\": { \"db_url\": \"postgresql:///?service=qwc_configdb\", \"config_generator_service_url\": \"http://qwc-config-service:9090\" } }, { \"name\": \"mapViewer\", \"generator_config\": { \"qwc2_config\": { \"qwc2_config_file\": \"/srv/qwc_service/config-in/$tenant$/config.json\", \"qwc2_index_file\": \"/srv/qwc_service/config-in/$tenant$/index.html\" } }, \"config\": { \"qwc2_path\": \"/qwc2/\", \"auth_service_url\": \"/$tenant$/auth/\", \"ogc_service_url\": \"/$tenant$/ows/\", \"info_service_url\": \"/$tenant$/api/v1/featureinfo/\", ... } } ] }","title":"tenantConfig template"},{"location":"topics/Printing/","text":"Printing \u00b6 QWC2 supports printing to PDF via the QGIS Server GetPrint request. The basic steps are: Ensure the Print plugin is enabled in the QWC2 viewer. Create print layouts in the QGIS project as desired. The layouts must contain one Map element. Generate the themes configuration . The available print layouts will then appear in the QWC2 print plugin. You can limit the available print scales by setting printScales (or defaultPrintScales ) in the theme configuration to a list of scale denominators. If the list is empty, the print scale can be freely chosen. Similarly, you can limit the available print resolutions by setting printResolutions (or defaultPrintResolutions ) in the theme configuration to a list of resolutions. If the list is empty, the print resolution can be freely chosen. External WMS layers are automatically printed if the Print plugin config option printExternalLayers is true (default). Note that printing external WMTS layers is currently not supported by the QGIS Server. You can enable the option to generate a GeoPDF by setting the Print plugin config option allowGeoPdfExport to true . Note: This is only supported on QGIS Server 3.32 and newer. You can select output format for printing layout. Default values are application/pdf , image/jpeg , image/png and image/svg . You can restrict formats to one or more of them by setting the Print plugin config option formats to an array of these formats. See QGIS Server documentation for WMS GetPrint supported formats. Some additional tasks include: Configuring the print background layers Configuring user labels Configuring the print grid Configuring layouts with legend Configuring atlas printing Configuring print background layers \u00b6 Background layers are handled purely client-side in QWC2. There are two options for printing the background layer: The first option is to add a printLayer to the background layer entry when writing the themes configuration , i.e.: { ... \"backgroundLayers\": [ {\"name\": \"<background layer name>\", \"printLayer\": \"<qgis layer name or resource string>\"} ] } You can set printLayer to a QGIS layer name, or to a resource string (i.e. wms:<baseurl>#<layername> ). A QGIS layer marked as printLayer will be filtered out from the QWC2 layer tree, and hence will not be displayed in QWC2. You can also set printLayer to a list [{\"maxScale\": <scale>, \"name\": \"<layer name>\"}, ..., {\"maxScale\": null, \"name\": \"<QGis layer name>\"}] , ordered in ascending order by maxScale . The last entry should have maxScale null , as the layer used for all remaining scales. This approach allows i.e. using a WMTS background layer in the web client for higher performance, and using a WMS background layer when printing for higher quality/resolution. The second option is to use WMS background layers, which are automatically printed as external layers. User labels \u00b6 User labels appear as free-text input fields in the QWC2 print dialog. To configure user labels, it is sufficient to add item id s to layout label items in the print layout. The specified id will appear as input field label in the QWC2 print dialog. Note : Label id s beginning with __ (two underscore characters) are ignored as user labels by QWC2. You can can customize the input field (max length, number of rows) by setting the printLabelConfig in the theme configuration . Also, in the theme configuration, you can also set: printLabelForSearchResult : The id of the label to which to write the current search result label, if any. printLabelForAttribution : The id of the label to which to write the current map attribution text, if any. If you set the Print plugin config option hideAutopopulatedFields to true , these labels will not be shown in the print dialog, otherwise they will be displayed as read-only fields. Print grid \u00b6 In alternative to configuring a grid directly in the print layout, one can also define a printGrid configuration in the theme configuration . For example \"printGrid\": { \"s\": 1000, \"x\": 500, \"y\": 500, \"s\": 2000, \"y\": 1000, \"y\": 1000, \"s\": 10000, \"y\": 5000, \"y\": 5000, } will print a 500x500 (map units) grid for scales up to 1:1000 , a 1000x1000 grid for scales up to 1:2000 , etc. Layouts with legend \u00b6 The QWC2 print dialog will expose a toggle switch to enable the legend in the print output for layout <layout_name> if the QGIS project contains a second layout named <layout_name>_legend . The layout with the _legend suffix is expected to contain a legend item. Atlas printing \u00b6 To enable atlas printing in QWC2, configure the QGIS project as follows: Check the Generate an atlas checkbox in the desired layout in QGIS layout designer \u2192 Atlas \u2192 Atlas settings, selecting the coverage layer as desired. In the layout map item properties, check Controlled by Atlas . In the Project properties \u2192 QGIS Server, set Maximum features for Atlas print requests to the desired value. QWC2 will then display a feature picked in the print dialog which will allow picking the desired atlas features, and QGIS Server will generate a multi-page PDF accordingly. Layout templates \u00b6 The QGIS Server print templates plugin allows providing a common set of print layouts to projects to avoid having to manage potentially identical print layouts multiple times in the individual projects. To configure it in qwc-docker , proceed as follows: Download the QGIS Server print templates plugin , i.e. to volumes/qgis-server-plugins/print_templates , choose a print layout folder (i.e. volumes/print-layouts ) and configure the qwc-qgis-server container as follows: qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> environment: FCGID_EXTRA_ENV: 'PRINT_LAYOUT_DIR' PRINT_LAYOUT_DIR: '/layouts' volumes: - ./volumes/qgis-server-plugins/print_templates:/usr/share/qgis/python/plugins/print_templates:ro - ./volumes/print-layouts:/layouts:ro ... Mount the print layout folder also into the config generator container: qwc-config-service: image: docker.io/sourcepole/qwc-config-generator:<TAG> volumes: - ./volumes/print-layouts:/layouts:ro ... Extend the config generator configuration in tenantConfig.json by specifying the location of the print layouts dir: { \"config\": { \"qgis_print_layouts_dir\": \"/layouts\" ... } ... }","title":"Printing"},{"location":"topics/Printing/#printing","text":"QWC2 supports printing to PDF via the QGIS Server GetPrint request. The basic steps are: Ensure the Print plugin is enabled in the QWC2 viewer. Create print layouts in the QGIS project as desired. The layouts must contain one Map element. Generate the themes configuration . The available print layouts will then appear in the QWC2 print plugin. You can limit the available print scales by setting printScales (or defaultPrintScales ) in the theme configuration to a list of scale denominators. If the list is empty, the print scale can be freely chosen. Similarly, you can limit the available print resolutions by setting printResolutions (or defaultPrintResolutions ) in the theme configuration to a list of resolutions. If the list is empty, the print resolution can be freely chosen. External WMS layers are automatically printed if the Print plugin config option printExternalLayers is true (default). Note that printing external WMTS layers is currently not supported by the QGIS Server. You can enable the option to generate a GeoPDF by setting the Print plugin config option allowGeoPdfExport to true . Note: This is only supported on QGIS Server 3.32 and newer. You can select output format for printing layout. Default values are application/pdf , image/jpeg , image/png and image/svg . You can restrict formats to one or more of them by setting the Print plugin config option formats to an array of these formats. See QGIS Server documentation for WMS GetPrint supported formats. Some additional tasks include: Configuring the print background layers Configuring user labels Configuring the print grid Configuring layouts with legend Configuring atlas printing","title":"Printing"},{"location":"topics/Printing/#configuring-print-background-layers","text":"Background layers are handled purely client-side in QWC2. There are two options for printing the background layer: The first option is to add a printLayer to the background layer entry when writing the themes configuration , i.e.: { ... \"backgroundLayers\": [ {\"name\": \"<background layer name>\", \"printLayer\": \"<qgis layer name or resource string>\"} ] } You can set printLayer to a QGIS layer name, or to a resource string (i.e. wms:<baseurl>#<layername> ). A QGIS layer marked as printLayer will be filtered out from the QWC2 layer tree, and hence will not be displayed in QWC2. You can also set printLayer to a list [{\"maxScale\": <scale>, \"name\": \"<layer name>\"}, ..., {\"maxScale\": null, \"name\": \"<QGis layer name>\"}] , ordered in ascending order by maxScale . The last entry should have maxScale null , as the layer used for all remaining scales. This approach allows i.e. using a WMTS background layer in the web client for higher performance, and using a WMS background layer when printing for higher quality/resolution. The second option is to use WMS background layers, which are automatically printed as external layers.","title":"Configuring print background layers "},{"location":"topics/Printing/#user-labels","text":"User labels appear as free-text input fields in the QWC2 print dialog. To configure user labels, it is sufficient to add item id s to layout label items in the print layout. The specified id will appear as input field label in the QWC2 print dialog. Note : Label id s beginning with __ (two underscore characters) are ignored as user labels by QWC2. You can can customize the input field (max length, number of rows) by setting the printLabelConfig in the theme configuration . Also, in the theme configuration, you can also set: printLabelForSearchResult : The id of the label to which to write the current search result label, if any. printLabelForAttribution : The id of the label to which to write the current map attribution text, if any. If you set the Print plugin config option hideAutopopulatedFields to true , these labels will not be shown in the print dialog, otherwise they will be displayed as read-only fields.","title":"User labels "},{"location":"topics/Printing/#print-grid","text":"In alternative to configuring a grid directly in the print layout, one can also define a printGrid configuration in the theme configuration . For example \"printGrid\": { \"s\": 1000, \"x\": 500, \"y\": 500, \"s\": 2000, \"y\": 1000, \"y\": 1000, \"s\": 10000, \"y\": 5000, \"y\": 5000, } will print a 500x500 (map units) grid for scales up to 1:1000 , a 1000x1000 grid for scales up to 1:2000 , etc.","title":"Print grid "},{"location":"topics/Printing/#layouts-with-legend","text":"The QWC2 print dialog will expose a toggle switch to enable the legend in the print output for layout <layout_name> if the QGIS project contains a second layout named <layout_name>_legend . The layout with the _legend suffix is expected to contain a legend item.","title":"Layouts with legend "},{"location":"topics/Printing/#atlas-printing","text":"To enable atlas printing in QWC2, configure the QGIS project as follows: Check the Generate an atlas checkbox in the desired layout in QGIS layout designer \u2192 Atlas \u2192 Atlas settings, selecting the coverage layer as desired. In the layout map item properties, check Controlled by Atlas . In the Project properties \u2192 QGIS Server, set Maximum features for Atlas print requests to the desired value. QWC2 will then display a feature picked in the print dialog which will allow picking the desired atlas features, and QGIS Server will generate a multi-page PDF accordingly.","title":"Atlas printing "},{"location":"topics/Printing/#layout-templates","text":"The QGIS Server print templates plugin allows providing a common set of print layouts to projects to avoid having to manage potentially identical print layouts multiple times in the individual projects. To configure it in qwc-docker , proceed as follows: Download the QGIS Server print templates plugin , i.e. to volumes/qgis-server-plugins/print_templates , choose a print layout folder (i.e. volumes/print-layouts ) and configure the qwc-qgis-server container as follows: qwc-qgis-server: image: docker.io/sourcepole/qwc-qgis-server:<TAG> environment: FCGID_EXTRA_ENV: 'PRINT_LAYOUT_DIR' PRINT_LAYOUT_DIR: '/layouts' volumes: - ./volumes/qgis-server-plugins/print_templates:/usr/share/qgis/python/plugins/print_templates:ro - ./volumes/print-layouts:/layouts:ro ... Mount the print layout folder also into the config generator container: qwc-config-service: image: docker.io/sourcepole/qwc-config-generator:<TAG> volumes: - ./volumes/print-layouts:/layouts:ro ... Extend the config generator configuration in tenantConfig.json by specifying the location of the print layouts dir: { \"config\": { \"qgis_print_layouts_dir\": \"/layouts\" ... } ... }","title":"Layout templates "},{"location":"topics/Search/","text":"Search \u00b6 QWC2 can be configured to use arbitrary custom search providers. In addition, the qwc-fulltext-search-service provided by the qwc-services ecosystem can be used. Adding search providers \u00b6 Search providers can be defined as follows: Built-in, defined in js/SearchProviders.js . This file is structured as follows: export const SearchProviders = { <providerkey1>: <ProviderDefinition1>, <providerkey2>: <ProviderDefinition2>, ... }; Built-in search providers are compiled into the application bundle and avoid the need for an extra resource to be loaded on application startup. The downside is that you need to rebuild QWC2 to add/modify search providers. As resource, defined in static/assets/searchProviders.js . This file is structured as follows: window.QWC2SearchProviders = { <providerkey1>: <ProviderDefinition1>, <providerkey2>: <ProviderDefinition2>, ... }; This script file needs to be loaded explicitly by index.html via <script type=\"text/javascript\" src=\"assets/searchProviders.js\" ></script> The format of ProviderDefinition is { label: \"<human readable provider name>\", // OR labelmsgid: \"<translation message ID for human readable provider name>\", onSearch: function(searchText, searchParams, callback, axios) => { const results = []; // See below /* Populate results... */ callback({results: results}); }, getResultGeometry: function(resultItem, callback, axios) => { /* Retreive geometry... */ // resultItem is a search result entry as returned by onSearch, which provides the context for retreiving the geometry const geometry = \"<wktString>\"; // or const geometry = {<GeoJSON geometry>}; const crs = \"EPSG:XXXX\"; const hidemarker = <boolean>; // Whether to suppress displaying a search marker on top of the search geometry callback({geometry: geometry, crs: crs, hidemarker: hidemarker}); }, handlesGeomFilter: <boolean>; // Hint whether provider will completely filter the results on provider side and that no client-side filtering is necessary } Notes: The format of searchParams is { displaycrs: \"EPSG:XXXX\", // Currently selected mouse coordinate display CRS mapcrs: \"EPSG:XXXX\", // The current map CRS lang: \"<code>\", // The current application language, i.e. en-US or en cfgParams: <params> // Additional parameters passed in the theme search provider configuration, see below filterBBox: <[xmin, ym\u00een, xmax, ymax]|null> // A filter bbox, in mapcrs, the search component may pass to the provider to narrow down the results filterPoly: <[[x0, y0], [x1, y1], ....]> // A filter polygon, in mapcrs, the search component may pass to the provider to narrow down the results } axios is passed for convenience so that providers can use the compiled-in axios library for network requests. The format of the results list returned by onSearch is as follows: results = [ { id: \"<categoryid>\", // Unique category ID title: \"<display_title>\", // Text to display as group title in the search results priority: priority_nr, // Optional: search result group priority. Groups with higher priority are displayed first in the list. items: [ { // Location search result: type: SearchResultType.PLACE, // Specifies that this is a location search result id: \"<itemId\">, // Unique item ID text: \"<display text>\", // Text to display as search result label: \"<map marker text>\", // Optional, text to show next to the position marker on the map instead of `text` x: x, // X coordinate of result y: y, // Y coordinate of result crs: crs, // CRS of result coordinates and bbox bbox: [xmin, ymin, xmax, ymax], // Bounding box of result (if non-empty, map will zoom to this extent when selecting result) geometry: <GeoJSON geometry> // Optional, result geometry. Note: geometries may also be fetched separately via getResultGeometry. }, { // Theme layer search result (advanced): type: SearchResultType.THEMELAYER, // Specifies that this is a theme layer search result id: \"<itemId\">, // Unique item ID text: \"<display text>\", // Text to display as search result layer: {<Layer definition>} // Layer definition, in the same format as a \"sublayers\" entry in themes.json. } ] }, { ... } ] Consult js/SearchProviders.js and static/assets/searchProviders.js for full examples. Filtering \u00b6 When using the SearchBox search component with allowSearchFilters: true passed in the TopBar searchOptions , you a filter menu will be displayed allowing to restrict the search area. If the provider does not fully handle the filter geometry internally ( handlesGeomFilter != true ), client-side filtering will be performed as follows: Polygon intersection test if the result has a geometry field with a Polygon geometry Polygon intersection test if the result has a bbox field Point-in-polygon test using the results x and y point coordinates You can also set a predefined list of filter areas by setting searchFilterRegions in config.json (or per-theme in themesConfig.json ) as follows: \"searchFilterRegions\": [ { \"name\": \"<Group name>\", \"items\": [ { \"name\": \"<Name>\", \"crs\": \"<EPSG:XXXX>\", \"coordinates\": [[x0, y0], [x1, y1], ...] }, ... ] }, ... ] ``` ## Configuring theme search providers For each theme item in `themesConfig.json`, you can define a list of search providers to enable for the theme as follows: ```json ... searchProviders: [ \"<providerkey1>\", // Simple form { // Provider with custom params \"provider\": \"<providerkey2>\", \"params\": { ... // Arbitrary params passed to the provider `onSearch` function as `searchParams.cfgParams` } }, { // Fulltext search configuration using qwc-fulltext-search-service \"provider\":\"solr\", // Identifier for solr search provider \"default\":[<default terms>] // Default search terms, concatenated with additional search terms from visible theme layers } ], ... Note: The qwc2-demo-app (also used by the qwc-map-viewer-demo docker image) includes three providers by default: coordinates , nominatim (OpenStreetMap location search), and qgis (see below ). Configuring the QGIS feature search \u00b6 The QGIS feature search relies on WMS GetFeatureInfo with the FILTER parameter to search features of layers which are part of the theme WMS. It is enabled via the qgis search provider, which is part of the qwc2-demo-app . Note : Make sure the QGIS Project is configured to return geometries with the feature info responses ( Project \u2192 Properties \u2192 QGIS Server \u2192 Add geometry to feature response ). In it's simples form, you can configure the theme search provider entry as follows: { \"provider\": \"qgis\", \"params\": { \"title\": \"<search name>\", \"expression\": { \"<layername1>\": \"<expression>\", \"<layername2>\": \"<expression>\" } } } where expression is a WMS GetFeatureInfo FILTER expression, for example \"\\\"name\\\" ILIKE '%$TEXT$%'\" . $TEXT$ will be replaced by the search text entered by the user, name corresponds to a field name of the specified layer. A more complex form, useable through the FeatureSearch plugin, allows defining a field configuration for multiple input fields. A full example is as follows: { \"provider\": \"qgis\", \"params\": { \"title\": \"Person search\", \"expression\": { \"persons\": \"\\\"name\\\" ILIKE '%$NAME$%' AND \\\"age\\\" >= $AGE$ AND \\\"gender\\\" = '$GENDER$'\" }, \"fields\": { \"NAME\": {\"label\": \"Name\", \"type\": \"text\"}, \"AGE\": {\"label\": \"Min. age\", \"type\": \"number\", \"options\": {\"min\": 0}}, \"GENDER\": {\"label\": \"Gender\", \"type\": \"select\", \"options\": [{\"value\": \"f\", \"label\": \"Female\"}, {\"value\": \"m\", \"label\": \"Male\"}]} } } } Here, each field will provide a value which is substituted in the expression. Any HTML Input type is supported (i.e. text , number , range , ...), with options depending on the input type. In addition, the select field type is supported to display a ComboBox, with the entries provided as options as in the example above. It is also possible to pass a flat list as options , i.e. [\"Female\", \"Male\"] if the value is equal to the label. Note : qgis provider searches are exposed to the search field only if no fields are specified (i.e. single input search). The FeatureSearch plugin on the other hand will list all qgis provider searches. In addition to the configuration described above, you can specify these additional parameters in params : featureCount : A number, passed as feature_count to the GetFeatureInfo request to control the maximum number of returned features. If not specified, defaults to 100 . resultTitle : A format string for the result title. Allowed placeholders are: {layername} for the layer name and {<fieldname>} for the value of fieldname . If not the layer name followed by the feature displayfield will be shown. description : An arbitrary descriptive text which will be displayed above the search fields in the FeatureSearch plugin. default : Whether the search is selected by default when opening the FeatureSearch plugin. group : A group name, used to group the searches in the FeatureSearch selection combobox. Configuring the fulltext search service \u00b6 Solr configuration \u00b6 Before the fulltext search service can be configured, a new solr configuration file must be created. This file must be created in volumes/solr/configsets/gdi/conf/ . The name of the file can be chosen freely. Here is an example XML file: <dataConfig> <dataSource driver=\"org.postgresql.Driver\" url=\"jdbc:postgresql://{DB_HOST}:{DB_PORT}/{DB_NAME}\" user=\"{DB_USER}\" password=\"{DB_PASSWORD}\" /> <document> <entity name=\"{SEARCH_NAME}\" query=\" WITH index_base AS ( /* ==== Base query for search index ==== */ SELECT '{SEARCH_NAME}'::text AS subclass, {PRIMARY_KEY} AS id_in_class, '{PRIMARY_KEY}' AS id_name, '{SEARCH_FIELD_DATA_TYPE}:n' AS id_type, {DISPLAYTEXT} AS displaytext, {SEARCH_FIELD_1} AS search_part_1, {GEOMETRY_FIELD} AS geom FROM {SCHEMA}.{SEARCH_TABLE_NAME} /* ===================================== */ ) SELECT (array_to_json(array_append(ARRAY[subclass::text], id_in_class::text)))::text AS id, displaytext AS display, search_part_1 AS search_1_stem, search_part_1 AS sort, subclass AS facet, 'default' AS tenant, (array_to_json(array_append(ARRAY[id_name::text], id_type::text)))::text AS idfield_meta, (st_asgeojson(st_envelope(geom), 0, 1)::json -> 'bbox')::text AS bbox, st_srid(geom) as srid FROM index_base\"> </entity> </document> </dataConfig> The next table shows how the values need to be defined: Name Definition Example DB_HOST Database hostname qwc-postgis DB_NAME Database name qwc_demo DB_PORT Database port number 5432 DB_USER Database username qwc_service DB_PASSWORD Password for the specified database user qwc_service SEARCH_NAME Name of the search fluesse_search PRIMARY_KEY Primary key name of the table that is used in the search query ogc_fid SEARCH_FIELD_DATA_TYPE Search field data type str DISPLAYTEXT Displaytext that will be shown by the QWC2 when a match was found name_long SEARCH_FIELD_1 Table field that will be used by the search name_long GEOMETRY_FIELD Name of the geometry column of the search table wkb_geometry SCHEMA Search table schema qwc_geodb SEARCH_TABLE_NAME Search table name fluesse Note : In the case of several searches sharing the same database connection, all searche queries can be written to the same XML file. Each search corresponds to exactly one <entity> tag in the XML file. After the configuration file has been created, the search must be registered in solr . In the volumes/solr/configsets/gdi/conf/solrconfig.xml file you have to look for <!-- SearchHandler and add the following configuration <requestHandler name=\"/SEARCH_NAME\" class=\"solr.DataImportHandler\"> <lst name=\"defaults\"> <str name=\"config\">NAME_OF_THE_CONFIGURATION_FILE.xml</str> </lst> </requestHandler> Finally, the solr index has to be generated: rm -rf volumes/solr/data/* docker compose restart qwc-solr curl 'http://localhost:8983/solr/gdi/SEARCH_NAME?command=full-import' Configure fulltext service \u00b6 The configuration of the fulltext search service can be found in tenantConfig.json . Search the services list for the JSON object that has search as its name. Then add a new facet to the facets list. An example entry could be: { \"name\": \"search\", \"config\": { \"solr_service_url\": \"http://qwc-solr:8983/solr/gdi/select\", \"search_result_limit\": 50, \"db_url\": \"postgresql:///?service=qwc_geodb\" }, \"resources\": { \"facets\": [ { \"name\": \"SEARCH_NAME\", \"filter_word\": \"OPTIONAL_SEARCH_FILTER\", \"table_name\": \"SCHEMA.SEARCH_TABLE_NAME\", \"geometry_column\": \"GEOMETRY_FIELD\", \"search_id_col\": \"PRIMARY_KEY\" } ] } } The filter_word field can be specified to activate / deactivate searches, if you have configure multiple searches for one theme. Normally filter_word is left empty ( \"\" ) which results in the search always being active. But if specified (e.g. \"house_no\" ) then the fulltext search will only use the configured search, if the user prefixes his search text with \"house_no:\" . Activate search for a theme \u00b6 As a final step, you have to configure the search for the desired themes and give the users the necessary rights in the Admin GUI. Add the following to a theme item in themesConfig.json : \"searchProviders\": [ { \"provider\": \"solr\", \"default\": [<SEARCH_NAME>], \"layers\": { \"<layer_name>\": \"<SEARCH_NAME>\" } } ] When activating a search to a theme, you can either: Add the search name to the default list, resulting in the search always being active. Add the search name to the layers object, resulting in the search being active only if the theme layer <layer_name> is present in the theme. Create a new resource in the Admin GUI Add permissions on the newly created resource Re-generate the services configurations with the Generate service configuration button","title":"Search"},{"location":"topics/Search/#search","text":"QWC2 can be configured to use arbitrary custom search providers. In addition, the qwc-fulltext-search-service provided by the qwc-services ecosystem can be used.","title":"Search"},{"location":"topics/Search/#adding-search-providers","text":"Search providers can be defined as follows: Built-in, defined in js/SearchProviders.js . This file is structured as follows: export const SearchProviders = { <providerkey1>: <ProviderDefinition1>, <providerkey2>: <ProviderDefinition2>, ... }; Built-in search providers are compiled into the application bundle and avoid the need for an extra resource to be loaded on application startup. The downside is that you need to rebuild QWC2 to add/modify search providers. As resource, defined in static/assets/searchProviders.js . This file is structured as follows: window.QWC2SearchProviders = { <providerkey1>: <ProviderDefinition1>, <providerkey2>: <ProviderDefinition2>, ... }; This script file needs to be loaded explicitly by index.html via <script type=\"text/javascript\" src=\"assets/searchProviders.js\" ></script> The format of ProviderDefinition is { label: \"<human readable provider name>\", // OR labelmsgid: \"<translation message ID for human readable provider name>\", onSearch: function(searchText, searchParams, callback, axios) => { const results = []; // See below /* Populate results... */ callback({results: results}); }, getResultGeometry: function(resultItem, callback, axios) => { /* Retreive geometry... */ // resultItem is a search result entry as returned by onSearch, which provides the context for retreiving the geometry const geometry = \"<wktString>\"; // or const geometry = {<GeoJSON geometry>}; const crs = \"EPSG:XXXX\"; const hidemarker = <boolean>; // Whether to suppress displaying a search marker on top of the search geometry callback({geometry: geometry, crs: crs, hidemarker: hidemarker}); }, handlesGeomFilter: <boolean>; // Hint whether provider will completely filter the results on provider side and that no client-side filtering is necessary } Notes: The format of searchParams is { displaycrs: \"EPSG:XXXX\", // Currently selected mouse coordinate display CRS mapcrs: \"EPSG:XXXX\", // The current map CRS lang: \"<code>\", // The current application language, i.e. en-US or en cfgParams: <params> // Additional parameters passed in the theme search provider configuration, see below filterBBox: <[xmin, ym\u00een, xmax, ymax]|null> // A filter bbox, in mapcrs, the search component may pass to the provider to narrow down the results filterPoly: <[[x0, y0], [x1, y1], ....]> // A filter polygon, in mapcrs, the search component may pass to the provider to narrow down the results } axios is passed for convenience so that providers can use the compiled-in axios library for network requests. The format of the results list returned by onSearch is as follows: results = [ { id: \"<categoryid>\", // Unique category ID title: \"<display_title>\", // Text to display as group title in the search results priority: priority_nr, // Optional: search result group priority. Groups with higher priority are displayed first in the list. items: [ { // Location search result: type: SearchResultType.PLACE, // Specifies that this is a location search result id: \"<itemId\">, // Unique item ID text: \"<display text>\", // Text to display as search result label: \"<map marker text>\", // Optional, text to show next to the position marker on the map instead of `text` x: x, // X coordinate of result y: y, // Y coordinate of result crs: crs, // CRS of result coordinates and bbox bbox: [xmin, ymin, xmax, ymax], // Bounding box of result (if non-empty, map will zoom to this extent when selecting result) geometry: <GeoJSON geometry> // Optional, result geometry. Note: geometries may also be fetched separately via getResultGeometry. }, { // Theme layer search result (advanced): type: SearchResultType.THEMELAYER, // Specifies that this is a theme layer search result id: \"<itemId\">, // Unique item ID text: \"<display text>\", // Text to display as search result layer: {<Layer definition>} // Layer definition, in the same format as a \"sublayers\" entry in themes.json. } ] }, { ... } ] Consult js/SearchProviders.js and static/assets/searchProviders.js for full examples.","title":"Adding search providers"},{"location":"topics/Search/#filtering","text":"When using the SearchBox search component with allowSearchFilters: true passed in the TopBar searchOptions , you a filter menu will be displayed allowing to restrict the search area. If the provider does not fully handle the filter geometry internally ( handlesGeomFilter != true ), client-side filtering will be performed as follows: Polygon intersection test if the result has a geometry field with a Polygon geometry Polygon intersection test if the result has a bbox field Point-in-polygon test using the results x and y point coordinates You can also set a predefined list of filter areas by setting searchFilterRegions in config.json (or per-theme in themesConfig.json ) as follows: \"searchFilterRegions\": [ { \"name\": \"<Group name>\", \"items\": [ { \"name\": \"<Name>\", \"crs\": \"<EPSG:XXXX>\", \"coordinates\": [[x0, y0], [x1, y1], ...] }, ... ] }, ... ] ``` ## Configuring theme search providers For each theme item in `themesConfig.json`, you can define a list of search providers to enable for the theme as follows: ```json ... searchProviders: [ \"<providerkey1>\", // Simple form { // Provider with custom params \"provider\": \"<providerkey2>\", \"params\": { ... // Arbitrary params passed to the provider `onSearch` function as `searchParams.cfgParams` } }, { // Fulltext search configuration using qwc-fulltext-search-service \"provider\":\"solr\", // Identifier for solr search provider \"default\":[<default terms>] // Default search terms, concatenated with additional search terms from visible theme layers } ], ... Note: The qwc2-demo-app (also used by the qwc-map-viewer-demo docker image) includes three providers by default: coordinates , nominatim (OpenStreetMap location search), and qgis (see below ).","title":"Filtering "},{"location":"topics/Search/#configuring-the-qgis-feature-search","text":"The QGIS feature search relies on WMS GetFeatureInfo with the FILTER parameter to search features of layers which are part of the theme WMS. It is enabled via the qgis search provider, which is part of the qwc2-demo-app . Note : Make sure the QGIS Project is configured to return geometries with the feature info responses ( Project \u2192 Properties \u2192 QGIS Server \u2192 Add geometry to feature response ). In it's simples form, you can configure the theme search provider entry as follows: { \"provider\": \"qgis\", \"params\": { \"title\": \"<search name>\", \"expression\": { \"<layername1>\": \"<expression>\", \"<layername2>\": \"<expression>\" } } } where expression is a WMS GetFeatureInfo FILTER expression, for example \"\\\"name\\\" ILIKE '%$TEXT$%'\" . $TEXT$ will be replaced by the search text entered by the user, name corresponds to a field name of the specified layer. A more complex form, useable through the FeatureSearch plugin, allows defining a field configuration for multiple input fields. A full example is as follows: { \"provider\": \"qgis\", \"params\": { \"title\": \"Person search\", \"expression\": { \"persons\": \"\\\"name\\\" ILIKE '%$NAME$%' AND \\\"age\\\" >= $AGE$ AND \\\"gender\\\" = '$GENDER$'\" }, \"fields\": { \"NAME\": {\"label\": \"Name\", \"type\": \"text\"}, \"AGE\": {\"label\": \"Min. age\", \"type\": \"number\", \"options\": {\"min\": 0}}, \"GENDER\": {\"label\": \"Gender\", \"type\": \"select\", \"options\": [{\"value\": \"f\", \"label\": \"Female\"}, {\"value\": \"m\", \"label\": \"Male\"}]} } } } Here, each field will provide a value which is substituted in the expression. Any HTML Input type is supported (i.e. text , number , range , ...), with options depending on the input type. In addition, the select field type is supported to display a ComboBox, with the entries provided as options as in the example above. It is also possible to pass a flat list as options , i.e. [\"Female\", \"Male\"] if the value is equal to the label. Note : qgis provider searches are exposed to the search field only if no fields are specified (i.e. single input search). The FeatureSearch plugin on the other hand will list all qgis provider searches. In addition to the configuration described above, you can specify these additional parameters in params : featureCount : A number, passed as feature_count to the GetFeatureInfo request to control the maximum number of returned features. If not specified, defaults to 100 . resultTitle : A format string for the result title. Allowed placeholders are: {layername} for the layer name and {<fieldname>} for the value of fieldname . If not the layer name followed by the feature displayfield will be shown. description : An arbitrary descriptive text which will be displayed above the search fields in the FeatureSearch plugin. default : Whether the search is selected by default when opening the FeatureSearch plugin. group : A group name, used to group the searches in the FeatureSearch selection combobox.","title":"Configuring the QGIS feature search "},{"location":"topics/Search/#configuring-the-fulltext-search-service","text":"","title":"Configuring the fulltext search service "},{"location":"topics/Search/#solr-configuration","text":"Before the fulltext search service can be configured, a new solr configuration file must be created. This file must be created in volumes/solr/configsets/gdi/conf/ . The name of the file can be chosen freely. Here is an example XML file: <dataConfig> <dataSource driver=\"org.postgresql.Driver\" url=\"jdbc:postgresql://{DB_HOST}:{DB_PORT}/{DB_NAME}\" user=\"{DB_USER}\" password=\"{DB_PASSWORD}\" /> <document> <entity name=\"{SEARCH_NAME}\" query=\" WITH index_base AS ( /* ==== Base query for search index ==== */ SELECT '{SEARCH_NAME}'::text AS subclass, {PRIMARY_KEY} AS id_in_class, '{PRIMARY_KEY}' AS id_name, '{SEARCH_FIELD_DATA_TYPE}:n' AS id_type, {DISPLAYTEXT} AS displaytext, {SEARCH_FIELD_1} AS search_part_1, {GEOMETRY_FIELD} AS geom FROM {SCHEMA}.{SEARCH_TABLE_NAME} /* ===================================== */ ) SELECT (array_to_json(array_append(ARRAY[subclass::text], id_in_class::text)))::text AS id, displaytext AS display, search_part_1 AS search_1_stem, search_part_1 AS sort, subclass AS facet, 'default' AS tenant, (array_to_json(array_append(ARRAY[id_name::text], id_type::text)))::text AS idfield_meta, (st_asgeojson(st_envelope(geom), 0, 1)::json -> 'bbox')::text AS bbox, st_srid(geom) as srid FROM index_base\"> </entity> </document> </dataConfig> The next table shows how the values need to be defined: Name Definition Example DB_HOST Database hostname qwc-postgis DB_NAME Database name qwc_demo DB_PORT Database port number 5432 DB_USER Database username qwc_service DB_PASSWORD Password for the specified database user qwc_service SEARCH_NAME Name of the search fluesse_search PRIMARY_KEY Primary key name of the table that is used in the search query ogc_fid SEARCH_FIELD_DATA_TYPE Search field data type str DISPLAYTEXT Displaytext that will be shown by the QWC2 when a match was found name_long SEARCH_FIELD_1 Table field that will be used by the search name_long GEOMETRY_FIELD Name of the geometry column of the search table wkb_geometry SCHEMA Search table schema qwc_geodb SEARCH_TABLE_NAME Search table name fluesse Note : In the case of several searches sharing the same database connection, all searche queries can be written to the same XML file. Each search corresponds to exactly one <entity> tag in the XML file. After the configuration file has been created, the search must be registered in solr . In the volumes/solr/configsets/gdi/conf/solrconfig.xml file you have to look for <!-- SearchHandler and add the following configuration <requestHandler name=\"/SEARCH_NAME\" class=\"solr.DataImportHandler\"> <lst name=\"defaults\"> <str name=\"config\">NAME_OF_THE_CONFIGURATION_FILE.xml</str> </lst> </requestHandler> Finally, the solr index has to be generated: rm -rf volumes/solr/data/* docker compose restart qwc-solr curl 'http://localhost:8983/solr/gdi/SEARCH_NAME?command=full-import'","title":"Solr configuration"},{"location":"topics/Search/#configure-fulltext-service","text":"The configuration of the fulltext search service can be found in tenantConfig.json . Search the services list for the JSON object that has search as its name. Then add a new facet to the facets list. An example entry could be: { \"name\": \"search\", \"config\": { \"solr_service_url\": \"http://qwc-solr:8983/solr/gdi/select\", \"search_result_limit\": 50, \"db_url\": \"postgresql:///?service=qwc_geodb\" }, \"resources\": { \"facets\": [ { \"name\": \"SEARCH_NAME\", \"filter_word\": \"OPTIONAL_SEARCH_FILTER\", \"table_name\": \"SCHEMA.SEARCH_TABLE_NAME\", \"geometry_column\": \"GEOMETRY_FIELD\", \"search_id_col\": \"PRIMARY_KEY\" } ] } } The filter_word field can be specified to activate / deactivate searches, if you have configure multiple searches for one theme. Normally filter_word is left empty ( \"\" ) which results in the search always being active. But if specified (e.g. \"house_no\" ) then the fulltext search will only use the configured search, if the user prefixes his search text with \"house_no:\" .","title":"Configure fulltext service"},{"location":"topics/Search/#activate-search-for-a-theme","text":"As a final step, you have to configure the search for the desired themes and give the users the necessary rights in the Admin GUI. Add the following to a theme item in themesConfig.json : \"searchProviders\": [ { \"provider\": \"solr\", \"default\": [<SEARCH_NAME>], \"layers\": { \"<layer_name>\": \"<SEARCH_NAME>\" } } ] When activating a search to a theme, you can either: Add the search name to the default list, resulting in the search always being active. Add the search name to the layers object, resulting in the search being active only if the theme layer <layer_name> is present in the theme. Create a new resource in the Admin GUI Add permissions on the newly created resource Re-generate the services configurations with the Generate service configuration button","title":"Activate search for a theme"},{"location":"topics/Snapping/","text":"Snapping \u00b6 QWC2 ships a plugin for snapping support while drawing (redlining / measuring / editing). To enable it, make sure the SnappingSupport plugin is enabled in appConfig.js (see the sample sample js/appConfig.js ). Then, for each theme for which you want snapping to be available, you can add a snapping block to your theme item in themesConfig.json as follows: ... \"snapping\": { \"snaplayers\": [ { \"name\": \"<layername>\", \"min\": <min_scale>, \"max\": <max_scale> } ], \"featureCount\": <feature_count>, \"wfsMaxScale\": <wfs_max_scale> } ... where: layername is the name of the theme sublayer from which to retreive the snapping geometries. min is the minimum scale denominator (inclusive) from which this layer should be used for snapping. max is the maximum scale denominator (exclusive) up to which this layer should be used for snapping. feature_count is the maximum number of snapping geometries to retreive for the current map extent (default: 500). wfs_max_scale is the maximum scale denominator (exclusive) up to which loaded WFS layers should be used for snapping. Note : Snapping works by querying the geometries of all snapping layers inside the scale range via WMS GetFeatureInfo and refreshing the geometries every time the map extent changes. Therefore, it is recommended to ensure the geometry complexity of the snap layers is appropriate for the specified scale ranges to avoid overloading the server with the GetFeatureInfo requests. Also, the QGIS project will need to be configured so that snap layers are queryable and that feature info responses contain geometries. For the Redlining , Measure and Editing plugins, the availability of snapping can be independently configured: { \"name\":\"<Redlining|Measure|Editing>\", \"cfg\": { \"snapping\": <true|false>, \"snappingActive\": <true|false>, ... } } where: snapping determines whether snapping is available for the specified plugin snappingActive determines whether snapping is active by default for the specified plugin When snapping is available, a small toolbar appears on the bottom border of the map with the possibility to toggle snapping.","title":"Snapping"},{"location":"topics/Snapping/#snapping","text":"QWC2 ships a plugin for snapping support while drawing (redlining / measuring / editing). To enable it, make sure the SnappingSupport plugin is enabled in appConfig.js (see the sample sample js/appConfig.js ). Then, for each theme for which you want snapping to be available, you can add a snapping block to your theme item in themesConfig.json as follows: ... \"snapping\": { \"snaplayers\": [ { \"name\": \"<layername>\", \"min\": <min_scale>, \"max\": <max_scale> } ], \"featureCount\": <feature_count>, \"wfsMaxScale\": <wfs_max_scale> } ... where: layername is the name of the theme sublayer from which to retreive the snapping geometries. min is the minimum scale denominator (inclusive) from which this layer should be used for snapping. max is the maximum scale denominator (exclusive) up to which this layer should be used for snapping. feature_count is the maximum number of snapping geometries to retreive for the current map extent (default: 500). wfs_max_scale is the maximum scale denominator (exclusive) up to which loaded WFS layers should be used for snapping. Note : Snapping works by querying the geometries of all snapping layers inside the scale range via WMS GetFeatureInfo and refreshing the geometries every time the map extent changes. Therefore, it is recommended to ensure the geometry complexity of the snap layers is appropriate for the specified scale ranges to avoid overloading the server with the GetFeatureInfo requests. Also, the QGIS project will need to be configured so that snap layers are queryable and that feature info responses contain geometries. For the Redlining , Measure and Editing plugins, the availability of snapping can be independently configured: { \"name\":\"<Redlining|Measure|Editing>\", \"cfg\": { \"snapping\": <true|false>, \"snappingActive\": <true|false>, ... } } where: snapping determines whether snapping is available for the specified plugin snappingActive determines whether snapping is active by default for the specified plugin When snapping is available, a small toolbar appears on the bottom border of the map with the possibility to toggle snapping.","title":"Snapping"},{"location":"topics/TimeManager/","text":"Temporal layers (Time Manager) \u00b6 QWC2 supports WMS layers with time dimension (WMS-T) through the TimeManager plugin. To view and manage temporal layers in QWC2, add a new time dimension, selecting appropriate temporal fields as start- and end-attributes in the QGIS Layer Properties \u2192 QGIS Server \u2192 Dimensions. For the time markers functionality in the Time Manager plugin to work correctly, you also need to enable the qwc-feature-info-service . Note: The QGIS Layer Properties \u2192 Temporal settings are ignored by QGIS Server and hence have no effect in QWC2.","title":"Temporal layers"},{"location":"topics/TimeManager/#temporal-layers-time-manager","text":"QWC2 supports WMS layers with time dimension (WMS-T) through the TimeManager plugin. To view and manage temporal layers in QWC2, add a new time dimension, selecting appropriate temporal fields as start- and end-attributes in the QGIS Layer Properties \u2192 QGIS Server \u2192 Dimensions. For the time markers functionality in the Time Manager plugin to work correctly, you also need to enable the qwc-feature-info-service . Note: The QGIS Layer Properties \u2192 Temporal settings are ignored by QGIS Server and hence have no effect in QWC2.","title":"Temporal layers (Time Manager)"}]}